<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Shell】Shell命令-sed</title>
      <link href="post/9720d703.html"/>
      <url>post/9720d703.html</url>
      
        <content type="html"><![CDATA[<p>摘要：</p><p>&emsp;&emsp;本文主要介绍<code>Shell</code>中一个文本处理命令<code>sed</code>。</p><span id="more"></span><p>&emsp;&emsp;自己本身也有在学<code>Shell</code>编程，有些操作通过命令来进行却是比人为快得多，最近重写了自己博客下边的自动脚本文件，想到自己经常去重新初始化站点，重新安装主题，每一次也要敲不少的命令，也是比较繁琐，发现原来<code>Shell</code>中有这样一个可以处理文本的命令，但是却要比平时所用的命令复杂得多。</p><h1 id="1-sed简介"><a href="#1-sed简介" class="headerlink" title="1.sed简介"></a><font size=3>1.<code>sed</code>简介</font></h1><p>&emsp;&emsp;<code>sed</code>算是是一种在线编辑器，采用的是流编辑模式，它一次处理文件中一行的内容。</p><p>&emsp;&emsp;进行文本处理时，会把当前处理的行存储在<strong>临时缓冲区</strong>中，称为“模式空间”（<code>pattern space</code>），接着用<code>sed</code>命令处理缓冲区中的内容，处理完成后，把缓冲区的内容<strong>送往屏幕</strong>，所以每处理一次就会有一次输出。接着处理下一行，这样不断重复，直到文件末尾。</p><p>【注意】<code>sed </code>默认不会直接修改源文件数据，而是会将数据复制到缓冲区中，修改也仅限于缓冲区中的数据。</p><h1 id="2-sed命令"><a href="#2-sed命令" class="headerlink" title="2.sed命令"></a><font size=3>2.<code>sed</code>命令</font></h1><p><code>sed</code>命令，不管是否找到指定的模式，它的退出状态都是<code>0</code>。只有当命令存在语法错误时，<code>sed</code>的退出状态才不是<code>0</code>。语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [ option ] [ action ] file_name</span><br></pre></td></tr></table></figure><ul><li><code>option</code></li></ul><table>    <tr>        <td align="center" rowspan="4">option</td>        <td align="center" width=150px>-n</td>        <td align="left">该选项会屏蔽启动输出，仅显示script处理后的结果</td>    </tr>    <tr>        <td align="center" width=150px>-i</td>        <td align="left">直接修改文件内容，而不是输出到终端。</td>    </tr>    <tr>        <td align="center" width=150px>-e [script] </td>        <td align="left">以选项中指定的script来处理输入的文本文件，若之前已有命令，此时会将script脚本命令添加到已有的命令中。</td>    </tr>    <tr>        <td align="center" width=150px>-f [script文件] </td>        <td align="left">以选项中指定的script文件来处理输入的文本文件，若之前已有命令，此时会将script文件中的脚本命令添加到已有的命令中。</td>    </tr></table>【注意】`-i`选项要慎用，毕竟会直接修改原文件。<ul><li><code>action</code></li></ul><table>    <tr>        <td align="center" rowspan="8">action</td>        <td align="center" width=50px>a</td>        <td align="left">新增， a 的后面可以接字符串，这些字串会在新的一行出现(当前行的下一行)。<br>【注意】若要插入多行，则行之间要加上 \ 。</td>    </tr>    <tr>        <td align="center" width=50px>c</td>        <td align="left">替换整行，用此符号后的新文本替换当前行中的文本。</td>    </tr>    <tr>        <td align="center" width=50px>d</td>        <td align="left">删除，通常不接任何东西</td>    </tr>    <tr>        <td align="center" width=50px>i</td>        <td align="left">插入，后面可以跟字符串，在当前行的上一行插入文本<br>【注意】若要插入多行，则行之间要加上 \ 。</td>    </tr>    <tr>        <td align="center" width=50px>p</td>        <td align="left">打印，通常与 -n 一起使用。</td>    </tr>    <tr>        <td align="center" width=50px>s</td>        <td align="left">替换字符串，可以搭配正则表达式，用一个字符串替换另一个字符串</td>    </tr>    <tr>        <td align="center" width=50px>y</td>        <td align="left">将字符替换为另一字符（不能对正则表达式使用y命令）</td>    </tr>    <tr>        <td align="center" width=50px>r</td>        <td align="left">将一个独立文件的数据插入到当前数据流的指定位置</td>    </tr></table><p>【注意】<code>sed</code> 后面接的动作，要以 <code>&#39; &#39; </code>两个单引号括住。</p><ul><li>相关正则表达式</li></ul><table>    <tr>        <td align="center" width=100px>字符</td>        <td align="center" width=200px>说明</td>        <td align="center">实例</td>    </tr>    <tr>        <td align="center">^</td>        <td align="left">行首定位符</td>        <td align="left"> /^a/  匹配所有以a开头的行。</td>    </tr>    <tr>        <td align="center">$</td>        <td align="left">行尾定位符</td>        <td align="left"> /a$/  匹配所有以 a 结尾的行。</td>    </tr>    <tr>        <td align="center">.</td>        <td align="left">匹配除换行符以外的单个字符</td>        <td align="left"> /a..b/  匹配包含字母 a ，后跟两个任意字符，再跟字母 b 的行。</td>    </tr>    <tr>        <td align="center">*</td>        <td align="left">匹配除换行符以外的单个字符</td>        <td align="left"> /a..b/  匹配包含字母 a ，后跟两个任意字符，再跟字母 b 的行</td>    </tr>    <tr>        <td align="center">[]</td>        <td align="left">匹配指定字符组内的任一字符</td>        <td align="left"> /[Aa]b/  匹配包含 Ab 或 ab 的行。</td>    </tr>    <tr>        <td align="center">[^]</td>        <td align="left">匹配不在指定字符组内的任一字符</td>        <td align="left">  /[^Aa]b/  匹配包含 b ，但 b 之前的那个字符不是 A 或 a 的行。</td>    </tr>    <tr>        <td align="center">\(..\)</td>        <td align="left">保存已匹配的字符</td>        <td align="left"> 1,5s/\(you\)self/\1r/ 标记元字符之间的模式，并将其保存为标签 1 ，之后可以使用 \1 来引用它。最多可以定义 9 个标签，从左边开始编号，最左边的是第一个。此例中，对第 1 到第 5 行进行处理，you被保存为标签 1 ，如果发现 youself ，则替换为 your 。</td>    </tr>    <tr>        <td align="center">&</td>        <td align="left"> 保存查找的字符串以便在替换串中引用</td>        <td align="left"> s/ab/**&**/  符号 & 代表查找的字符串，ab 将会被替换为**ab**。</td>    </tr>    <tr>        <td align="center"> \< </td>        <td align="left">词首定位符</td>        <td align="left">/\&lt;ab/  匹配包含以 ab 开头的单词的行。</td>    </tr>    <tr>        <td align="center"> \> </td>        <td align="left">词尾定位符</td>        <td align="left"> /ab\>/  匹配包含以 ab 结尾的单词的行。</td>    </tr>    <tr>        <td align="center"> a\{n\} </td>        <td align="left">连续 n 个 a </td>        <td align="left"> /a\{5\}/ 匹配包含连续 5 个 a 的行。</td>    </tr>    <tr>        <td align="center"> a\{n,\} </td>        <td align="left">至少连续 n 个 a </td>        <td align="left"> /a\{5,\}/  匹配包含至少连续 5 个 a 的行。</td>    </tr>    <tr>        <td align="center"> a\{m,n\} </td>        <td align="left">至少连续 m 个，但不超过连续 n 个 a </td>        <td align="left">  /a\{5,7\}/  匹配包含连续 5 到 7 个 a 的行。</td>    </tr></table><h1 id="3-sed使用实例"><a href="#3-sed使用实例" class="headerlink" title="3.sed使用实例"></a><font size=3>3.<code>sed</code>使用实例</font></h1><p>&emsp;&emsp;只说参数并不能很好理解如何使用，这里将会有大量的实例来帮忙理解。先写一个测试用的文件，就以<code>Hexo</code>的站点配置文件为例，删除一些东西，留下一些用于测试使用。文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] <span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line">[<span class="number">2</span>] <span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line">[<span class="number">3</span>] <span class="attr">language:</span> <span class="string">en</span></span><br><span class="line">[<span class="number">4</span>] <span class="attr">url:</span> <span class="string">http://example.com</span></span><br><span class="line">[<span class="number">5</span>] <span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line">[<span class="number">6</span>]</span><br><span class="line">[<span class="number">7</span>] <span class="attr">theme: theme:</span> <span class="string">landscape</span> <span class="string">theme</span></span><br><span class="line">[<span class="number">8</span>] <span class="attr">theme:</span> <span class="string">aaa</span></span><br><span class="line">[<span class="number">9</span>] <span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line">[<span class="number">10</span>]<span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line">[<span class="number">11</span>]<span class="attr">Theme:</span> <span class="string">def</span></span><br></pre></td></tr></table></figure><p>【说明】我这里用的是<code>Windows</code>下<code>Git</code>的<code>bash</code>，与<code>linux</code>中应该是一样的。另外运行脚本中的<code>$ ./mine.sh</code>表示在命令行运行该脚本文件，下边的为输出结果</p><h2 id="3-1a和i动作"><a href="#3-1a和i动作" class="headerlink" title="3.1a和i动作"></a><font size=3>3.1<code>a和i</code>动作</font></h2><ul><li>在第<code>n</code>行前后各插入一行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed ni\string file_name</span></span><br><span class="line">sed 2i\这是第2行前新插入的行 ./_config.yml</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            这是第2行前新插入的行 <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>    </tr></table><ul><li>在第<code>n</code>行后插入一行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed na\string file_name</span></span><br><span class="line">sed 2a\这是第2行后新插入的行 ./_config.yml</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            这是第2行后新插入的行 <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>    </tr></table><h2 id="3-2d动作"><a href="#3-2d动作" class="headerlink" title="3.2d动作"></a><font size=3>3.2<code>d</code>动作</font></h2><ul><li>通过行号指定删除行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed <span class="string">&#x27;nd&#x27;</span> filename</span></span><br><span class="line">sed &#x27;2d&#x27; ./_config.yml # 删除第2行</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>    </tr></table><ul><li>通过区间删除行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed <span class="string">&#x27;n1,n2d&#x27;</span> filename</span></span><br><span class="line">sed &#x27;2,4d&#x27; ./_config.yml # 删除2-4行，共删除3行</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>    </tr></table><ul><li>通过数据搜索删除行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed <span class="string">&#x27;/&lt;string&gt;/d&#x27;</span> filename</span></span><br><span class="line">sed &#x27;/theme/d&#x27; ./_config.yml # 删除含有theme的行</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [11]Theme: def <br>        </td>    </tr></table><h2 id="3-3c动作"><a href="#3-3c动作" class="headerlink" title="3.3c动作"></a><font size=3>3.3<code>c</code>动作</font></h2><ul><li>通过行号指定替换行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed <span class="string">&#x27;2c &lt;string&gt;&#x27;</span> filename</span></span><br><span class="line">sed &#x27;2c 这是替换后的第2行&#x27; ./_config.yml</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            这是替换后的第2行<br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>    </tr></table><ul><li>通过区间指定替换行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed <span class="string">&#x27;n1,n2c &lt;string&gt;&#x27;</span> filename</span></span><br><span class="line">sed &#x27;2,3c 2,3行已被替换，这是替换后的行&#x27; ./_config.yml</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            2,3行已被替换，这是替换后的行<br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>    </tr></table><h2 id="3-4-n选项与p动作"><a href="#3-4-n选项与p动作" class="headerlink" title="3.4-n选项与p动作"></a><font size=3>3.4<code>-n选项与p动作</code></font></h2><ul><li>数据的搜索显示</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed <span class="string">&#x27;/&lt;string&gt;/p&#x27;</span> filename</span></span><br><span class="line">sed &#x27;/theme/p&#x27; ./_config.yml # 显示含有 theme的行</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>    </tr></table><p>会发现，含有<code>theme</code>的行每行都被显示了两次，一次是处理的时候的输出，另一次是<code>p</code>动作的输出。那么如何只输出我所需要的行呢？</p><ul><li><code>-n</code>的使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed -n <span class="string">&#x27;/&lt;string&gt;/p&#x27;</span> filename</span></span><br><span class="line">sed -n &#x27;/theme/p&#x27; ./_config.yml # 显示含有 theme的行</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>        </td>    </tr></table><h2 id="3-5s动作"><a href="#3-5s动作" class="headerlink" title="3.5s动作"></a><font size=3>3.5<code>s动作</code></font></h2><p>&emsp;&emsp;<code>s</code>就是字符串替换的命令，使用格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s/original/target/flags</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=100px>original</td>        <td align="left" colspan="2">需要替换的字符串，也就是原来的字符串</td>    </tr>    <tr>        <td align="center">target</td>        <td align="left" colspan="2">替换后的字符串，也就是目标字符串</td>    </tr>    <tr>        <td align="center" rowspan="7">flags</td>        <td align="center" width=80px>n</td>        <td align="left">1 ~ 512 之间的数字，表示指定要替换的字符串出现第几次时才进行替换，例如，一行中有 5 个 a，但用户只想替换第 3 个 a，就可以使用此标记。</td>    </tr>    <tr>        <td align="center" width=80px>g</td>        <td align="left">对数据中所有匹配到的内容进行替换，如果没有 g，则只会在第 1 次匹配成功时做替换操作。</td>    </tr>    <tr>        <td align="center">p</td>        <td align="left">会打印与替换命令中指定的模式匹配的行。此标记通常与 -n 选项一起使用。</td>    </tr>    <tr>        <td align="center" width=80px>w file</td>        <td align="left">将缓冲区中的内容写到指定的 file 文件中。</td>    </tr>    <tr>        <td align="center" width=80px>&</td>        <td align="left">用正则表达式匹配的内容进行替换。</td>    </tr>    <tr>        <td align="center" width=80px>\n</td>        <td align="left">匹配第 n 个子串，该子串之前在 original 中用 \(\) 指定。</td>    </tr>    <tr>        <td align="center" width=80px>\</td>        <td align="left">转义（转义替换部分包含：&、\ 等）。</td>    </tr></table><ul><li>替换字符串的<code>n与g</code>标识</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed <span class="string">&#x27;s/original/target/g&#x27;</span> filename</span></span><br><span class="line"><span class="meta">#</span><span class="bash">      sed <span class="string">&#x27;s/original/target/n&#x27;</span> filename</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed <span class="string">&#x27;s/theme/我是替换的字符串/g&#x27;</span> ./_config.yml <span class="comment"># 替换匹配到的所有 theme</span></span></span><br><span class="line">sed &#x27;s/theme/我是替换的字符串/2&#x27; ./_config.yml # 替换匹配到的第2个 theme</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: 我是替换的字符串: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>    </tr></table><p>【说明】<code>-g</code>选项则是替换所有的匹配值，这里不再说明。</p><ul><li>显示替换行的<code>p</code>标识</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed -n <span class="string">&#x27;s/original/target/p&#x27;</span> filename</span></span><br><span class="line">sed -n &#x27;s/theme/我是替换的字符串/p&#x27; ./_config.yml</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [7] 我是替换的字符串: theme: landscape theme <br>            [8] 我是替换的字符串: aaa <br>            [9] 我是替换的字符串: landscape <br>            [10]我是替换的字符串: landscape <br>        </td>    </tr></table><p>【说明】此时仅仅输出了替换的行，但是，只要含有<code>theme</code>的行，每行的第一个<code>theme</code>都会被替换。</p><ul><li>匹配结果进行保存的<code>w file</code>标识</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed <span class="string">&#x27;s/original/target/w test.txt&#x27;</span> filename</span></span><br><span class="line">sed -n &#x27;s/theme/我是替换的字符串/w test.txt&#x27; ./_config.yml</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">text.txt文件内容(屏幕不显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [7] 我是替换的字符串: theme: landscape theme <br>            [8] 我是替换的字符串: aaa <br>            [9] 我是替换的字符串: landscape <br>            [10]我是替换的字符串: landscape <br>        </td>    </tr></table><ul><li>转义标识<code>\</code></li></ul><p>主要是用于替换文件中的路径时用的较多。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed <span class="string">&#x27;s/original/target/g&#x27;</span> filename</span></span><br><span class="line">sed &#x27;s/\/bin\/bash/\/abs\/df/g&#x27; ./_config.yml</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件(这里增加了第12行用于测试)</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>            [12]/bin/bash        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>            [12]/abs/df        </td>    </tr></table>- 数据搜索并显示并执行命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式：sed -n <span class="string">&#x27;/string/&#123;s/original/target/;p;q&#125;&#x27;</span> filename</span></span><br><span class="line">sed -n &#x27;/theme/&#123;s/landscape/next/;p;q&#125;&#x27; ./_config.yml</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [7] theme: theme: next theme <br>        </td>    </tr></table><p>【说明】该命令会找到<code>string</code>出现的第一行，再执行后面花括号中的一组命令，每个命令之间用<strong>分号分隔</strong>，这里把<code>landscape</code>替换为<code>next</code> ，    p    表示显示处理结果，<code>q</code>表示退出。</p><h2 id="3-6y动作"><a href="#3-6y动作" class="headerlink" title="3.6y动作"></a><font size=3>3.6<code>y动作</code></font></h2><p>&emsp;&emsp;<code>y</code> 转换命令是唯一可以处理单个字符的 <code>sed</code> 脚本命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[address]y/inchars/outchars/</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;转换命令会对 <code>inchars</code> 和 <code>outchars</code> 值进行一对一的映射，即 <code>inchars</code> 中的第一个字符会被转换为 <code>outchars</code> 中的第一个字符，第二个字符会被转换成 <code>outchars</code> 中的第二个字符…，这个映射过程会一直持续到处理完指定字符。如果 <code>inchars</code> 和 <code>outchars</code> 的长度不同，则 <code>sed</code> 会产生一条错误消息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line">sed &#x27;1,$y/theme:/THEME*/&#x27; datafile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 1 到尾行内所有行，所有的 <span class="string">&#x27;t&#x27;</span> <span class="string">&#x27;h&#x27;</span> <span class="string">&#x27;e&#x27;</span> <span class="string">&#x27;m&#x27;</span> <span class="string">&#x27;e&#x27;</span> 5个字母分别转换成  <span class="string">&#x27;T&#x27;</span> <span class="string">&#x27;H&#x27;</span> <span class="string">&#x27;E&#x27;</span> <span class="string">&#x27;M&#x27;</span> <span class="string">&#x27;E&#x27;</span> 5个字母，将 <span class="string">&#x27;:&#x27;</span> 转换成 <span class="string">&#x27;*&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正则表达式元字符对y命令不起作用。与s命令的分隔符一样，斜线可以被替换成其它的字符。</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] TiTlE* HExo <br>            [2] auTHor* JoHn DoE <br>            [3] languagE* En <br>            [4] url* HTTp*//ExaMplE.coM <br>            [5] pErMalink* *yEar/*MonTH/*day/*TiTlE/ <br>            [6] <br>            [7] THEME* THEME* landscapE THEME <br>            [8] THEME* aaa <br>            [9] THEME* landscapE <br>            [10]THEME* landscapE <br>            [11]THEME* dEf <br>        </td>    </tr></table><h2 id="3-7r动作"><a href="#3-7r动作" class="headerlink" title="3.7r动作"></a><font size=3>3.7<code>r</code>动作</font></h2><p>&emsp;&emsp;创建一个<code>test.txt</code>的文件，里边写入数据<code>theme: next</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line">sed &#x27;3r test.txt&#x27; ./_config.yml # 将test.txt中的文件插入到_config.yml文件第三行后面一行</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            theme: next<br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>    </tr></table><h2 id="3-8-e-选项"><a href="#3-8-e-选项" class="headerlink" title="3.8-e 选项"></a><font size=3>3.8<code>-e 选项</code></font></h2><ul><li>多条命令连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件不变</span></span><br><span class="line">sed -e &#x27;2,3d&#x27; -e &#x27;s/theme/string/&#x27; ./_config.yml</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">缓冲区输出(屏幕显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] string: theme: landscape theme <br>            [8] string: aaa <br>            [9] string: landscape <br>            [10]string: landscape <br>            [11]Theme: def <br>        </td>    </tr></table><p>【说明】删除第<code>2,3</code>行，然后将文件中的<code>theme</code>用<code>string</code>替换。</p><h2 id="3-9-i-选项-慎用"><a href="#3-9-i-选项-慎用" class="headerlink" title="3.9-i 选项(慎用)"></a><font size=3>3.9<code>-i 选项(慎用)</code></font></h2><ul><li>直接修改文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sed [ option ] [ action ] file_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：原文件被修改</span></span><br><span class="line">sed -i &#x27;s/landscape/next/&#x27; ./_config.yml</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><table>    <tr>        <td align="center">原文件</td>        <td align="center">修改后的文件(屏幕无显示)</td>    </tr>    <tr>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: landscape theme <br>            [8] theme: aaa <br>            [9] theme: landscape <br>            [10]theme: landscape <br>            [11]Theme: def <br>        </td>        <td align="left" style="vertical-align: text-top;">            [1] title: Hexo <br>            [2] author: John Doe <br>            [3] language: en <br>            [4] url: http://example.com <br>            [5] permalink: :year/:month/:day/:title/ <br>            [6] <br>            [7] theme: theme: next theme <br>            [8] theme: aaa <br>            [9] theme: next <br>            [10]theme: next <br>            [11]Theme: def <br>        </td>    </tr></table><p>【说明】可以看到，命令直接替换了所有的字符串。</p><h2 id="3-10-f-选项"><a href="#3-10-f-选项" class="headerlink" title="3.10-f 选项"></a><font size=3>3.10<code>-f 选项</code></font></h2><ul><li><code>sed</code>脚本</li></ul><p>&emsp;&emsp;<code>sed</code>脚本就是写在文件中的一列<code>sed</code>命令。脚本中，<strong>命令的末尾不能有任何多余的空格或文本</strong>。如果在一行中有多个命令，要用<strong>分号分隔</strong>。使用<code>sed</code>脚本时，<strong>不再用引号来确保<code>sed</code>命令不被<code>shell</code>解释</strong>。</p><p>&emsp;&emsp;执行脚本时，<code>sed</code>先将输入文件中第一行复制到模式缓冲区，然后对其执行脚本中所有的命令。每一行处理完毕后，<code>sed</code>再复制文件中下一行到模式缓冲区，对其执行脚本中所有命令。</p><p>【说明】文章到这里就暂时结束了，没有遇到过相应的使用方式，笔记先到这里，<code>sed</code>还有其他的用法，后续有用到再进行补充。</p>]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ubuntu】PPA介绍</title>
      <link href="post/4bc18fdf.html"/>
      <url>post/4bc18fdf.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;<code>Ubuntu</code>中的<code>PPA</code>源是什么？</p><span id="more"></span><p>【说明】所用环境<code>VMwareWorkstation16.0 + Ubuntu18.04.6</code></p><h1 id="一、存储库"><a href="#一、存储库" class="headerlink" title="一、存储库"></a><font size=3>一、存储库</font></h1><p>&emsp;&emsp;存储库(<code>repository</code>)是一组文件，其中包含了有关各种软件的<strong>版本信息</strong>和<strong>详细信息</strong>。例如每个 <code>Ubuntu</code>版本都有自己的<code>4</code>个官方存储库：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Ubuntu/image-20220109154547482.png" alt="image-20220109154547482" style="zoom: 50%;" /><table>    <tr>        <td align="center" width=100px>Main</td>        <td align="left">Canonical 支持的免费和开源软件 </td>    </tr>    <tr>        <td align="center" width=100px>Universe</td>        <td align="left">社区维护的免费和开源软件</td>    </tr>    <tr>        <td align="center" width=100px>Restricted</td>        <td align="left">设备的专有驱动</td>    </tr>    <tr>        <td align="center" width=100px>Multiverse</td>        <td align="left">有版权和合法性问题限制的软件</td>    </tr></table><p>&emsp;&emsp;其实简单说，存储库其实就是托管在任意服务器上的软件包的集合。按照我自己的理解，就是像<code>GitHub</code>一个仓库一样，里边放了软件的各种相关信息，可以通过该仓库的地址来找到这个软件的安装包，进行安装和管理。当系统知道了这个软件安装包的地址的时候就可以通过命令来进行安装和更新，这些地址都存在于<code>Ubuntu</code>系统下的<code>/etc/apt/sources.list</code>文件下，如下图所示。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Ubuntu/image-20220109155924182.png" alt="image-20220109155924182" style="zoom:50%;" /><p>&emsp;&emsp;当我们执行<code>sudo apt-get update</code>命令时，系统将使用 <code>APT 工具</code>来检查软件的存储库并将软件及其版本信息存储在缓存中。当我们使用 <code>sudo apt install package_name</code> 安装软件时，系统就会使用该信息从存储实际软件的 <code>URL</code>获取该软件包。如果存储库中没有关于所要安装的某个个软件包的信息，那么终端中将返回以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E: Unable to locate package</span><br></pre></td></tr></table></figure><h1 id="二、PPA"><a href="#二、PPA" class="headerlink" title="二、PPA"></a><font size=3>二、<code>PPA</code></font></h1><h2 id="1-PPA是什么？"><a href="#1-PPA是什么？" class="headerlink" title="1.PPA是什么？"></a><font size=3>1.<code>PPA</code>是什么？</font></h2><p>&emsp;&emsp;<code>PPA</code> 全称为 <code>Personal Package Archives（个人软件包档案）</code>，<strong>个人</strong>两个字也表明了这是开发人员自己个人的东西，可能并未得到分发的正式认可。</p><p>&emsp;&emsp;<code>PPA</code>其实是 <code>Ubuntu Launchpad </code>网站提供的一项服务，当然不仅限于<code>Launchpad</code>。它允许个人用户上传软件源代码，通过 <code>Launchpad </code>进行编译并发布为二进制软件包，作为<code> apt</code>新立得源供其他用户下载和更新。在<code>Launchpad</code>网站上的每一个用户和团队都可以拥有一个或多个<code>PPA</code>。 通常 <code>PPA </code>源里的软件是官方源里没有的，或者是最新版本的软件。相对于通过 <code>Deb</code> 包安装来说，使用 <code>PPA </code>的好处是，一旦软件有更新，通过相应的命令就可以直接升级到新版本。 </p><table>    <tr>        <td align="center">launchpad官网</td>        <td align="left"><a href="https://launchpad.net/">https://launchpad.net/</a></td>    </tr></table><p>【<code>PPA</code>和存储库关系】</p><ul><li><code>存储库</code>包含了包，是托管在任意服务器上的软件包的集合</li><li><code>PPA</code>是包，也是软件的集合，也可以理解为托管在<code>Launchpad</code>服务器上的软件包，不过<code>PPA</code>是一种特殊的存储库，就像一个正方形是一种特殊的矩形。用于通过<code>Launchpad</code>或类似应用程序上载要构建和发布为<code>APT存储库</code>的源包，主要是由非<code>Ubuntu</code>官方开发人员维护。</li></ul><h2 id="2-为什么要使用PPA？"><a href="#2-为什么要使用PPA？" class="headerlink" title="2.为什么要使用PPA？"></a><font size=3>2.为什么要使用<code>PPA</code>？</font></h2><p>&emsp;&emsp;<code>Ubuntu</code> 对系统中的软件进行管理，更重要的是控制我们在系统上获得哪个版本的软件。但开发人员发布了软件的新版本的时候，<code>Ubuntu</code> 不会立即提供该新版本的软件。需要一个步骤来检查此新版本的软件是否与系统兼容，从而可以确保系统的稳定性。</p><p>&emsp;&emsp;但这也意味着它需要经过几周或者更长时间才能在 <code>Ubuntu</code> 上可用，在某些情况下，这可能需要几个月的时间。不是每个人都想等待那么长时间才能获得他们最喜欢的软件的新版本。</p><p>&emsp;&emsp;类似地，假设有人开发了一款软件，并希望 <code>Ubuntu</code> 将该软件包含在官方软件仓库中。在 <code>Ubuntu</code> 做出决定并将其包含在官方存软件仓库之前，还需要几个月的时间。在 <code>beta</code> 测试阶段。即使官方软件仓库中提供了稳定版本的软件，软件开发人员也可能希望某些用户能够提前测试他们即将发布的新的版本。那他们是如何使用户对即将发布的新版本进行安装体验呢？</p><p>&emsp;&emsp;<code>PPA</code>的出现就很好的解决了这个问题。</p><h2 id="2-如何使用PPA？"><a href="#2-如何使用PPA？" class="headerlink" title="2.如何使用PPA？"></a><font size=3>2.如何使用<code>PPA</code>？</font></h2><ul><li>添加<code>PPA</code>源到系统</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &lt;PPA_information&gt; # PPA_information格式ppa:user/ppa-name</span><br></pre></td></tr></table></figure><p>【说明】</p><p>&emsp;&emsp;当我们使用<code>PPA</code>的时候，它不会更改原始的 <code>sources.list</code> 文件，它会在<code>/etc/apt/sources.d</code> 目录中创建两个文件，一个 <code>.list</code> 文件和一个带有 <code>.save</code> 后缀的备份文件。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Ubuntu/image-20220110104042873.png" alt="image-20220110104042873" style="zoom:50%;" /><p>这是一种安全措施，可以确保添加的 <code>PPA</code> 不会和原始的 <code>sources.list</code> 文件弄混，它还有助于移除 <code>PPA</code>。</p><ul><li>更新软件包列表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><ul><li>安装软件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install &lt;package_name_in_PPA&gt;</span><br></pre></td></tr></table></figure><ul><li>删除<code>PPA</code>源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository -r &lt;PPA_information&gt; # PPA_information格式ppa:user/ppa-name</span><br></pre></td></tr></table></figure><h2 id="3-PPA安装包管理"><a href="#3-PPA安装包管理" class="headerlink" title="3.PPA安装包管理"></a><font size=3>3.<code>PPA</code>安装包管理</font></h2><ul><li>安装<code>synaptic</code>包管理工具</li></ul><p>&emsp;&emsp;<code>Ubuntu</code> 软件中心无法移除 <code>PPA</code> 安装的软件包，我们必须使用具有更多高级功能的 <code>Synaptic</code> 包管理器，中文名叫新立得包管理器。我们可以从软件中心安装或者使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install synaptic</span><br></pre></td></tr></table></figure><ul><li>查看<code>PPA</code>包</li></ul><p>&emsp;&emsp;【启动软件】&rarr;【源自(<code>Origin</code>)】</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Ubuntu/image-20220110104833182.png" alt="image-20220110104833182" style="zoom:50%;" /><h2 id="3-使用PPA的实例说明"><a href="#3-使用PPA的实例说明" class="headerlink" title="3.使用PPA的实例说明"></a><font size=3>3.使用<code>PPA</code>的实例说明</font></h2><ul><li><code>Peek</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:peek-developers/stable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install peek</span><br></pre></td></tr></table></figure><ul><li><code>Vim</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:jonathonf/vim # ubuntu-tweak官方源</span><br><span class="line">sudo apt update       # 更新源</span><br><span class="line">sudo apt install vim  # 安装vim</span><br></pre></td></tr></table></figure><p>【参考文章】</p><ul><li><p><a href="https://linux.cn/article-10456-1.html"><code>Ubuntu PPA</code>使用指南</a></p></li><li><p><a href="https://www.sysgeek.cn/ubuntu-ppa/"><code>PPA </code>完全指南，如何在 <code>Ubuntu</code> 系统中使用 <code>PPA</code></a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Shell】LV2-03-Shell脚本编程</title>
      <link href="post/e0f393dc.html"/>
      <url>post/e0f393dc.html</url>
      
        <content type="html"><![CDATA[<style>/* 全局表格样式 */    table tr td{        border:2px solid #000000;        font-size: 15px;        height: 25px;    }</style><p>摘要：</p><p>&emsp;&emsp;主要介绍<code>Shell</code>基本语法。</p><span id="more"></span><h1 id="一、第一个shell脚本"><a href="#一、第一个shell脚本" class="headerlink" title="一、第一个shell脚本"></a><font size=3>一、第一个<code>shell</code>脚本</font></h1><h2 id="1-什么是Shell"><a href="#1-什么是Shell" class="headerlink" title="1.什么是Shell?"></a><font size=3>1.什么是<code>Shell</code>?</font></h2><p>&emsp;&emsp;<code>Shell</code>是一个用 <code>C 语言</code>编写的<strong>程序</strong>，它是用户使用 <code>Linux</code> 的桥梁。既是一种<strong>命令语言</strong>，又是一种<strong>程序设计语言</strong>。<code>Shell</code> 是指一种<strong>应用程序</strong>，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV2-03-ShellScript/image-20220208183011203.png" style="zoom:70%;" /><h2 id="2-什么是Shell脚本"><a href="#2-什么是Shell脚本" class="headerlink" title="2.什么是Shell脚本?"></a><font size=3>2.什么是<code>Shell</code>脚本?</font></h2><p>&emsp;&emsp;<code>shell</code>脚本语言是解释型语言，本质是**<code>shell</code>命令的有序集合<strong>，<code>Shell</code>脚本文件的后缀名称是</strong><code>.sh</code>**。</p><h2 id="3-Hello-World"><a href="#3-Hello-World" class="headerlink" title="3.Hello World!"></a><font size=3>3.<code>Hello World!</code></font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这段代码是一个最简单的<code>Shell</code>脚本程序，就像<code>C语言</code>学习室的第一个程序一样。</p><ul><li><strong><code>#!</code></strong> 是一个<strong>约定的标记</strong>，它<strong>告诉系统这个脚本需要什么解释器来执行</strong>，即使用哪一种 <code>Shell</code>。</li><li><code>echo</code>命令用于向命令行窗口输出文本。</li></ul><h2 id="4-如何运行Shell脚本？"><a href="#4-如何运行Shell脚本？" class="headerlink" title="4.如何运行Shell脚本？"></a><font size=3>4.如何运行<code>Shell</code>脚本？</font></h2><ul><li>进入<code>Shell</code>脚本所在目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;file_path&gt;</span><br></pre></td></tr></table></figure><ul><li>赋予<code>shell</code>文件执行权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod permissions file_name.sh</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>permissions</code>为要赋予文件的权限（常用777或者740，保证文件具有可执行权限即可）。</p><ul><li>执行<code>Shell</code>脚本文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./file_name.sh</span><br></pre></td></tr></table></figure><h1 id="二、Shell变量"><a href="#二、Shell变量" class="headerlink" title="二、Shell变量"></a><font size=3>二、<code>Shell</code>变量</font></h1><h2 id="1-变量的命名"><a href="#1-变量的命名" class="headerlink" title="1.变量的命名"></a><font size=3>1.变量的命名</font></h2><p>&emsp;&emsp;<code>shell</code>允许用户建立变量存储数据，但<strong>不支持数据类型（整型、字符、浮点型）</strong>，将<strong>任何赋给变量的值都解释为一串字符</strong>。变量定义格式如下（支持三种形式）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Variable=value   # 第一种</span><br><span class="line">Variable=&#x27;value&#x27; # 第二种</span><br><span class="line">Variable=&quot;value&quot; # 第三种</span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）<strong>等号两边不允许有空格</strong>。</p><p>&emsp;&emsp;（2）命名只能使用<strong>英文字母</strong>，<strong>数字</strong>和<strong>下划线</strong>，<strong>首个字符不能以数字开头</strong>，且中间不能有空格。</p><p>&emsp;&emsp;（3）不能使用标点符号，而且不能使用<code>bash</code>里的关键字（可用help命令查看保留关键字）。</p><p>&emsp;&emsp;（4）第二种与第三种的区别：</p><p>&emsp;&emsp;以单引号<code>&#39; &#39;</code>包围变量的值时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们<strong>原样输出</strong>。这种方式比较适合定义显示纯字符串的情况，即不希望解析变量、命令等的情况。</p><p>&emsp;&emsp;以双引号<code>&quot; &quot;</code>包围变量的值时，输出时会先<strong>解析里面的变量和命令</strong>，而不是把双引号中的变量名和命令原样输出。这种方式比较适合字符串中附带有变量和命令并且想将其解析后再输出的变量定义。</p><h2 id="2-变量的赋值"><a href="#2-变量的赋值" class="headerlink" title="2.变量的赋值"></a><font size=3>2.变量的赋值</font></h2><p>&emsp;&emsp;在 <code>Bash shell</code> 中，<font color=red>每一个变量的值都是字符串，无论给变量赋值时有没有使用引号，值都会以字符串的形式存储。</font>这就意味着，<code>Bash shell</code> 在默认情况下不会区分变量类型，即使将整数和小数赋值给变量，它们也会被视为字符串。</p><ul><li>直接赋值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Variable=value</span><br></pre></td></tr></table></figure><ul><li>用语句赋值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Variable=`command`</span><br><span class="line">Variable=$(command)</span><br></pre></td></tr></table></figure><p style="color:red;">&emsp;&emsp;用语句进行赋值时，语句一定要写在 `` 符号里边，该符号为英文状态下 Esc 按键下边的哪个按键。<br>&emsp;&emsp;或者也可以使用下边的 $() 的方式，这种方式看起来要更直观一些。</p>## <font size=3>3.变量的使用</font><p>&emsp;&emsp;使用一个定义过的变量，只要在变量名前面加美元符号（<code>$</code>）即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;Variable&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">Variable</span></span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）变量名外面的<strong>花括号是可选的</strong>，加不加都行，加花括号是为了帮助解释器识别变量的边界。推荐给所有变量加上花括号。</p><p>&emsp;&emsp;（2）定义变量和给变量赋值的时候都不需要加<code>$</code>，使用的时候才需要加上。</p><h2 id="4-变量的类型"><a href="#4-变量的类型" class="headerlink" title="4.变量的类型"></a><font size=3>4.变量的类型</font></h2><ul><li>局部变量</li></ul><p>&emsp;&emsp;在脚本或命令中定义，仅在当前<code>shell</code>实例中有效，其他shell启动的程序不能访问局部变量。</p><ul><li>环境变量</li></ul><p>&emsp;&emsp;所有的程序，包括<code>shell</code>启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候<code>shell</code>脚本也可以定义环境变量。</p><ul><li><code>shell</code>变量</li></ul><p>&emsp;&emsp;<code>shell</code>变量是由<code>shell</code>程序设置的特殊变量。<code>shell</code>变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了<code>shell</code>的正常运行。</p><h2 id="5-Bourne-Shell中的常用的四种变量"><a href="#5-Bourne-Shell中的常用的四种变量" class="headerlink" title="5.Bourne Shell中的常用的四种变量"></a><font size=3>5.<code>Bourne Shell</code>中的常用的四种变量</font></h2><h3 id="5-1用户自定义变量"><a href="#5-1用户自定义变量" class="headerlink" title="5.1用户自定义变量 "></a><font size=3>5.1用户自定义变量 </font></h3><p>&emsp;&emsp;就是用户自己定义的变量，在<code>shell</code>编程中，通常使用全大写，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COUNT=1</span><br></pre></td></tr></table></figure><h3 id="5-2位置变量"><a href="#5-2位置变量" class="headerlink" title="5.2位置变量 "></a><font size=3>5.2位置变量 </font></h3><p>&emsp;&emsp;在 <code>Linux</code> 的命令行中，当一条命令或脚本执行时，后面可以跟多个参数，可以使用位置参数变量来表示这些参数。</p><table>    <tr>        <td align="center" width=100px>$n</td>        <td align="left">n 为数字，$0 代表命令本身，$1-$9 代表第 1-9 个参数，10 以上的参数需要用大括号{}包含， 例如${10}，${15}</td>    </tr>    <tr>        <td align="center" width=100px>$*</td>        <td align="left">代表命令行中所有的参数，把所有的参数看成一个整体</td>    </tr>    <tr>        <td align="center" width=100px>$@</td>        <td align="left">代表命令行中所有的参数，不过 $@ 把每个参数区别对待</td>    </tr>    <tr>        <td align="center" width=100px>$#</td>        <td align="left">代表命令行中所有参数的个数</td>    </tr></table><p>【注意】</p><p>（1）<code>$n</code>中，<code>n</code>大于等于<code>10</code>时，一定要加上<code>&#123;&#125;</code>。</p><p>（2）<code>$*</code>与<code>$@</code>：</p><p>&emsp;&emsp;当 <code>$*</code>和 <code>$@</code> 不被双引号<code>&quot; &quot;</code>包含时，它们之间<strong>没有任何区别</strong>，都是将接收到的每个参数看做一份数据，彼此之间<strong>以空格来分隔</strong>，两者都以<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; </code>的形式输出所有参数。</p><p>&emsp;&emsp;当 <code>$*</code>和 <code>$@</code> 被双引号<code>&quot; &quot;</code>包含时，<code>&quot;$*&quot;</code>会将<strong>所有的参数从整体上看做一份数据</strong>，而不是把每个参数都看做一份数据，以<code>&quot;$1 $2 … $n&quot;</code>的形式输出所有参数；<code>&quot;$@&quot;</code>仍然将<strong>每个参数都看作一份数据</strong>，彼此之间是独立的，以<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; </code>的形式输出所有参数。</p><table>    <tr>        <td align="center" rowspan="2">变量</td>        <td align="center" colspan="2">输出形式</td>    </tr>    <tr>        <td align="center">被 " " 包含</td>        <td align="center">不被 " " 包含</td>    </tr>    <tr>        <td align="center">$*</td>        <td align="center">"$1 $2 … $n"</td>        <td align="center">"$1" "$2" … "$n"</td>    </tr>    <tr>        <td align="center">$@</td>        <td align="center">"$1" "$2" … "$n"</td>        <td align="center">"$1" "$2" … "$n"</td>    </tr></table><p>例如：某命令传递了 <code>5</code> 个参数，那么对于<code>&quot;$*&quot;</code>来说，这<code> 5</code> 个参数会合并到一起形成<code>1</code>个数据，这一个数据包含了<code>5</code>个参数，它们之间是<strong>无法分割</strong>的；而对于<code>&quot;$@&quot;</code>来说，这 <code>5</code> 个参数是<strong>相互独立</strong>的，它们是 <code>5</code> 个数据。</p><h3 id="5-3预定义变量"><a href="#5-3预定义变量" class="headerlink" title="5.3预定义变量 "></a><font size=3>5.3预定义变量 </font></h3><p>&emsp;&emsp;预定义变量是在<code>Shell</code>一开始时就定义的变量，这一点和默认环境变量有些类似。不同的是，<strong>预定义变量不能重新定义</strong>，用户只能根据 <code>Shell</code> 的定义来使用这些变量。严格来说，位置参数变量也是预定义变量的一种，只是位置参数变量的作用比较统一，所以一般把位置参数变量单独划分为一类变量。</p><table>    <tr>        <td align="center" width=100px>$?</td>        <td align="left">最后一次执行的命令的返回状态。如果这个变量的值为 0，则证明上一条命令正确执行；如果这个变量的值为非0 (具体是哪个数由命令自己来决定)，则证明上一条命令执行错误。</td>    </tr>    <tr>        <td align="center" width=100px>$$</td>        <td align="left">代表当前进程的进程号(PID)。</td>    </tr>    <tr>        <td align="center" width=100px>$!</td>        <td align="left">代表后台运行的最后一个进程的进程号(PID)。</td>    </tr></table><h3 id="5-4环境变量"><a href="#5-4环境变量" class="headerlink" title="5.4环境变量"></a><font size=3>5.4环境变量</font></h3><p>&emsp;&emsp;环境变量也称为全局变量，可以在创建它们的<code>Shell</code>及其派生出来的任意子进程<code>Shell</code>中使用，环境变量又可以分为<strong>自定义环境变量</strong>和**<code>bash</code>内置的环境变量**。</p><p>&emsp;&emsp;环境变量可以在命令行中设置和创建，用户退出命令行时这些变量值就会丢失，那如何永久保存环境变量呢？可以在用户家目录下的<code>.bash_profile(或者是.profile)</code>或<code>.bashrc(非用户登录模式特有，如：SSH)</code>文件中，这两个文件设置后是针对特定用户的，也可以在<code>/etc/profile</code>文件中定义环境变量，该文件设置后将会影响所有的用户，就是说在这三个文件中进行定义的环境变量在用户登录后就会进行初始化。</p><p>例如：下图为<code>~/.profile</code>文件内容。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV2-03-ShellScript/image-20220209090903335.png" style="zoom:50%;" /><ul><li>常用环境变量</li></ul><table>    <tr>        <td align="center">HOME</td>        <td align="left">/etc/passwd文件中列出的用户主目录 </td>    </tr>    <tr>        <td align="center">PATH</td>        <td align="left">系统默认的可执行文件搜索路径</td>    </tr>    <tr>        <td align="center">HISTSIZE</td>        <td align="left">保留历史命令的数目上限</td>    </tr>    <tr>        <td align="center">OSTYPE</td>        <td align="left">系统类型</td>    </tr>    <tr>        <td align="center">PWD</td>        <td align="left">当前工作目录</td>    </tr>    <tr>        <td align="center">TERM</td>        <td align="left">终端类型，常用的有vt100,ansi,vt200,xterm等 </td>    </tr>    <tr>        <td align="center">PS1, PS2</td>        <td align="left">默认提示符($)及换行提示符(>)  </td>    </tr>    <tr>        <td align="center">IFS</td>        <td align="left">Internal Field Separator, 默认为空格，tab及换行符</td>    </tr></table><h2 id="6-字符串"><a href="#6-字符串" class="headerlink" title="6.字符串 "></a><font size=3>6.字符串 </font></h2><p>&emsp;&emsp;在<code>Shell</code>中，字符串可以用单引号，也可以用双引号，也可以不用引号。</p><ul><li>单引号</li></ul><p>&emsp;&emsp;单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的。</p><p>&emsp;&emsp;单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=&#x27;string&#x27;</span><br></pre></td></tr></table></figure><ul><li>双引号</li></ul><p>&emsp;&emsp;双引号里可以有变量，也可以出现转义字符。</p><h3 id="6-1拼接字符串"><a href="#6-1拼接字符串" class="headerlink" title="6.1拼接字符串"></a><font size=3>6.1拼接字符串</font></h3><ul><li>使用单引号拼接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span> </span><br><span class="line">str1=&#x27;World&#x27;</span><br><span class="line"></span><br><span class="line">str2=&#x27;Hello,&#x27;$str1&#x27; !&#x27;</span><br><span class="line">str3=&#x27;Hello, $str1 !&#x27;</span><br><span class="line">echo $str2</span><br><span class="line">echo $str3</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello,World !</span><br><span class="line">Hello, $str1 !</span><br></pre></td></tr></table></figure><ul><li>使用双引号拼接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span> </span><br><span class="line">str1=&quot;World&quot;</span><br><span class="line"></span><br><span class="line">str2=&quot;Hello, &quot;$str1&quot; !&quot;</span><br><span class="line">str3=&quot;Hello, $str1 !&quot;</span><br><span class="line">echo $str2</span><br><span class="line">echo $str3</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, World !</span><br><span class="line">Hello, World !</span><br></pre></td></tr></table></figure><h3 id="6-2获取字符串长度"><a href="#6-2获取字符串长度" class="headerlink" title="6.2获取字符串长度"></a><font size=3>6.2获取字符串长度</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#&lt;string&gt;&#125;</span></span></span><br></pre></td></tr></table></figure><p><code>string</code>为要获取长度的目标字符串变量。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span> </span><br><span class="line">str1=&#x27;World&#x27;</span><br><span class="line">str2=&quot;World&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;str1&#x27;s length=$&#123;#str1&#125;&quot;</span><br><span class="line">echo &quot;str1&#x27;s length=$&#123;#str2&#125;&quot;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1&#x27;s length=5</span><br><span class="line">str1&#x27;s length=5</span><br></pre></td></tr></table></figure><h3 id="6-3提取字符串"><a href="#6-3提取字符串" class="headerlink" title="6.3提取字符串"></a><font size=3>6.3提取字符串</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;&lt;string&gt;:n:len&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>string</code>为要获取长度的目标字符串变量。</li><li><code>n</code>为起始字符位置，<code>len</code>为截取字符串的长度，提取出的字符串为<code>n</code>位置处字符极其之后的<code>len-1</code>个字符。</li></ul><p>【注意】字符串中首个字符的索引为<code>0</code>。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span> </span><br><span class="line">str1=&#x27;Hello, World&#x27;</span><br><span class="line">str2=&quot;Hello, World&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$&#123;str1:2:3&#125;&quot;</span><br><span class="line">echo &quot;$&#123;str2:2:7&#125;&quot;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">llo</span><br><span class="line">llo, Wo</span><br></pre></td></tr></table></figure><h3 id="6-4查找字符串中字符"><a href="#6-4查找字符串中字符" class="headerlink" title="6.4查找字符串中字符"></a><font size=3>6.4查找字符串中字符</font></h3><p>可以通过<code>expr</code>实现字符串中特定字符的查找，这种查找方式会查找字符串中首次出现该字符的位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Variable=`expr index &quot;$&#123;&lt;string&gt;&#125;&quot; &lt;char&gt;` </span><br></pre></td></tr></table></figure><ul><li><code>string</code>为要查找的目标字符串变量。</li><li><code>char</code>为要查找的字符。</li></ul><p>【注意】</p><p>&emsp;&emsp;（1）在查找过程中，字符串中首个字符的索引为`1``。</p><p>&emsp;&emsp;（2）以上脚本中 <strong>`</strong> 是反引号，而不是单引号 **’**。</p><p>&emsp;&emsp;（3）<code>char</code>可以是多个字符，例如对于<code>ac</code>，<code>a</code>，<code>c</code>两个字符哪个先出现，就会停止查找，返回首先出现的字符在目标字符串中的首次出现的位置。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span> </span><br><span class="line">str1=&#x27;Hello, World&#x27;</span><br><span class="line">str2=&quot;Hello, World&quot;</span><br><span class="line"></span><br><span class="line">echo `expr index &quot;$str1&quot; &#x27; &#x27;`</span><br><span class="line">echo `expr index &quot;$str2&quot; l`</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="7-数组"><a href="#7-数组" class="headerlink" title="7.数组 "></a><font size=3>7.数组 </font></h2><p>&emsp;&emsp;<code>bash</code>支持一维数组（不支持多维数组），并且没有限定数组的大小。数组元素的下标由<code>0</code>开始。获取数组中的元素要用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p><h3 id="7-1定义一个数组"><a href="#7-1定义一个数组" class="headerlink" title="7.1定义一个数组 "></a><font size=3>7.1定义一个数组 </font></h3><p>&emsp;&emsp;在 <code>Shell</code> 中，用<strong>括号</strong>来表示数组，数组元素用<code>&lt;space&gt;</code>符号分割开。</p><ul><li>直接定义</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值1 值2 ... 值n)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version=(v1 v2 v3)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">version=(v1 </span><br><span class="line">         v2 </span><br><span class="line">         v3)</span><br></pre></td></tr></table></figure><ul><li>单独定义各个分量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数组名[0]=值0</span><br><span class="line">数组名[1]=值1</span><br><span class="line">数组名[n]=值n</span><br></pre></td></tr></table></figure><p>【注意】可以不使用连续的下标，而且下标的范围没有限制。</p><h3 id="7-2引用数组元素"><a href="#7-2引用数组元素" class="headerlink" title="7.2引用数组元素 "></a><font size=3>7.2引用数组元素 </font></h3><ul><li>获取数组中某个元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;arrayName[index]&#125;</span></span><br></pre></td></tr></table></figure><p>【注意】<code>index</code>从<code>0</code>开始</p><ul><li>获取数组中所有元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;arrayName[@]&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;arrayName[*]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7-3获取数组长度"><a href="#7-3获取数组长度" class="headerlink" title="7.3获取数组长度 "></a><font size=3>7.3获取数组长度 </font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">length=$&#123;#arrayName[@]&#125;  # 取得数组元素的个数</span><br><span class="line">length=$&#123;#arrayName[*]&#125;  # 取得数组元素的个数</span><br><span class="line">lengthn=$&#123;#arrayName[n]&#125; # 取得数组单个元素的长度</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span> </span><br><span class="line">a=(v1.1 v2 v3.3 )</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取得数组元素的个数</span></span><br><span class="line">length=$&#123;#a[@]&#125;</span><br><span class="line">echo &quot;a&#x27;s length=$&#123;length&#125;&quot;</span><br><span class="line">length=$&#123;#a[*]&#125;</span><br><span class="line">echo &quot;a&#x27;s length=$&#123;length&#125;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取得数组单个元素的长度</span></span><br><span class="line">lengthn=$&#123;#a[0]&#125;</span><br><span class="line">echo &quot;a[0]&#x27;s length=$&#123;lengthn&#125;&quot;</span><br><span class="line">lengthn=$&#123;#a[1]&#125;</span><br><span class="line">echo &quot;a[1]&#x27;s length=$&#123;lengthn&#125;&quot;</span><br><span class="line">lengthn=$&#123;#a[n]&#125;</span><br><span class="line">echo &quot;a[n]&#x27;s length=$&#123;lengthn&#125;&quot;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a&#x27;s length=3</span><br><span class="line">a&#x27;s length=3</span><br><span class="line">a[0]&#x27;s length=4</span><br><span class="line">a[1]&#x27;s length=2</span><br><span class="line">a[n]&#x27;s length=4</span><br></pre></td></tr></table></figure><h1 id="三、Shell替换"><a href="#三、Shell替换" class="headerlink" title="三、Shell替换 "></a><font size=3>三、<code>Shell</code>替换 </font></h1><p>&emsp;&emsp;如果表达式中包含特殊字符，<code>Shell</code> 将会进行替换。</p><h2 id="1-变量替换"><a href="#1-变量替换" class="headerlink" title="1.变量替换"></a><font size=3>1.变量替换</font></h2><p>&emsp;&emsp;变量替换可以根据变量的状态（是否为空、是否定义等）来改变它的值。</p><table>    <tr>        <td align="left" width=190px>${Variable}</td>        <td align="left">变量本来的值</td>    </tr>    <tr>        <td align="left" width=190px>${Variable:-word}</td>        <td align="left">如果变量 Variable 为空或已被删除(unset)，那么返回 word，但不改变 Variable 的值。</td>    </tr>    <tr>        <td align="left" width=190px>${Variable:=word}</td>        <td align="left">如果变量 Variable 为空或已被删除(unset)，那么返回 word，并将 Variable 的值设置为 word。</td>    </tr>    <tr>        <td align="left" width=190px>${Variable:?message}</td>        <td align="left">如果变量 Variable 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 Variable 是否可以被正常赋值。<br>若此替换出现在Shell脚本中，那么脚本将停止运行。</td>    </tr>    <tr>        <td align="left" width=190px>${Variable:+word}</td>        <td align="left">如果变量 Variable 被定义，那么返回 word，但不改变 Variable 的值。</td>    </tr></table><h2 id="2-命令替换"><a href="#2-命令替换" class="headerlink" title="2.命令替换"></a><font size=3>2.命令替换</font></h2><p>&emsp;&emsp;命令替换是指<code>Shell</code>先执行命令，将输出结果暂时保存，在适当的地方输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`command` # 注意是反引号 ` ，按键位于 Esc下方</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">DATE=`date`</span><br><span class="line">echo &quot;Date is $DATE&quot;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date is 2022年 02月 09日 星期三 18:27:51 CST</span><br></pre></td></tr></table></figure><h1 id="四、Shell运算符"><a href="#四、Shell运算符" class="headerlink" title="四、Shell运算符"></a><font size=3>四、<code>Shell</code>运算符</font></h1><p>&emsp;&emsp;<code>Shell</code> 支持很多运算符，包括<strong>算数运算符</strong>、<strong>关系运算符</strong>、<strong>布尔运算符</strong>、<strong>字符串运算符</strong>和<strong>文件测试运算符</strong>。原生<code>bash</code>不支持简单的数学运算，但是可以通过其他命令来实现，例如 <code>awk</code> 和 <code>expr</code>，<code>expr</code> 最常用,它是一款表达式计算工具，使用它能完成表达式的求值操作。</p><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a><font size=3>1.算术运算符</font></h2><table>    <tr>        <td align="center" width=100px>运算符</td>        <td align="center">说明</td>        <td align="center">实例(设变量a=6, b=3)</td>    </tr>    <tr>        <td align="center" width=100px>+</td>        <td align="center">加法</td>        <td align="left">`expr $a + $b` 结果为 9</td>    </tr>    <tr>        <td align="center" width=100px>-</td>        <td align="center">减法</td>        <td align="left">`expr $a - $b` 结果为 3</td>    </tr>    <tr>        <td align="center" width=100px>*</td>        <td align="center">乘法，注意要加 \</td>        <td align="left">`expr $a \* $b` 结果为 18</td>    </tr>    <tr>        <td align="center" width=100px>/</td>        <td align="center">除法</td>        <td align="left">`expr $a / $b` 结果为 2</td>    </tr>    <tr>        <td align="center" width=100px>%</td>        <td align="center">取余</td>        <td align="left">`expr $b % $a` 结果为 0</td>    </tr>    <tr>        <td align="center" width=100px>=</td>        <td align="center">赋值</td>        <td align="left">a=$b 把变量 b 的值赋给 a</td>    </tr>    <tr>        <td align="center" width=100px>==</td>        <td align="center">相等，比较两个数字，相同则返回 true</td>        <td align="left">[ $a == $b ] 返回 false</td>    </tr>    <tr>        <td align="center" width=100px>!=</td>        <td align="center">不相等，比较两个数字，不相同则返回 true</td>        <td align="left">[ $a != $b ] 返回 true</td>    </tr></table><p>【注意】</p><p>&emsp;&emsp;（1）表达式和运算符之间要有空格，例如 <code>$a+$b</code> 是不对的，必须写成 <code>$a + $b</code>。</p><p>&emsp;&emsp;（2）使用<code>expr</code>时，完整的表达式要被  **` **  包含。</p><p>&emsp;&emsp;（3）赋值操作时，<code>=</code>两端不能有空格。</p><p>&emsp;&emsp;（4）条件表达式要放在方括号之间，并且要有空格，例如: <strong><code>[$a==$b]</code></strong> 是错误的，必须写成 **<code>[ $a == $b ]</code>**。</p><p>&emsp;&emsp;（5）乘号(<code>*</code>)前边必须加反斜杠(<code>\</code>)才能实现乘法运算。</p><h2 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a><font size=3>2.关系运算符</font></h2><p>&emsp;&emsp;关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><table>    <tr>        <td align="center" width=100px>运算符</td>        <td align="center" colspan="2" width=200px>说明</td>        <td align="center">实例(设变量a=6, b=3)</td>    </tr>    <tr>        <td align="center" width=100px>-eq</td>        <td align="center" width=100px>相等</td>        <td align="center" width=100px>==</td>        <td align="left">[ $a -eq $b ] 返回 false</td>    </tr>    <tr>        <td align="center" width=100px>-ne</td>        <td align="center" width=100px>不相等</td>        <td align="center" width=100px>!=</td>        <td align="left">[ $a -ne $b ] 返回 true</td>    </tr>    <tr>        <td align="center" width=100px>-gt</td>        <td align="center" width=100px>大于</td>        <td align="center" width=100px>></td>        <td align="left">[ $a -gt $b ] 返回 true</td>    </tr>    <tr>        <td align="center" width=100px>-lt</td>        <td align="center" width=100px>小于</td>        <td align="center" width=100px><</td>        <td align="left">[ $a -lt $b ] 返回 false</td>    </tr>    <tr>        <td align="center" width=100px>-ge</td>        <td align="center" width=100px>大于等于</td>        <td align="center" width=100px>>=</td>        <td align="left">[ $a -ge $b ] 返回 true</td>    </tr>    <tr>        <td align="center" width=100px>-le</td>        <td align="center" width=100px>小于等于</td>        <td align="center" width=100px><=</td>        <td align="left">[ $a -le $b ] 返回 false</td>    </tr></table><h2 id="3-布尔运算符"><a href="#3-布尔运算符" class="headerlink" title="3.布尔运算符"></a><font size=3>3.布尔运算符</font></h2><table>    <tr>        <td align="center" width=100px>运算符</td>        <td align="center" colspan="2" width=200px>说明</td>        <td align="center">实例(设变量a=6, b=3)</td>    </tr>    <tr>        <td align="center" width=100px>!</td>        <td align="center" width=100px>非</td>        <td align="center" width=100px>!</td>        <td align="left">[ ! false ] 返回 true</td>    </tr>    <tr>        <td align="center" width=100px>-o</td>        <td align="center" width=100px>或</td>        <td align="center" width=100px>|</td>        <td align="left">[ $a -lt 7 -o $b -gt 10 ] 返回 true</td>    </tr>    <tr>        <td align="center" width=100px>-a</td>        <td align="center" width=100px>与</td>        <td align="center" width=100px>&</td>        <td align="left">[ $a -lt 7 -o $b -gt 10 ] 返回 false</td>    </tr></table><h2 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a><font size=3>4.逻辑运算符</font></h2><table>    <tr>        <td align="center" width=100px>运算符</td>        <td align="center" width=150px>说明</td>        <td align="center">实例(设变量a=6, b=3)</td>    </tr>    <tr>        <td align="center" width=100px>&&</td>        <td align="center" width=150px>逻辑的 and </td>        <td align="left">[[ $a -lt 10 && $b -gt 10 ]] 返回 false</td>    </tr>    <tr>        <td align="center" width=100px>||</td>        <td align="center" width=150px>逻辑的 or </td>        <td align="left">[[ $a -lt 10 || $b -gt 10 ]] 返回 true</td>    </tr></table>## <font size=3>5.字符串运算符</font><table>    <tr>        <td align="center" width=100px>运算符</td>        <td align="center">说明</td>        <td align="center">实例(设变量a="abc", b="abd")</td>    </tr>    <tr>        <td align="center" width=100px>=</td>        <td align="left">检测两个字符串是否相等，相等返回 true</td>        <td align="left">[ $a = $b ] 返回 false</td>    </tr>    <tr>        <td align="center" width=100px>!=</td>        <td align="left">两个字符串是否不相等，不相等返回 true</td>        <td align="left">[ $a != $b ] 返回 true</td>    </tr>    <tr>        <td align="center" width=100px>-z</td>        <td align="left">字符串长度是否为0，为0返回 true</td>        <td align="left">[ -z $a ] 返回 false</td>    </tr>    <tr>        <td align="center" width=100px>-n</td>        <td align="left" >字符串长度是否不为 0，不为 0 返回 true</td>        <td align="left">[ -n $a ] 返回 true</td>    </tr>    <tr>        <td align="center" width=100px>$</td>        <td align="left">字符串是否为空，不为空返回 true</td>        <td align="left">[ $a ] 返回 true</td>    </tr></table><h2 id="6-文件测试运算符"><a href="#6-文件测试运算符" class="headerlink" title="6.文件测试运算符"></a><font size=3>6.文件测试运算符</font></h2><p>&emsp;&emsp;文件测试运算符用于检测 <code>Unix</code> 文件的各种属性</p><table>    <tr>        <td align="center" width=120px>运算符</td>        <td align="center">说明</td>    </tr>    <tr>        <td align="center" width=120px>-b file</td>        <td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-c file</td>        <td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-d file</td>        <td align="left">检测文件是否是目录，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-f file</td>        <td align="left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-g file</td>        <td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-k file</td>        <td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-p file</td>        <td align="left">检测文件是否是有名管道，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-u file</td>        <td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-r file</td>        <td align="left">检测文件是否可读，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-w file</td>        <td align="left">检测文件是否可写，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-x file</td>        <td align="left">检测文件是否可执行，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-s file</td>        <td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-e file</td>        <td align="left">检测文件（包括目录）是否存在，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>-L file</td>        <td align="left">检测测文件是否为符号链接，如果是，则返回 true。</td>    </tr>    <tr>        <td align="center" width=120px>file1 -nt file2</td>        <td align="left">测试文件 file1 是否比文件 file2 更新。</td>    </tr>    <tr>        <td align="center" width=120px>file1 -ot file2</td>        <td align="left">测试文件 file1 是否比文件 file2 更旧。</td>    </tr></table><h1 id="五、Shell语句"><a href="#五、Shell语句" class="headerlink" title="五、Shell语句"></a><font size=3>五、<code>Shell</code>语句</font></h1><p>&emsp;&emsp;<code>shell</code> 脚本程序由零或多条<code>shell</code>语句构成。 <code>shell</code>语句包括三类：<strong>说明性语句</strong>、<strong>功能性语句</strong>和<strong>结构性语句</strong>。</p><h2 id="1-说明性语句"><a href="#1-说明性语句" class="headerlink" title="1.说明性语句"></a><font size=3>1.说明性语句</font></h2><p>&emsp;&emsp;其实就是注释，以<code>#</code>号开始到该行结束，不被解释执行。<code>sh</code>里没有多行注释，只能每一行加一个#号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">--------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这是一个注释</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> author：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> file name：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--------------------------------------------</span></span><br></pre></td></tr></table></figure><h2 id="2-功能性语句"><a href="#2-功能性语句" class="headerlink" title="2.功能性语句"></a><font size=3>2.功能性语句</font></h2><h3 id="2-1只读变量readonly"><a href="#2-1只读变量readonly" class="headerlink" title="2.1只读变量readonly"></a><font size=3>2.1只读变量<code>readonly</code></font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readonly Variable # Variable为变量名称</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;使用 <code>readonly</code> 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><h3 id="2-2删除变量unset"><a href="#2-2删除变量unset" class="headerlink" title="2.2删除变量unset"></a><font size=3>2.2删除变量<code>unset</code></font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset Variable # Variable为变量名称</span><br></pre></td></tr></table></figure><h3 id="2-3read"><a href="#2-3read" class="headerlink" title="2.3read"></a><font size=3>2.3<code>read</code></font></h3><p>&emsp;&emsp;<code>read</code>用来从标准输入中读取数据并赋值给变量。如果没有进行重定向，默认就是从键盘读取用户输入的数据；如果进行了重定向，那么可以从文件中读取数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read [option] [Variables]</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=80px rowspan="10">[option]</td>        <td align="left" width=120px>-a array</td>        <td align="left">把读取的数据赋值给数组 array，从下标 0 开始</td>    </tr>    <tr>        <td align="left" width=120px>-d delimiter</td>        <td align="left">用字符串 delimiter 指定读取结束的位置，而不是一个换行符（默认结束符号为换行符，读取到的数据不包括 delimiter）。</td>    </tr>    <tr>        <td align="left" width=120px>-n num</td>        <td align="left">读取 num 个字符就结束，而不是整行字符。如果没有读满 num 个字符就按下回车或遇到换行符，则也会结束读取。</td>    </tr>    <tr>        <td align="left" width=120px>-N num</td>        <td align="left">严格要求读满 num 个字符才自动结束读取，即使中途按下了回车或遇到了换行符也不结束，其中换行符或回车算一个字符。</td>    </tr>    <tr>        <td align="left" width=120px>-p prompt</td>        <td align="left">显示提示信息，提示内容为 prompt。默认不支持"\n"换行，要换行需要特殊处理(例如：通过 $'string \n' 就可以实现换行输入)</td>    </tr>    <tr>        <td align="left" width=120px>-t timeout</td>        <td align="left">设置超时时间，单位为秒。如果用户没有在指定时间内输入完成，那么 read 将会返回一个非 0 的退出状态，表示读取失败，即使已经输入了一部分。</td>    </tr>    <tr>        <td align="left" width=120px>-u fd</td>        <td align="left">使用文件描述符 fd 作为输入源，而不是标准输入，类似于重定向。</td>    </tr>    <tr>        <td align="left" width=120px>-e</td>        <td align="left">在输入的时候可以使用命令补全功能(Tab键)。</td>    </tr>    <tr>        <td align="left" width=80px>-r</td>        <td align="left">原样读取（Raw mode），不把反斜杠字符解释为转义字符，这意味着"\"会变成文本的一部分。</td>    </tr>    <tr>        <td align="left" width=120px>-s</td>        <td align="left">静默模式（Silent mode），不会在屏幕上显示输入的字符。可用于输入密码和其它确认信息的时候。</td>    </tr>    <tr>        <td align="left" width=120px>[Variables]</td>        <td align="left" colspan="2">变量名称</td>    </tr></table><p>【注意】</p><p>&emsp;&emsp;（1）可以使用多个参数。</p><p>&emsp;&emsp;（2）变量读取说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read [-ers] [-a aname] [-d delim] [-i text] [-n num] [-N num] [-p prompt] [-t timeout] [-u fd] [var_name1 var_name2 ...]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;首先说一下<code>IFS(internal field separator</code>，为<strong>内部字段分隔符</strong>，是<code>bash shell</code>中的环境变量，它定义了<code>bash shell</code>用作字段分隔符的一系列字符，默认情况下，<code>bash shell</code>会将下列字符当做字段分隔符：<strong>空格</strong>、<strong>制表符</strong>和<strong>换行符</strong>。</p><p>&emsp;&emsp;<code>read</code>命令用于从标准输入中读取输入单行，并将读取的单行根据<code>IFS</code>环境变量分裂成多个字段，并将分割后的字段分别赋值给指定的变量列表<code>var_name</code>。第一个字段分配给第一个变量<code>var_name1</code>，第二个字段分配给第二个变量<code>var_name2</code>，依次到结束。如果指定的变量名少于字段数量，则多出的字段数量也同样分配给最后一个<code>var_name</code>，如果指定的变量命令多于字段数量，则多出的变量赋值为空。如果没有指定任何<code>var_name</code>，则分割后的所有字段都存储在环境变量<code>REPLY</code>中。</p><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p $&#x27;Enter your name: \n&#x27;</span><br><span class="line">echo $REPLY</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter your name: </span><br><span class="line">qidaink</span><br><span class="line">qidaink</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;（3）给多个变量赋值时，必须在一行内输入所有的值，不能换行，否则只能给第一个变量赋值，后续变量都会赋值失败。</p><h3 id="2-4test"><a href="#2-4test" class="headerlink" title="2.4test"></a><font size=3>2.4<code>test</code></font></h3><p>&emsp;&emsp;<code>test</code> 命令用于<strong>检查某个条件是否成立</strong>，它可以进行数值、字符和文件三个方面的测试。通常和 <code>if</code> 语句一起使用，并且大部分 <code>if</code> 语句都依赖 <code>test</code>。</p><p>&emsp;&emsp;以下只为举例说明使用格式，还有一些运算符可以查看本章《第四节 <code>Shell</code>运算符》。</p><ul><li>数值测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test $[num1] &lt;关系运算符&gt; $[num2]</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=100px rowspan="6">运算符</td>        <td align="center">-eq</td>        <td align="left">等于，则为真</td>    </tr>    <tr>        <td align="center">-ne</td>        <td align="left">不等于，则为真</td>    </tr>    <tr>        <td align="center">-gt</td>        <td align="left">大于，则为真</td>    </tr>    <tr>        <td align="center">-ge</td>        <td align="left">大于等于，则为真</td>    </tr>    <tr>        <td align="center">-lt</td>        <td align="left">小于，则为真</td>    </tr>    <tr>        <td align="center">-le</td>        <td align="left">小于等于，则为真</td>    </tr></table><ul><li>字符串测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test $[num1] &lt;字符串运算符&gt; $[num2]</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=100px rowspan="6">运算符</td>        <td align="center">=</td>        <td align="left">等于，则为真</td>    </tr>    <tr>        <td align="center">！=</td>        <td align="left">不等于，则为真</td>    </tr>    <tr>        <td align="center">-z 字符串</td>        <td align="left">字符串的长度为零，则为真</td>    </tr>    <tr>        <td align="center">-n 字符串</td>        <td align="left">字符串的长度不为零，则为真</td>    </tr></table><ul><li>文件测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test &lt;文件测试运算符&gt; file_name</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=100px rowspan="6">运算符</td>        <td align="center">-e file</td>        <td align="left">如果文件存在，则为真</td>    </tr>    <tr>        <td align="center">-f file</td>        <td align="left">如果文件存在且可读，则为真</td>    </tr></table>### <font size=3>2.5`echo`</font><h4 id="2-5-1基本参数"><a href="#2-5-1基本参数" class="headerlink" title="2.5.1基本参数"></a><font size=3>2.5.1基本参数</font></h4><p>&emsp;&emsp;<code>echo</code>用于在屏幕上打印出指定的字符串，命令格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo [option] string</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=100px>-n</td>        <td align="left" colspan="2">禁止在最后自动换行</td>    </tr>    <tr>        <td align="center" width=100px rowspan="11">-e</td>        <td align="left" colspan="2">开启转义字符功能，即遇到以下字符进行处理，而不会将其当成一般字符输出</td>    </tr>    <tr>        <td align="center">\a</td>        <td align="left">警报，响铃</td>    </tr>    <tr>        <td align="center">\b</td>        <td align="left">退格（删除键）</td>    </tr>    <tr>        <td align="center">\f</td>        <td align="left">换页(FF)，将当前位置移到下页开头</td>    </tr>    <tr>        <td align="center">\n</td>        <td align="left">换行</td>    </tr>    <tr>        <td align="center">\c</td>        <td align="left">不换行</td>    </tr>    <tr>        <td align="center">\r</td>        <td align="left">回车</td>    </tr>    <tr>        <td align="center">\t</td>        <td align="left">水平制表符（tab键）</td>    </tr>    <tr>        <td align="center">\v</td>        <td align="left">垂直制表符</td>    </tr>    <tr>        <td align="center">\ooo</td>        <td align="left">插入ooo（八进制）所代表的ASCII字符</td>    </tr>    <tr>        <td align="center">\\</td>        <td align="left">反斜杠</td>    </tr>    <tr>        <td align="center">--version</td>        <td align="left" colspan="2">显示版本信息</td>    </tr>    <tr>        <td align="center">--helo</td>        <td align="left" colspan="2">显示帮助</td>    </tr></table>【注意】该命令不带参数时**自带换行**。<h4 id="2-5-2实例"><a href="#2-5-2实例" class="headerlink" title="2.5.2实例"></a><font size=3>2.5.2实例</font></h4><ul><li>显示普通字符串</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;string1&quot;</span><br><span class="line">echo &quot;string2&quot;</span><br><span class="line">echo string3</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string1</span><br><span class="line">string2</span><br><span class="line">string3</span><br></pre></td></tr></table></figure><ul><li>显示转义字符</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;\&quot;string\&quot;&quot;</span><br><span class="line">echo \&quot;string\&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;string&quot;</span><br><span class="line">&quot;string&quot;</span><br></pre></td></tr></table></figure><ul><li>显示变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">name=qidaink</span><br><span class="line">echo $name</span><br><span class="line">echo &quot;$name&quot;</span><br><span class="line">echo &quot;$&#123;name&#125;&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qidaink</span><br><span class="line">qidaink</span><br><span class="line">qidaink</span><br></pre></td></tr></table></figure><ul><li>显示换行与不换行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">name=qidaink</span><br><span class="line">echo -e &quot;$name\nString1&quot; # 开启转义字符，\n 换行</span><br><span class="line">echo  &quot;$name\nString1&quot;</span><br><span class="line"></span><br><span class="line">echo -e &quot;$name\c&quot;        # 开启转义字符，\c不换行</span><br><span class="line">echo &quot;String2&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qidaink</span><br><span class="line">String1</span><br><span class="line">qidaink\nString1</span><br><span class="line">qidainkString2</span><br></pre></td></tr></table></figure><ul><li>显示结果定向至文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">name=qidaink</span><br><span class="line">echo -e &quot;$name\nString1&quot; &gt; file.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>&emsp;&emsp;在当前<code>Shell</code>脚本所在目录创建一个<code>filt.txt</code>文件（无该文件的话），并将要显示的内容显示在<code>filt.txt</code>文件中。</p><ul><li>原样输出字符串，不进行转义或取变量(用单引号)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">name=qidaink</span><br><span class="line">echo &quot;$name\nString1&quot;</span><br><span class="line">echo &#x27;$name\nString1&#x27;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qidaink\nString1</span><br><span class="line"><span class="meta">$</span><span class="bash">name\nString1</span></span><br></pre></td></tr></table></figure><ul><li>显示命令执行结果</font></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo `date`</span><br><span class="line">echo &#x27;date&#x27;</span><br><span class="line">echo &quot;date&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2022年 02月 14日 星期一 13:29:17 CST</span><br><span class="line">date</span><br><span class="line">date</span><br></pre></td></tr></table></figure><h3 id="2-6printf"><a href="#2-6printf" class="headerlink" title="2.6printf"></a><font size=3>2.6<code>printf</code></font></h3><p>&emsp;&emsp;<code>printf</code> 由 <code>POSIX</code> 标准所定义，因此使用 <code>printf </code>的脚本比使用 <code>echo</code> 移植性好。<code>printf</code> 使用<strong>引用文本或空格分隔</strong>的参数，外面可以在 <code>printf</code>中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认的 <code>printf </code>不会像<code>echo</code> 自动添加换行符。使用格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf  &quot;format-string&gt;&quot;  [arguments...]</span><br></pre></td></tr></table></figure><p>其中<code>format-string</code> 为格式控制字符串，<code>arguments</code> 为参数列表。<code>Shell</code>脚本中的<code>printf</code>和<code>C语言</code>中的<code>printf</code>用法基本一致，只是在写法上有些许区别。</p><ul><li><code>printf</code> 命令不用加括号</li><li><code>format-string</code> 可以没有引号，但最好加上，单引号双引号均可。</li><li>参数多于格式控制符(<code>%</code>)时，<code>format-string</code> 可以重用，可以将所有参数都转换。</li><li><code>arguments</code> 使用<strong>空格分隔</strong>，不用逗号。</li></ul><h4 id="2-6-1-转义字符"><a href="#2-6-1-转义字符" class="headerlink" title="2.6.1 转义字符"></a><font size=3>2.6.1 转义字符</font></h4><table>    <tr>        <td align="center" width=150px>\a</td>        <td align="left">警报，响铃</td>    </tr>    <tr>        <td align="center" width=150px>\b</td>        <td align="left">退格（删除键）</td>    </tr>    <tr>        <td align="center" width=150px>\c</td>        <td align="left">不显示输出结果中任何结尾的换行字符，而且任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符都被忽略。</td>    </tr>    <tr>        <td align="center" width=150px>\f</td>        <td align="left">换页(FF)，将当前位置移到下页开头</td>    </tr>    <tr>        <td align="center" width=150px>\n</td>        <td align="left">换行</td>    </tr>    <tr>        <td align="center" width=150px>\r</td>        <td align="left">回车</td>    </tr>    <tr>        <td align="center" width=150px>\t</td>        <td align="left">水平制表符（tab键）</td>    </tr>    <tr>        <td align="center" width=150px>\v</td>        <td align="left">垂直制表符</td>    </tr>    <tr>        <td align="center" width=150px>\ooo</td>        <td align="left">插入ooo（八进制）所代表的ASCII字符</td>    </tr>    <tr>        <td align="center" width=150px>\\</td>        <td align="left">反斜杠字符</td>    </tr></table>#### <font size=3>2.6.2 格式控制字符串</font><ul><li>格式控制字符</li></ul><table>    <tr>        <td align="center" width=100px>格式字符</td>        <td align="center">形式</td>        <td align="center">意义</td>    </tr>    <tr>        <td align="center" width=100px>i, d</td>        <td align="center">%i, %d</td>        <td align="left">以十进制形式输出带符号整数(正数不输出符号)</td>    </tr>    <tr>        <td align="center" width=100px>u</td>        <td align="center">%u</td>        <td align="left">以十进制形式输出无符号整数</td>    </tr>    <tr>        <td align="center" width=100px>o</td>        <td align="center">%o</td>        <td align="left">以八进制形式输出无符号整数(不输出前缀0)</td>    </tr>    <tr>        <td align="center" width=100px>x, X</td>        <td align="center">%x, %X</td>        <td align="left">以十六进制形式输出无符号整数(不输出前缀0x)</td>    </tr>    <tr>        <td align="center" width=100px>f</td>        <td align="center">%f</td>        <td align="left">以小数形式输出单、双精度实数</td>    </tr>    <tr>        <td align="center" width=100px>e, E</td>        <td align="center">%e, %E</td>        <td align="left">以指数形式输出单、双精度实数</td>    </tr>    <tr>        <td align="center" width=100px>g, G</td>        <td align="center">%g, %G</td>        <td align="left">以 %f 或 %e 中较短的输出宽度输出单、双精度实数</td>    </tr>    <tr>        <td align="center" width=100px>c</td>        <td align="center">%c</td>        <td align="left">输出单个字符</td>    </tr>    <tr>        <td align="center" width=100px>s</td>        <td align="center">%s</td>        <td align="left">输出字符串</td>    </tr></table>- 标识<table>    <tr>        <td align="center" width=100px>标识</td>        <td align="center">描述</td>    </tr>    <tr>        <td align="center" width=100px>-</td>        <td align="left">在给定的字段宽度内左对齐，默认是右对齐</td>    </tr>    <tr>        <td align="center" width=100px>+</td>        <td align="left">强制在结果之前显示加号或减号（+ 或 -），即正数前面会显示 + 号。默认情况下，只有负数前面会显示一个 - 号。</td>    </tr>    <tr>        <td align="center" width=100px>space<br>(空格)</td>        <td align="left">有符号值若为正，则在值前显示前导空格（但是不显示符号）；若为负，则在值前显示-。</td>    </tr>    <tr>        <td align="center" width=100px rowspan="3">#</td>        <td align="left">与 o、x 或 X 说明符一起使用时，非零值前面会分别显示 0、0x 或 0X。</td>    </tr>    <tr>        <td align="left">与 e、E 和 f 一起使用时，会强制输出包含一个小数点，即使后边没有数字时也会显示小数点。默认情况下，如果后边没有数字时候，不会显示显示小数点。</td>    </tr>    <tr>        <td align="left">与 g 或 G 一起使用时，结果与使用 e 或 E 时相同，但是尾部的零不会被移除。</td>    </tr>    <tr>        <td align="center" width=100px>0</td>        <td align="left">输出数值时指定左面不使用的空位置自动填0。</td>    </tr></table><ul><li>最小输出宽度（<code>width</code>）</li></ul><table>    <tr>        <td align="center" width=100px>宽度</td>        <td align="center">描述</td>    </tr>    <tr>        <td align="center" width=100px>number</td>        <td align="left">数值（十进制整数），数据长度 小于number，则左补空格；否则按实际输出。</td>    </tr>    <tr>        <td align="center" width=100px>*</td>        <td align="left">星号，精度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。</td>    </tr></table><ul><li>精度（<code>.precision</code>）</li></ul><table>    <tr>        <td align="center" width=100px>精度</td>        <td align="center">描述</td>    </tr>    <tr><!-- 1 -->        <td align="center" width=100px rowspan="6">.number</td>        <td align="left">对于整数说明符（d、i、o、u、x、X）：precision 指定了要写入的数字的最小位数。如果写入的值短于该数，结果会用前导零来填充。如果写入的值长于该数，结果不会被截断。精度为 0 意味着不写入任何字符。</td>    </tr>    <tr><!-- 2 -->        <td align="left">对于 e、E 和 f 说明符：要在小数点后输出的小数位数。</td>    </tr>    <tr><!-- 3 -->        <td align="left">对于 g 和 G 说明符：要输出的最大有效位数。</td>    </tr>    <tr><!-- 4 -->        <td align="left">对于 s : 要输出的最大字符数,不足number则正常输出，超过则截断。默认情况下，所有字符都会被输出，直到遇到末尾的空字符。</td>    </tr>    <tr><!-- 5 -->        <td align="left">对于 c 类型：没有任何影响。</td>    </tr>    <tr><!-- 6 -->        <td align="left">当未指定任何精度时，默认为 1。如果指定时不带有一个显式值，则假定为 0。</td>    </tr>    <tr>        <td align="center" width=100px>.*</td>        <td align="left">星号，精度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。<br>但是在尝试的时候似乎有一些数据类型不匹配的情况，不过也用的不多。</td>    </tr></table><h4 id="2-6-3-实例"><a href="#2-6-3-实例" class="headerlink" title="2.6.3 实例"></a><font size=3>2.6.3 实例</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">printf &quot;%-10s %-8s %-4s\n&quot; name sex kg  </span><br><span class="line">printf &quot;%-10s %-8s %-4.1f\n&quot; qidai 男 72.162</span><br><span class="line">printf &quot;%-10s %-8s %-4.1f\n&quot; fanhua 男 60.9612</span><br><span class="line">printf &quot;%-10s %-8s %-4.1f\n&quot; yunyuhai 女 48.96313141</span><br></pre></td></tr></table></figure><h3 id="2-7Shell中带颜色的输出"><a href="#2-7Shell中带颜色的输出" class="headerlink" title="2.7Shell中带颜色的输出"></a><font size=3>2.7<code>Shell</code>中带颜色的输出</font></h3><h4 id="2-7-1ANSI控制码简介"><a href="#2-7-1ANSI控制码简介" class="headerlink" title="2.7.1ANSI控制码简介"></a><font size=3>2.7.1<code>ANSI</code>控制码简介</font></h4><p>&emsp;&emsp;<code>ANSI</code>控制码用于在字符显示系统中控制光标移动和字符色彩等，常用于<code>BBS</code>系统中。<code>ANSI ESCAPE SEQUENCES</code>又称为<code>VT100</code>系列控制码，国内译为<code>ANSI</code>控制码。<code>ANSI</code>控制码依赖终端，不是依赖语言，所以在<code>shell</code>，<code>perl</code>，<code>C</code>里应用都是可以的。</p><p>&emsp;&emsp;**<code>ANSI</code>控制码开始的标志都为<code>ESC[</code>，<code>ESC</code>对应<code>ASCII码表</code>的<code>033(八进制)</code>**，在<code>Shell</code>编程中，输出的命令有<code>echo</code>和<code>printf</code>，<code>echo</code>需要用<code>-e</code>启用转义，两个输出命令通过<code>\033或者\e</code>来输入<code>ESC</code>，例如<code>\033[32m</code>即为<code>ESC[32m</code>。</p><p>####<font size=3>2.7.2<code>ANSI</code>控制码</font></p><table>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[0m</td>        <td align="left">关闭所有属性 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[1m</td>        <td align="left">设置高亮度</td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[4m</td>        <td align="left">下划线 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[5m</td>        <td align="left">闪烁 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[7m</td>        <td align="left">反显 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[8m</td>        <td align="left">消隐 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[30m ~ \033[37m</td>        <td align="left">设置前景色（字体色）<br>30:黑 31:红 32:绿 33:黄 34:蓝色 35:紫色 36:深绿 37:白色</td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[40m ~ \033[47m</td>        <td align="left">设置背景色<br>40:黑 41:深红 42:绿 43:黄色 44:蓝色 45:紫色 46:深绿 47:白色</td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[nA</td>        <td align="left">光标上移n行</td>    </tr>     <tr>        <td align="center" width=180px style="font-weight: bold;">\033[nB</td>        <td align="left">光标下移n行</td>    </tr>     <tr>        <td align="center" width=180px style="font-weight: bold;">\033[nC</td>        <td align="left">光标右移n行 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[nD</td>        <td align="left">光标左移n行 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[y;xH</td>        <td align="left">设置光标位置 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[2J</td>        <td align="left">清屏 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[K</td>        <td align="left">清除从光标到行尾的内容 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[s</td>        <td align="left">保存光标位置 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[u</td>        <td align="left">恢复光标位置 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[?25l</td>        <td align="left">隐藏光标 </td>    </tr>    <tr>        <td align="center" width=180px style="font-weight: bold;">\033[?25h</td>        <td align="left">显示光标</td>    </tr></table><p>【显示字符属性控制】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[n1;n2;......m</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;设定显示字符的属性状态。若有两个以上设定则以<strong>分号</strong>将代码隔开。除非重新设定，否则原设定之属性一直被保留，若想后边的不受影响，可以在结束后加一个<code>\033[0m</code>。</p><h4 id="2-7-3ANSI码应用格式"><a href="#2-7-3ANSI码应用格式" class="headerlink" title="2.7.3ANSI码应用格式"></a><font size=3>2.7.3<code>ANSI</code>码应用格式</font></h4><ul><li><code>echo</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;\033[颜色值m 文本&quot; # 最后加上\033[0m可以使其不影响其他字体 </span><br></pre></td></tr></table></figure><ul><li><code>printf</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf  &quot;\033[颜色值m 文本\n&quot; # 最后加上\033[0m可以使其不影响其他字体 </span><br></pre></td></tr></table></figure><h4 id="2-7-4实例"><a href="#2-7-4实例" class="headerlink" title="2.7.4实例"></a><font size=3>2.7.4实例</font></h4><ul><li><code>echo</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo -e &quot;\033[31m Hello World! \033[0m&quot;</span><br><span class="line">echo -e &quot;\e[31m Hello World! \e[0m&quot;</span><br><span class="line">echo -e &quot;\033[31;46m Hello World! \033[0m&quot;</span><br></pre></td></tr></table></figure><p>输出效果：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV2-03-ShellScript/image-20220214145142579.png" style="zoom:67%;" /><ul><li><code>printf</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">printf &quot;\033[31m Hello World! \033[0m Hello World!\n&quot;</span><br><span class="line">printf &quot;\e[31m Hello World! \e[0m Hello World!\n&quot;</span><br><span class="line">printf &quot;\033[31;46m Hello World! \033[0m Hello World!\n&quot;</span><br></pre></td></tr></table></figure><p>输出效果：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV2-03-ShellScript/image-20220214145436032.png" style="zoom:67%;" /><h2 id="3-结构性语句"><a href="#3-结构性语句" class="headerlink" title="3.结构性语句"></a><font size=3>3.结构性语句</font></h2><p>&emsp;&emsp;结构性语句主要根据程序的运行状态、输入数据、变量的取值、控制信号以及运行时间等因素来控制程序的运行流程。主要包括：条件测试语句（两路分支）、多路分支语句、循环语句、循环控制语句和后台执行语句等。</p><h3 id="3-1分支语句"><a href="#3-1分支语句" class="headerlink" title="3.1分支语句"></a><font size=3>3.1分支语句</font></h3><h4 id="3-1-1if-else-语句"><a href="#3-1-1if-else-语句" class="headerlink" title="3.1.1if...else...语句"></a><font size=3>3.1.1<code>if...else...</code>语句</font></h4><ul><li>语法结构<code>1</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> ... <span class="keyword">fi</span> 结构</span></span><br><span class="line">if [ expression ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression is true</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">if [ expression ] ; then</span><br><span class="line">   Statement(s) to be executed if expression is true</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者写成一行</span></span><br><span class="line">if [ expression ] ; then Statement(s) to be executed if expression is true; fi;</span><br></pre></td></tr></table></figure><ul><li>语法结构<code>2</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> ... <span class="keyword">else</span> ... <span class="keyword">fi</span> 结构</span></span><br><span class="line">if [ expression ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression is true</span><br><span class="line">else</span><br><span class="line">   Statement(s) to be executed if expression is not true</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>语法结构<code>3</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> ... <span class="keyword">elif</span> ... <span class="keyword">fi</span> 结构</span></span><br><span class="line">if [ expression 1 ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression 1 is true</span><br><span class="line">elif [ expression 2 ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression 2 is true</span><br><span class="line">elif [ expression 3 ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression 3 is true</span><br><span class="line">else</span><br><span class="line">   Statement(s) to be executed if no expression is true</span><br><span class="line">f</span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）以上三种结构中，<code>if</code>和<code>elif</code>之后要跟一个<code>then</code>，结束要有<code>fi</code>，中间的执行语句不需要像<code>C语言</code>一样有<code>&#123;&#125;</code>。</p><p>&emsp;&emsp;（2）<code>then</code>可以与<code>if</code>或者<code>elif</code>写在同一行，但是要加一个<code>;</code></p><p>&emsp;&emsp;（3）<code>if</code>也常与<code>test</code>命令一起使用。</p><h4 id="3-1-1case语句"><a href="#3-1-1case语句" class="headerlink" title="3.1.1case语句"></a><font size=3>3.1.1<code>case</code>语句</font></h4><ul><li>语法结构</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">    模式1)</span><br><span class="line">        command1</span><br><span class="line">        command2</span><br><span class="line">        command3</span><br><span class="line">        ;;</span><br><span class="line">    模式2）</span><br><span class="line">        command1</span><br><span class="line">        command2</span><br><span class="line">        command3</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        command1</span><br><span class="line">        command2</span><br><span class="line">        command3</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>【注意】</p><p>（1）取值后面必须为单词 <code>in</code>，<strong>每一模式必须以右括号结束</strong>。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至 <code>;;</code>。</p><p>（2）每个 <code>case</code> 分支用<strong>右圆括号</strong>开始，用两个分号 <code>;;</code>表示 <code>break</code>，即执行结束。如果没有匹配到任何一个模式，使用星号 <code>*</code> 捕获该值，再执行后面的命令。</p><p>（3）<code>esac</code>（就是 <code>case</code> 反过来）作为整个结构结束标记。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">read -p &quot;Inter a number:&quot; value</span><br><span class="line">if [ $value -lt 0 ] || [ $value -gt 100 ]</span><br><span class="line">    then</span><br><span class="line">    echo &quot;input error.&quot;</span><br><span class="line">    exit 0</span><br><span class="line">else</span><br><span class="line">    value=`expr $value / 10`</span><br><span class="line">    case $value in </span><br><span class="line">        8 | 9 | 10)</span><br><span class="line">            echo  &quot;A&quot;</span><br><span class="line">            ;;</span><br><span class="line">        6 | 7)</span><br><span class="line">            echo  &quot;B&quot;</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            echo  &quot;C&quot;</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="3-2循环语句"><a href="#3-2循环语句" class="headerlink" title="3.2循环语句"></a><font size=3>3.2循环语句</font></h3><h4 id="3-2-1for循环"><a href="#3-2-1for循环" class="headerlink" title="3.2.1for循环"></a><font size=3>3.2.1<code>for</code>循环</font></h4><ul><li>语法结构<code>1</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 列表</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>语法结构<code>2</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for((表达式1; 表达式2; 表达式2))</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>【注意】</p><p>（1）以上两种结构都可以，但是都要注意不可省略<code>do</code>和<code>done</code>。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">printf &quot;\033[31m shell方式 \033[0m\n&quot;</span><br><span class="line">for value in 1 2 3 4 5</span><br><span class="line">    do</span><br><span class="line">        printf &quot;$value&quot;</span><br><span class="line">    done</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">printf &quot;\033[31m 类似C语言方式 \033[0m\n&quot;</span><br><span class="line">for ((val = 1; val &lt;=5; val++))</span><br><span class="line">    do</span><br><span class="line">        printf &quot;$val&quot;</span><br><span class="line">    done</span><br><span class="line">    echo &quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="3-2-2while循环"><a href="#3-2-2while循环" class="headerlink" title="3.2.2while循环"></a><font size=3>3.2.2<code>while</code>循环</font></h4><ul><li>语法结构<code>1</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ expression ]</span><br><span class="line">do</span><br><span class="line">   Statement(s) to be executed if expression is true</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>语法结构<code>2</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (( expression )) </span><br><span class="line">do</span><br><span class="line">   Statement(s) to be executed if expression is true</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法结构1例子</span></span><br><span class="line">i=1</span><br><span class="line">sum=0</span><br><span class="line">while [ $i -le 10 ]</span><br><span class="line">do</span><br><span class="line">sum=`expr $sum + $i`</span><br><span class="line">i=`expr $i + 1`</span><br><span class="line">done</span><br><span class="line">echo &quot;i = $i  sum = $sum&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法结构2例子</span></span><br><span class="line">num=0</span><br><span class="line">while (( $num &lt; 5))</span><br><span class="line">do</span><br><span class="line">echo &quot;$num&quot;</span><br><span class="line">num=`expr $num + 1`</span><br><span class="line">done</span><br><span class="line">echo &quot;num=$num&quot;</span><br></pre></td></tr></table></figure><h4 id="3-2-3until循环"><a href="#3-2-3until循环" class="headerlink" title="3.2.3until循环"></a><font size=3>3.2.3<code>until</code>循环</font></h4><p>&emsp;&emsp;<code>until</code> 循环执行一系列命令直至条件为 <code>true</code> 时停止。<code>until</code> 循环与 <code>while</code> 循环在处理方式上刚好相反。一般 <code>while</code> 循环优于 <code>until</code> 循环，但在某些时候—也只是极少数情况下，<code>until</code> 循环更加有用。</p><ul><li>语法结构</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ expression ]</span><br><span class="line">do</span><br><span class="line">   Statement(s) to be executed until command is true</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">num=0</span><br><span class="line">until [ ! $&#123;num&#125; -lt 3 ]</span><br><span class="line">do</span><br><span class="line">   echo $&#123;num&#125;</span><br><span class="line">   num=`expr $&#123;num&#125; + 1`</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="3-2-4无限循环写法"><a href="#3-2-4无限循环写法" class="headerlink" title="3.2.4无限循环写法"></a><font size=3>3.2.4无限循环写法</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>写法</span></span><br><span class="line">for (( ; ; ))</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span>写法1</span></span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span>写法2</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="3-2-5跳出循环"><a href="#3-2-5跳出循环" class="headerlink" title="3.2.5跳出循环"></a><font size=3>3.2.5跳出循环</font></h4><p>&emsp;&emsp;在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，<code>Shell</code>与<code>C语言</code>一致，使用两个命令来实现该功能：<code>break</code>和<code>continue</code>。用法与<code>C语言</code>一致。</p><p>【注意】</p><p>&emsp;&emsp;（1）一般来说<code>break</code>是跳出本层循环，<code>continue</code>是结束本次循环，直接进入下一次循环。</p><p>&emsp;&emsp;（2）在嵌套循环中，<code>break </code>命令后面还可以跟一个整数，表示跳出第几层循环。<code>continue</code>后边也可以跟一个整数，表示继续第几层循环。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">break n      # break所在循环层为第1层，然后再向外计算层数</span><br><span class="line">continue n   # continue所在循环层为第1层，然后再向外计算层数</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for var1 in 1 2</span><br><span class="line">do</span><br><span class="line">   echo &quot;第1层循环 var1=$&#123;var1&#125;&quot;</span><br><span class="line">   for var2 in 3 4</span><br><span class="line">   do</span><br><span class="line">      echo -e &quot;\t第2层循环 var2=$&#123;var2&#125;&quot;</span><br><span class="line">      for var3 in 5 6</span><br><span class="line">      do</span><br><span class="line">         if [ $&#123;var1&#125; == 1 ] &amp;&amp; [ $&#123;var2&#125; == 4 ] &amp;&amp; [ $&#123;var3&#125; == 5 ]</span><br><span class="line">         then</span><br><span class="line">            echo -e &quot;break 跳出&quot;</span><br><span class="line">            break 3</span><br><span class="line">         elif [ $&#123;var1&#125; == 1 ] &amp;&amp; [ $&#123;var2&#125; == 3 ] &amp;&amp; [ $&#123;var3&#125; == 5 ]</span><br><span class="line">         then</span><br><span class="line">            echo -e &quot;continue 继续&quot;</span><br><span class="line">            continue 3</span><br><span class="line">         fi</span><br><span class="line">            echo -e &quot;\t\t第3层循环 var3=$&#123;var3&#125;&quot;</span><br><span class="line">            echo -e &quot;\t\t一次循环结束 $&#123;var1&#125; $&#123;var2&#125; $&#123;var3&#125;&quot;</span><br><span class="line">      done</span><br><span class="line">   done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="六、Shell函数"><a href="#六、Shell函数" class="headerlink" title="六、Shell函数"></a><font size=3>六、<code>Shell</code>函数</font></h1><h2 id="1-函数的定义"><a href="#1-函数的定义" class="headerlink" title="1.函数的定义"></a><font size=3>1.函数的定义</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[function] function_name() </span><br><span class="line">&#123;</span><br><span class="line">    list of commands.</span><br><span class="line">    [ return int_value ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）<code>function</code>是可选的，可以省略不写，直接就是函数名字也可以。</p><p>&emsp;&emsp;（2）<code>return int_value</code>表示返回值，如果不加，将以最后一条命令运行结果，作为返回值。函数的返回值可以在调用该函数后通过<code>$?</code>来获得。</p><p>&emsp;&emsp;（3）<code>Shell</code>中，通过<code>return</code>只能返回整数值，并且是<code>0-255</code>的范围，如果超出这个范围就会错误的结果。</p><p>&emsp;&emsp;（4）如果希望直接从终端调用函数，可以将函数定义在主目录下的 <code>.profile</code> 文件，这样每次登录后，在命令提示符后面输入函数名字就可以立即调用。</p><h2 id="2-函数的调用"><a href="#2-函数的调用" class="headerlink" title="2.函数的调用"></a><font size=3>2.函数的调用</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式1</span></span><br><span class="line">function_name [arg1 arg2 ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式2</span></span><br><span class="line">value_name=`function_name  [arg1 arg2 ... ]`</span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）函数必须先定义后使用，这意味着必须将<strong>函数放在脚本开始部分</strong>，直至<code>Shell</code>解释器首次发现它时，才可以使用。不像<code>C语言</code>一样可以只在前边声明函数，到最后再定义。</p><p>&emsp;&emsp;（2）<code>Shell</code>函数的调用只需要写出函数名即可，不需要写出括号<code>()</code>。</p><h2 id="3-函数的删除"><a href="#3-函数的删除" class="headerlink" title="3.函数的删除"></a><font size=3>3.函数的删除</font></h2><p>&emsp;&emsp;像删除变量一样，函数也可以被删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">unset</span> .f function_name</span></span><br></pre></td></tr></table></figure><h2 id="4-函数的参数传递"><a href="#4-函数的参数传递" class="headerlink" title="4.函数的参数传递"></a><font size=3>4.函数的参数传递</font></h2><p>&emsp;&emsp;在<code>Shell</code>中，调用函数时可以向其传递参数。在函数体内部，通过 <code>$n</code> （也就是位置变量）的形式来获取参数的值。除了<code>$n</code>还有几个特殊字符也可以用于处理参数。</p><table>    <tr>        <td align="center" width=100px>${n}</td>        <td align="left">位置变量</td>    </tr>    <tr>        <td align="center" width=100px>${*}</td>        <td align="left">以一个单字符串显示所有向脚本传递的参数</td>    </tr>    <tr>        <td align="center" width=100px>${$}</td>        <td align="left">脚本运行的当前进程ID号</td>    </tr>    <tr>        <td align="center" width=100px>${!}</td>        <td align="left">后台运行的最后一个进程的ID号</td>    </tr>    <tr>        <td align="center" width=100px>${@}</td>        <td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数</td>    </tr>    <tr>        <td align="center" width=100px>${?}</td>        <td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误</td>    </tr>    <tr>        <td align="center" width=100px>$#</td>        <td align="left">传递到脚本或函数的参数个数</td>    </tr></table><p>【注意】 最后一个 <code>#</code> 特殊字符在使用时也可以加 <code>&#123;&#125;</code>，只不过这里不写是因为加上后，会导致<code>Hexo</code>渲染后的页面发生错乱。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 定义函数时使用传入的参数</span></span><br><span class="line">[function] function_name() </span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;$1&quot; # 输出第1个位置变量</span><br><span class="line">    echo &quot;$&#123;10&#125;&quot; # 输出第10个位置变量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用函数时传入参数</span></span><br><span class="line">function_name [ arg1 arg2 arg3 ... ] </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">function test() </span><br><span class="line">&#123;</span><br><span class="line">    for var in 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">    do</span><br><span class="line">        echo &#x27;$&#x27;$&#123;var&#125;&#x27; = &#x27;$&#123;var&#125;&#x27; &#x27;</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test 10 9 8 7 6 5 4 3 2 1 0</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">1 = 1</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">2 = 2</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">3 = 3</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">4 = 4</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">5 = 5</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">6 = 6</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">7 = 7</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">8 = 8</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">9 = 9</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">10 = 10</span></span><br></pre></td></tr></table></figure><h2 id="5-函数内部的变量"><a href="#5-函数内部的变量" class="headerlink" title="5.函数内部的变量"></a><font size=3>5.函数内部的变量</font></h2><p>&emsp;&emsp;<code>Shell</code>函数内部可以定义变量，有两种定义方式。两种方式代表了变量有不同的作用域。</p><p>全局作用域：在脚本的其他任何地方都能够访问该变量。</p><p>局部作用域：只能在声明变量的作用域内(函数内部)访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 局部变量</span></span><br><span class="line">Local variable_name=value</span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局变量</span></span><br><span class="line">variable_name=value</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">function test() </span><br><span class="line">&#123;</span><br><span class="line">    var1=10</span><br><span class="line">    local var2=20</span><br><span class="line">    echo &quot;函数内打印在函数内部定义的变量&quot;</span><br><span class="line">    echo &quot;var1=$&#123;var1&#125;&quot;</span><br><span class="line">    echo &quot;var2=$&#123;var2&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test</span><br><span class="line">echo &quot;函数外打印在函数内部定义的变量&quot;</span><br><span class="line">echo &quot;var1=$&#123;var1&#125;&quot;</span><br><span class="line">echo &quot;var2=$&#123;var2&#125;&quot;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">函数内打印在函数内部定义的变量</span><br><span class="line">var1=10</span><br><span class="line">var2=20</span><br><span class="line">函数外打印在函数内部定义的变量</span><br><span class="line">var1=10</span><br><span class="line">var2=</span><br></pre></td></tr></table></figure><p>可以看出，局部变量<code>var2</code>的值在函数外是访问不到的。</p><h1 id="七、Shell文件包含"><a href="#七、Shell文件包含" class="headerlink" title="七、Shell文件包含"></a><font size=3>七、<code>Shell</code>文件包含</font></h1><p>&emsp;&emsp;<code>Shell</code>脚本与<code>C语言</code>一样，可以包含外部文件，<code>Shelll</code>可以将外部脚本的内容合并到当前脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件以便于使用。</p><p><code>Shell</code> 文件包含的语法格式有两种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 语法格式1</span></span><br><span class="line">. file_name</span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法格式2</span></span><br><span class="line">source file_name</span><br></pre></td></tr></table></figure><p>【注意】<em>被包含的脚本文件不需要可执行权限</em>。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">------------以下分隔开的是两个文件---------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 变量定义文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> filename: file1.sh</span></span><br><span class="line">var=&quot;file1.sh&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 引用其他文件内容的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> filename: file2.sh</span></span><br><span class="line">. file1.sh</span><br><span class="line"></span><br><span class="line">echo &quot;$&#123;var&#125;&quot;</span><br></pre></td></tr></table></figure><p><code>./file2.sh</code>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file1.sh</span><br></pre></td></tr></table></figure><h1 id="八、Shell重定向"><a href="#八、Shell重定向" class="headerlink" title="八、Shell重定向"></a><font size=3>八、<code>Shell</code>重定向</font></h1><p>&emsp;&emsp;<code>Unix</code> 命令默认从标准输入设备(<code>stdin</code>)获取输入，将结果输出到标准输出设备(<code>stdout</code>)显示。一般情况下，标准输入设备就是键盘，标准输出设备就是终端，即显示器。</p><h2 id="8-1输出重定向"><a href="#8-1输出重定向" class="headerlink" title="8.1输出重定向"></a><font size=3>8.1输出重定向</font></h2><ul><li>输出重定向的概念</li></ul><p>&emsp;&emsp;命令的输出不仅可以是显示器，还可以输出到某个文件，这就叫做输出重定向。</p><table>    <tr>        <td align="center" width=150px>命令</td>        <td align="center">说明</td>    </tr>    <tr>        <td align="center" width=150px>command > file</td>        <td align="left">将输出到显示器的内容重定向到 file文件。<br>【注意】file文件中原有的内容会被清空</td>    </tr>    <tr>        <td align="center" width=150px>command >> file</td>        <td align="left">将输出到显示器的内容以追加的方式重定向到 file文件。<br>【注意】file文件中原有的内容会保留，新的内容追加在结尾。</td>    </tr></table><p>【注意】<code>&gt;</code>和<code>&gt;&gt;</code>两个符号都是起到重定向的作用，但是，前者会清空原有文件，但是后者则为追加。</p><ul><li>实例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令行中执行</span></span><br><span class="line">who &gt; file_user   # 将命令完整的输出重定向在用户文件中(file_user)</span><br><span class="line">date &gt;&gt; file_user # 将日期追加到file_user文件结尾</span><br><span class="line">ls ~ &gt; file_user  # 清空file_user，将家目录中所有文件的名称重定向到file_user文件</span><br></pre></td></tr></table></figure><p>运行结果如下图：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV2-03-ShellScript/image-20220216153538484.png" style="zoom:50%;" /><h2 id="8-2输入重定向"><a href="#8-2输入重定向" class="headerlink" title="8.2输入重定向"></a><font size=3>8.2输入重定向</font></h2><ul><li>输入重定向的概念</li></ul><p>&emsp;&emsp;<code>Unix</code> 命令也可以从文件获取输入，而不是默认的键盘</p><table>    <tr>        <td align="center" width=150px>命令</td>        <td align="left">说明</td>    </tr>    <tr>        <td align="center" width=150px>command < file </td>        <td align="left">本来需要从键盘获取输入的命令会转移到文件file中读取内容。</td>    </tr></table><ul><li>实例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令行中执行</span></span><br><span class="line">wc -l file_user</span><br><span class="line">wc -l &lt; file_user </span><br></pre></td></tr></table></figure><p>运行结果如下图：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV2-03-ShellScript/image-20220216154305040.png" style="zoom:67%;" /><p>&emsp;&emsp;第一个命令没有进行重定向，会输出文件名；第二个命令却不会，因为第二个命令仅仅知道从标准输入读取内容。</p><h2 id="8-3重定向的深入理解"><a href="#8-3重定向的深入理解" class="headerlink" title="8.3重定向的深入理解"></a><font size=3>8.3重定向的深入理解</font></h2><p>&emsp;&emsp;文件描述符，<code>File descriptor</code>，简称<code>fd</code>，当应用程序请求内核打开/新建一个文件时，内核会返回一个文件描述符用于对应这个打开/新建的文件，其<code>fd</code><strong>本质上就是一个非负整数</strong>。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于<code>UNIX</code>、<code>Linux</code>这样的操作系统。</p><p>&emsp;&emsp;<strong>文件描述符 <code>0</code> 通常是标准输入（<code>STDIN</code>），<code>1</code> 是标准输出（<code>STDOUT</code>），<code>2</code> 是标准错误输出（<code>STDERR</code>）</strong>。</p><p>&emsp;&emsp;一般情况下，每个 <code>Unix/Linux</code> 命令运行时都会打开三个文件</p><table>    <tr>        <td align="left" width=200px>标准输入文件(stdin)</td>        <td align="left">stdin的文件描述符为0，Unix程序默认从stdin读取数据。</td>    </tr>    <tr>        <td align="left" width=200px>标准输出文件(stdout)</td>        <td align="left">stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</td>    </tr>    <tr>        <td align="left" width=200px>标准错误文件(stderr)</td>        <td align="left">stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</td>    </tr></table><p>&emsp;&emsp;默认情况下，<code>command &gt; file</code> 将 <code>stdout</code> 重定向到 <code>file</code>，<code>command &lt; file</code> 将<code>stdin</code> 重定向到 <code>file</code>。</p><p>所有可用重定向命令如下：</p><table>    <tr>        <td align="center" width=150px>命令</td>        <td align="left">说明</td>    </tr>    <tr>        <td align="center" width=150px>command > file</td>        <td align="left">将输出到显示器的内容重定向到 file文件。<br>【注意】file文件中原有的内容会被清空</td>    </tr>    <tr>        <td align="center" width=150px>command >> file</td>        <td align="left">将输出到显示器的内容以追加的方式重定向到 file文件。<br>【注意】file文件中原有的内容会保留，新的内容追加在结尾。</td>    </tr>    <tr>        <td align="center" width=150px>n > file</td>        <td align="left">将文件描述符为 n 的内容重定向到 file文件。<br>【注意】file文件中原有的内容会被清空。</td>    </tr>    <tr>        <td align="center" width=150px>n >> file</td>        <td align="left">将文件描述符为 n 的内容以追加的方式重定向到 file文件。<br>【注意】file文件中原有的内容会保留，新的内容追加在结尾。</td>    </tr>    <tr>        <td align="center" width=150px>n >& file</td>        <td align="left">将输出文件 file 和 n 合并。</td>    </tr>        <tr>        <td align="center" width=150px>命令</td>        <td align="left">说明</td>    </tr>    <tr>        <td align="center" width=150px>command < file </td>        <td align="left">本来需要从键盘获取输入的命令会转移到文件file中读取内容。</td>    </tr>    <tr>        <td align="center" width=150px>n <& file</td>        <td align="left">将输入文件 file 和 n 合并。</td>    </tr>    <tr>        <td align="center" width=150px> << tag </td>        <td align="left">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>    </tr></table><ul><li> <code>stderr</code> 重定向到 <code>file</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">command 2 &gt; file # 清空原文件再写入</span><br><span class="line">command 2 &gt; file # 追加到原文件后面</span><br></pre></td></tr></table></figure><ul><li><code>stdout</code> 和 <code>stderr</code> 合并后重定向到 <code>file</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">command &gt; file 2&gt;&amp;1</span><br><span class="line">command &gt;&gt; file 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>【注意】这里的 <code>2</code> 和 <code>&gt;</code>之间不可以有空格，<code>2&gt;</code>是一体的时候才表示错误输出。</p><ul><li><code>stdin</code> 和 <code>stdout</code> 都重定向</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command &lt; file1 &gt;file2</span><br></pre></td></tr></table></figure><p><code>command</code> 命令将 <code>stdin</code> 重定向到 <code>file1</code>，将 <code>stdout</code> 重定向到 <code>file2</code>。</p><ul><li><code>Here Document</code></li></ul><p>&emsp;&emsp;<code>Here Document</code> 是 <code>Shell</code> 中的一种特殊的重定向方式，它的基本的形式如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将两个 delimiter 之间的内容(document) 作为输入传递给 <span class="built_in">command</span></span></span><br><span class="line">command &lt;&lt; delimiter</span><br><span class="line">    document</span><br><span class="line">delimiter</span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）结尾的<code>delimiter</code> 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括<code>Space</code>和 <code>Tab</code> 缩进。</p><p>&emsp;&emsp;（2）开始的<code>delimiter</code>前后的空格会被忽略掉。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cat &lt;&lt; tag</span><br><span class="line">Hello,World!</span><br><span class="line">qidaink</span><br><span class="line">tag</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello,World!</span><br><span class="line">qidaink</span><br></pre></td></tr></table></figure><ul><li><code>/dev/null </code>文件</li></ul><p>&emsp;&emsp;如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 <code>/dev/null</code>。<code>/dev/null</code> 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 <code>/dev/null</code> 文件非常有用，将命令的输出重定向到它，会起到”禁止输出”的效果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command &gt; /dev/null 2&gt;&amp;1 # 屏蔽 stdout 和 stderr</span><br></pre></td></tr></table></figure><h1 id="九、Shell中的各种括号"><a href="#九、Shell中的各种括号" class="headerlink" title="九、Shell中的各种括号"></a><font size=3>九、<code>Shell</code>中的各种括号</font></h1><h2 id="9-1"><a href="#9-1" class="headerlink" title="9.1${}"></a><font size=3>9.1<code>$&#123;&#125;</code></font></h2><p>&emsp;&emsp;<code>$&#123; &#125;</code>用于变量替换，一般情况下，<code>$var</code> 与<code>$&#123;var&#125;</code>一样,但是用 <code>$&#123; &#125;</code> 会比较精确的界定变量名称的范围。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;Variable&#125;</span></span><br></pre></td></tr></table></figure><h2 id="9-2"><a href="#9-2" class="headerlink" title="9.2$()"></a><font size=3>9.2<code>$()</code></font></h2><p><code>$()</code>与反引号**``**都可用做命令替换。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令替换格式</span></span><br><span class="line"><span class="meta">$</span><span class="bash">(<span class="built_in">command</span>)   <span class="comment"># 并不是所有shell都支持</span></span></span><br><span class="line">`command`    # 基本上可在全部的 unix shell 中使用</span><br></pre></td></tr></table></figure><ul><li>实例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">var1=`date`</span><br><span class="line">var2=$(date)</span><br><span class="line">echo &#x27;`date`= &#x27;$&#123;var1&#125;&#x27;&#x27;</span><br><span class="line">echo &#x27;$(date)= &#x27;$&#123;var2&#125;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`date`= 2022年 02月 16日 星期三 16:26:49 CST</span><br><span class="line"><span class="meta">$</span><span class="bash">(date)= 2022年 02月 16日 星期三 16:26:49 CST</span></span><br></pre></td></tr></table></figure><h2 id="9-3"><a href="#9-3" class="headerlink" title="9.3(())"></a><font size=3>9.3<code>(())</code></font></h2><p>&emsp;&emsp;只要括号中的运算符、表达式符合<code>C语言</code>运算规则，都可用在<code>$((expression))</code>中，甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成十进制。</p><p>&emsp;&emsp;用 <code>(( )) </code>也可重定义变量值</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">var=3</span><br><span class="line">((var++))</span><br><span class="line">echo &quot;var=$&#123;var&#125;&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$((16#5f))&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=4</span><br><span class="line">95</span><br></pre></td></tr></table></figure><h2 id="9-4"><a href="#9-4" class="headerlink" title="9.4[]"></a><font size=3>9.4<code>[]</code></font></h2><p>&emsp;&emsp;<code>bash</code> 的内部命令，<code>[</code>和<code>test</code>是等同的。<code>if/test</code>结构中的左中括号<code>[</code>是调用<code>test</code>的命令标识，右中括号<code>]</code>是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试，并且根据比较的结果来返回一个退出状态码。<code>if/test</code>结构中并不是必须右中括号，但是新版的<code>Bash</code>中要求必须这样。</p><p>&emsp;&emsp;字符范围。用作正则表达式的一部分，描述一个匹配的字符范围。作为<code>test</code>用途的中括号内不能使用正则表达式。</p><h2 id="9-5-和"><a href="#9-5-和" class="headerlink" title="9.5$[]和$(())"></a><font size=3>9.5<code>$[]</code>和<code>$(())</code></font></h2><p><code>$[]</code>和<code>$(())</code>是一样的，都是<strong>进行数学运算</strong>的。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">a=2</span><br><span class="line">b=3</span><br><span class="line">c=5</span><br><span class="line">echo &#x27;$((a * b * c))=&#x27;$((a * b * c))&#x27;&#x27;</span><br><span class="line">echo &#x27;$[a * b * c]=&#x27;$[a * b * c]&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">((a * b * c))=30</span></span><br><span class="line"><span class="meta">$</span><span class="bash">[a * b * c]=30</span></span><br></pre></td></tr></table></figure><h2 id="9-5"><a href="#9-5" class="headerlink" title="9.5[[]]"></a><font size=3>9.5<code>[[]]</code></font></h2><p><code>&amp;emsp;&amp;emsp;[[</code>是 <code>bash</code> 程序语言的关键字。并不是一个命令，<code>[[ ]]</code> 结构比<code>[ ]</code>结构更加通用。在<code>[[</code>和<code>]]</code>之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。</p><p>&emsp;&emsp;支持字符串的模式匹配，使用<code>=~</code>操作符时甚至支持<code>shell</code>的正则表达式。字符串比较时可以把右边的作为一个模式，而不仅仅是一个字符串，比如<code>[[ hello == hell? ]]</code>，结果为真。<code>[[ ]] </code>中匹配字符串或通配符，不需要引号。</p><p>&emsp;&emsp;使用<code>[[ ... ]]</code>条件判断结构，而不是<code>[ ... ]</code>，能够防止脚本中的许多逻辑错误。比如，<code>&amp;&amp;</code>、<code>||</code>、<code>&lt;</code>和<code>&gt;</code> 操作符能够正常存在于<code>[[ ]]</code>条件判断结构中，但是如果出现在<code>[ ]</code>结构中的话，会报错。比如可以直接使用<code>if [[ $a != 1 &amp;&amp; $a != 2 ]]</code>, 如果不适用双括号, 则为<code>if [ $a -ne 1] &amp;&amp; [ $a != 2 ]</code>或者<code>if [ $a -ne 1 -a $a != 2 ]</code>。</p>]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】LV1-06-C语言-6指针</title>
      <link href="post/84847102.html"/>
      <url>post/84847102.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是记录<code>C语言</code>笔记——指针。</p><span id="more"></span><h1 id="一、指针"><a href="#一、指针" class="headerlink" title="一、指针"></a><font size=3>一、指针</font></h1><h2 id="1-什么是指针？"><a href="#1-什么是指针？" class="headerlink" title="1.什么是指针？"></a><font size=3>1.什么是指针？</font></h2><p>&emsp;&emsp;计算机中所有的数据都必须放在内存中，不同类型的数据占用的字节数不一样，例如<code>int</code>占用<code>4</code>个字节，<code>char </code>占用 1 个字节。为了正确地访问这些数据，必须为每个字节都编上号码，就像门牌号、身份证号一样，每个字节的<strong>编号</strong>是<strong>唯一</strong>的，根据编号可以准确地找到某个字节。</p><p>&emsp;&emsp;内存中字节的编号称为<strong>地址（<code>Address</code>）</strong>或<strong>指针（<code>Pointer</code>）</strong>。在C语言中，内存单元的地址称为指针，专门用来<strong>存放地址的变量</strong>，称为<strong>指针变量</strong>，在不影响理解的情况中，有时对地址、指针和指针变量不区分，通称指针。<br>$$<br>地址 = 指针 = 指针变量<br>$$<br>&emsp;&emsp;对于<code> 32 位</code>环境，程序能够使用的内存为 <code>4GB</code>，最小的地址为<code> 0x00000000</code>，最大的地址为 <code>0xFFFFFFFF</code>，注意这里的地址都是用<code>8</code>个十六进制数表示的，一共是<code>32</code>位。</p><p>&emsp;&emsp;对于<code>64</code>位系统来说，我们打印地址的时候会发现，它的地址都是由<code>12</code>个十六进制数表示的，这样算下来，才<code>48</code>位，按理来说不应该是<code>64</code>位吗？通过查阅资料，发现<code>48</code>位其实只是表象，显示了<code>48</code>位是因为目前为止<code>64</code>位系统的地址线只有<code>48</code>条。地址中第<code>48</code>位到第<code>63</code>位由第<code>47</code>位扩展而来（<strong>全0 全1</strong>）。因此有两段合法的地址空间，分别是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x0000 0000 0000 0000 - 0x0000 7FFF FFFF FFFF</span><br><span class="line">0xFFFF 8000 0000 0000 - 0xFFFF FFFF FFFF FFFF</span><br></pre></td></tr></table></figure><p>两段加起来总共<code>2^48Byte = 256TB</code>，一段是<code>128TB</code>，然而现在的<code>PC</code>基本达不到<code>128</code>的内存，因此第二段地址一般是见不到的，全都存在了第一段当中，所以看到的<code>48</code>位地址应该在前边再加上<code>0000</code>这才是完整的<code>64</code>位地址。</p><h2 id="2-一切皆地址？"><a href="#2-一切皆地址？" class="headerlink" title="2.一切皆地址？"></a><font size=3>2.一切皆地址？</font></h2><p>&emsp;&emsp;<code>C语言</code>用变量来存储数据，用函数来定义一段可以重复使用的代码，它们最终都要放到内存中才能供<code> CPU</code> 使用。<code>CPU</code> 只能通过<strong>地址</strong>来取得内存中的<strong>代码和数据</strong>，程序在执行过程中会告知 <code>CPU </code>要执行的代码以及要读写的数据的地址。</p><p>&emsp;&emsp;<code>CPU</code> 访问内存时需要的是<strong>地址</strong>，而不是变量名和函数名。<strong>变量名和函数名只是地址的一种助记符</strong>，当源文件被编译和链接成可执行程序后，它们都会被替换成地址。编译和链接过程的一项重要任务就是找到这些名称所对应的地址。</p><p>例如：</p><p>&emsp;&emsp;变量 <code>a、b、c </code>在内存中的地址分别是<code> 0X0000、0X0004、0X0008</code>，那么加法运算<code>c = a + b;</code>将会被转换成类似下面的形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0X0008</span> = (<span class="number">0X0000</span>) + (<span class="number">0X0004</span>);</span><br></pre></td></tr></table></figure><p><code>( )</code>表示取值操作，整个表达式的意思是，取出地址 <code>0X0000</code> 和 <code>0X0004</code> 上的值，将它们相加，把相加的结果赋值给地址为 <code>0X0008</code> 的内存。</p><p>&emsp;&emsp;所以，从根本上来说，数据的运算其实都是通过地址来运算的。</p><h2 id="3-为什么要用指针？"><a href="#3-为什么要用指针？" class="headerlink" title="3.为什么要用指针？"></a><font size=3>3.为什么要用指针？</font></h2><p>&emsp;&emsp;C程序设计中使用指针可以</p><ul><li><p>使程序简洁、紧凑、高效。</p></li><li><p>有效地表示复杂的数据结构。</p></li><li><p>动态分配内存。</p></li><li><p>得到多于一个的函数返回值。</p></li></ul><h2 id="4-怎么使用指针？"><a href="#4-怎么使用指针？" class="headerlink" title="4.怎么使用指针？"></a><font size=3>4.怎么使用指针？</font></h2><h3 id="4-1指针变量的定义"><a href="#4-1指针变量的定义" class="headerlink" title="4.1指针变量的定义"></a><font size=3>4.1指针变量的定义</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">storage_type data_type *p_name;</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=100px>storage_type</td>        <td align="left">存储类型（指针变量本身的存储类型,可以说明也可以不说明）</td>    </tr>    <tr>        <td align="center" width=100px>data_type</td>        <td align="left">任意有效的 C 数据类型（指针目标的数据类型，必须说明）</td>    </tr>    <tr>        <td align="center" width=100px>p_name</td>        <td align="left">指针变量名</td>    </tr></table><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> *p1;  <span class="comment">/* p1是一个指向静态整型变量的指针变量 */</span></span><br><span class="line"><span class="keyword">float</span> *p2;       <span class="comment">/* p2是一个指向浮点型变量的指针变量 */</span></span><br><span class="line"><span class="keyword">char</span> *p3;        <span class="comment">/* p3是一个指向字符型变量的指针变量 */</span></span><br><span class="line"><span class="keyword">int</span> *a, *b, *c;  <span class="comment">/* a、b、c 的都是 int* 类型的指针变量 */</span></span><br><span class="line"><span class="keyword">int</span> *a, b, c;    <span class="comment">/* a 是 int* 类型的指针变量，b、c 都是类型为 int 的普通变量 */</span></span><br></pre></td></tr></table></figure><p>【注意】指针说明时指定的数据类型不是指针变量本身的数据类型，而是指针目标的数据类型。简称为指针的数据类型。</p><p>【说明】引入指针要注意程序中的<code>p</code>、<code>*p</code> 和 <code>&amp;p</code> 三种表示方法的不同意义。设<code>p</code>为一个指针(<code>int *p;</code>)则：</p><table>   <tr>       <td align="center">p</td>       <td align="left"> 指针变量， 它的内容是地址量</td>   </tr>    <tr>       <td align="center">*p</td>       <td align="left"> 指针所指向的对象， 它的内容是数据</td>   </tr>    <tr>       <td align="center">&p</td>       <td align="left"> 指针变量占用的存储区域的地址，是个常量</td>   </tr></table><h3 id="4-2指针变量的赋值"><a href="#4-2指针变量的赋值" class="headerlink" title="4.2指针变量的赋值"></a><font size=3>4.2指针变量的赋值</font></h3><p>&emsp;&emsp;指针变量在使用前，不仅要<strong>定义说明</strong>，而且要<strong>赋予具体的值</strong>，如果没有确切的地址可以赋值，为指针变量赋一个<code>NULL</code>值（赋为 <code>NULL</code> 值的指针被称为<strong>空指针</strong>），未经赋值的指针不能随便使用，否则将导致程序的错误，并且指针变量的值只能是<strong>变量的地址</strong>，不能是其他数据，否则将会导致错误产生。</p><p>&emsp;&emsp;没有合法指向的指针称为<strong>“野”指针</strong>。“野”指针随机指向一块空间，该空间中存储的可能是其他程序的数据甚至是系统数据，故不能对“野”指针所指向的空间进行存取操作，否则轻者会引起程序崩溃，严重的可能导致整个系统崩溃。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. 定义时直接赋值 */</span></span><br><span class="line">&lt;存储类型&gt;  &lt;数据类型&gt;  *&lt;指针变量名&gt; = &lt;地址量&gt;; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 定义完成后再赋值 */</span></span><br><span class="line">&lt;存储类型&gt;  &lt;数据类型&gt;  *&lt;指针变量名&gt;;</span><br><span class="line">&lt;指针变量名&gt; = &lt;地址量&gt;;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;        <span class="comment">/* 定义一个整型变量 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;     <span class="comment">/* 定义一个空指针 */</span></span><br><span class="line"><span class="keyword">int</span> *p1 = &amp;a;      <span class="comment">/* 定义一个指针变量 p1，同时赋初值，使其指向整型变量 a */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p2;           <span class="comment">/* 定义一个指针变量 p2，不进行初始化赋值  */</span></span><br><span class="line">p2 = &amp;a;           <span class="comment">/* 将变量 a 的地址赋给指针变量 p2 ，使其指向整型变量 a */</span></span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）<strong>定义</strong>指针变量时必须<strong>带<code>*</code><strong>，给指针变量</strong>赋值</strong>时**不能带<code>*</code>**。</p><p>&emsp;&emsp;（2）和普通变量一样，指针变量也可以被多次修改，可以改变指针变量的值，使其指向不同的地址。</p><p>&emsp;&emsp;（3）地址量必须是一个<strong>地址</strong>，若是普通变量，要加上**取地址<code>&amp;</code>**符号。</p><h3 id="4-3指针变量的引用"><a href="#4-3指针变量的引用" class="headerlink" title="4.3指针变量的引用"></a><font size=3>4.3指针变量的引用</font></h3><ul><li>获取数据</li></ul><p>&emsp;&emsp;指针变量存储了数据的地址，通过指针变量能够获得该地址上的数据，格式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&lt;p_name&gt;;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里的<code>*</code>并不是乘号，而是被称为<strong>指针运算符</strong>，用来获取指针变量所指向地址中所存储的数据。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *p1 = &amp;a;</span><br><span class="line">    <span class="keyword">int</span> *p2;</span><br><span class="line">    p2 = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d, *p1=%d, *p2=%d\n&quot;</span>, a, *p1, *p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220130130321406.png" alt="image-20220130130321406" style="zoom:80%;" /><ul><li>修改数据</li></ul><p>&emsp;&emsp;通过指针可以直接修改指针所指向变量的数据，使用格式如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&lt;p_name&gt; = value;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *p1 = &amp;a;</span><br><span class="line">    <span class="keyword">int</span> *p2;</span><br><span class="line">    p2 = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d, *p1=%d, *p2=%d\n&quot;</span>, a, *p1, *p2);</span><br><span class="line">    *p1 = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d, *p1=%d, *p2=%d\n&quot;</span>, a, *p1, *p2);</span><br><span class="line">    *p2 = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d, *p1=%d, *p2=%d\n&quot;</span>, a, *p1, *p2);</span><br><span class="line">    a = <span class="number">40</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d, *p1=%d, *p2=%d\n&quot;</span>, a, *p1, *p2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220130141024744.png" alt="image-20220130141024744" style="zoom: 67%;" /><h3 id="4-4指针和变量在内存中的存放"><a href="#4-4指针和变量在内存中的存放" class="headerlink" title="4.4指针和变量在内存中的存放"></a><font size=3>4.4指针和变量在内存中的存放</font></h3><p>&emsp;&emsp;要想更加清楚地理解指针变量，我们可以编写程序来进行测试，好清楚它在内存中的情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *p1 = &amp;a;</span><br><span class="line">    <span class="keyword">int</span> *p2;</span><br><span class="line">    p2 = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d, &amp;a=%p\n&quot;</span>, a, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p1=%d, p1=%p, &amp;p1=%p, &amp;(*p1)=%p\n&quot;</span>, *p1, p1, &amp;p1, &amp;(*p1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p2=%d, p2=%p, &amp;p2=%p, &amp;(*p2)=%p\n&quot;</span>, *p2, p2, &amp;p2, &amp;(*p2));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220130174049078.png" alt="image-20220130174049078" style="zoom: 67%;" /><p>&emsp;&emsp;通过打印指针变量的地址以及普通变量的地址可以得到指针变量和普通变量在内存中的存放如下所示：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220130180725096.png" alt="image-20220130180725096" style="zoom:60%;" /><h2 id="5-指针占几个字节？"><a href="#5-指针占几个字节？" class="headerlink" title="5.指针占几个字节？"></a><font size=3>5.指针占几个字节？</font></h2><p>&emsp;&emsp;从上边对指针的概念的阐述中可以得出，指针也可以称之为地址，而地址的大小就与计算机多少位相关联起来。常见的就是<code>64</code>位系统和<code>32</code>位系统，接下来就来验证一下不同位数的系统中的指针大小。</p><ul><li><code>64</code>位系统</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(p)=%ld\n&quot;</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220130181429628.png" alt="image-20220130181429628" style="zoom:67%;" /><p>可以看出在<code>64</code>位系统下，指针变量<code>p</code>占据了<code>8Byte</code>的空间，一共就是<code>64bit</code>。</p><ul><li><code>32</code>位系统</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(p)=%ld\n&quot;</span>,<span class="keyword">sizeof</span>(p));<span class="comment">/* %ld 要改为 %d，否则就会有一个警告 */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220130182415239.png" alt="image-20220130182415239" style="zoom:67%;" /><p>可以看出在<code>32</code>位系统下，指针变量<code>p</code>占据了<code>4Byte</code>的空间，一共就是<code>32bit</code>。</p><h2 id="6-指针的运算"><a href="#6-指针的运算" class="headerlink" title="6.指针的运算"></a><font size=3>6.指针的运算</font></h2><p>&emsp;&emsp;指针运算是以指针变量所存放的地址量作为运算量而进行的运算，指针运算的<strong>实质就是地址的计算</strong>，指针运算的种类是有限的，它只能进行<strong>赋值运算</strong>、<strong>算术运算</strong>和<strong>关系运算</strong>。</p><h3 id="6-1指针的赋值运算"><a href="#6-1指针的赋值运算" class="headerlink" title="6.1指针的赋值运算"></a><font size=3>6.1指针的赋值运算</font></h3><p>见 4.2指针变量的赋值 一节。</p><h3 id="6-2指针的算术运算"><a href="#6-2指针的算术运算" class="headerlink" title="6.2指针的算术运算"></a><font size=3>6.2指针的算术运算</font></h3><ul><li>算术运算</li></ul><p>&emsp;&emsp;先定义指针变量 <code>px  和 py</code> 。</p><table style="font-weight: bold;">    <tr>        <td align="center" style="font-weight: bold;">运算符</td>        <td align="center" style="font-weight: bold;">计算形式</td>        <td align="center" style="font-weight: bold;">含义</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;">+</td>        <td align="center" style="font-weight: bold;">px + n</td>        <td align="left" style="font-weight: bold;">指针向地址大的方向移动 n 个数据<br>实际位置的地址量: (px) + sizeof(px的指向的数据类型) * n</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;">-</td>        <td align="center" style="font-weight: bold;">px - n</td>        <td align="left" style="font-weight: bold;">指针向地址小的方向移动 n 个数据<br>实际位置的地址量是: (px) - sizeof(px的指向的数据类型) * n</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;" rowspan="2">++</td>        <td align="center" style="font-weight: bold;">px++</td>        <td align="left" style="font-weight: bold;" rowspan="2">指针向地址大的方向移动 n 个数据</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;">++px</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;" rowspan="2">--</td>        <td align="center" style="font-weight: bold;">px--</td>        <td align="left" style="font-weight: bold;" rowspan="2">指针向地址小的方向移动 n 个数据</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;">--px</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;">-</td>        <td align="center" style="font-weight: bold;">px - py</td>        <td align="left" style="font-weight: bold;">指针 px 与 py之间间隔元素的个数<br>px 和 py 必须是同意数据类型的指针变量，否则两者相减毫无意义。</td>    </tr></table><p>【注意】</p><p>&emsp;&emsp;（1）不同数据类型的两个指针实行加减整数运算是无意义的。</p><p>&emsp;&emsp;（2）<code>px - py</code>运算的结果<strong>不是地址量</strong>，而<strong>是一个整数值</strong>，意思就它们相减的结果是<strong>两指针</strong>指向的地址位置<strong>之间相隔数据的个数</strong>，而<strong>不是</strong>两指针持有的<strong>地址值相减</strong>的结果。（<strong>两指针数据类型要一致</strong>）</p><ul><li>实例</li></ul><p>&emsp;&emsp;这里需要提前用一下下边要说的指针与数组的知识，这样通过数组来进行验证，对于指针的算术运算更容易理解些。这里主要验证两指针相减的情况，其他的都比较简单，下一节介绍数组与指针的时候也会经常用到。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">6</span>]  = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">6</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *px1 = &amp;a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> *py1 = &amp;a[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">char</span> *px2 = &amp;b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">char</span> *py2 = &amp;b[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d]=%d , &amp;a[%d]=%p | b[%d]=%d , &amp;b[%d]=%p\n&quot;</span>, i, a[i], i, &amp;a[i], i, b[i], i, &amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p - %p = %ld\n&quot;</span>, py1, px1, py1 - px1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p - %p = %ld\n&quot;</span>, py2, px2, py2 - px2);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220130210001974.png" alt="image-20220130210001974" style="zoom: 67%;" /><h3 id="6-3指针的关系运算"><a href="#6-3指针的关系运算" class="headerlink" title="6.3指针的关系运算"></a><font size=3>6.3指针的关系运算</font></h3><ul><li>关系运算</li></ul><p>&emsp;&emsp;两指针之间的关系运算表示它们指向的<strong>地址位置之间的关系</strong>。指向地址大的指针大于指向地址小的指针。</p><table style="font-weight: bold;">    <tr>        <td align="center" style="font-weight: bold;">运算符</td>        <td align="center" style="font-weight: bold;">说明</td>        <td align="center" style="font-weight: bold;">举例</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;"> > </td>        <td align="center" style="font-weight: bold;">大于</td>        <td align="center" style="font-weight: bold;">px > py</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;"> < </td>        <td align="center" style="font-weight: bold;">小于</td>        <td align="center" style="font-weight: bold;">px < py</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;"> >= </td>        <td align="center" style="font-weight: bold;">大于等于</td>        <td align="center" style="font-weight: bold;">px >= py</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;"> <= </td>        <td align="center" style="font-weight: bold;">小于等于</td>        <td align="center" style="font-weight: bold;">px <= py</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;"> == </td>        <td align="center" style="font-weight: bold;">等于</td>        <td align="center" style="font-weight: bold;">px == py</td>    </tr>    <tr>        <td align="center" style="font-weight: bold;"> != </td>        <td align="center" style="font-weight: bold;">不等于</td>        <td align="center" style="font-weight: bold;">px ！= py</td>    </tr></table>【注意】<p>&emsp;&emsp;（1）不同数据类型的指针之间的关系运算没有任何意义，指向不同数据区域的数据的两个指针之间的关系运算也没有意义。</p><p>&emsp;&emsp;（2）指针与一般整数变量之间的关系运算没有意义。但可以和<code>0(NULL)</code>进行等于或不等于的关系运算，判断指针是否为空。</p><h2 id="7-void指针"><a href="#7-void指针" class="headerlink" title="7.void指针"></a><font size=3>7.<code>void</code>指针</font></h2><h3 id="7-1void指针概念"><a href="#7-1void指针概念" class="headerlink" title="7.1void指针概念"></a><font size=3>7.1<code>void</code>指针概念</font></h3><p>&emsp;&emsp;<code>void</code>指针是一种<strong>不确定数据类型的指针变量</strong>，它可以通过<strong>强制类型转换</strong>让该变量<strong>指向任何数据类型</strong>的变量。由于 <code>void</code> 指针没有特定的类型，因此它可以<strong>指向任何类型的数据</strong>。</p><p style="color:red;">    &emsp;&emsp;任何类型的指针都可以直接赋值给 void 指针，而无需进行其他相关的强制类型转换。<br>    &emsp;&emsp;要将void 指针 赋给其他类型的指针，则需要强制类型转换。</p><h3 id="7-2一般形式"><a href="#7-2一般形式" class="headerlink" title="7.2一般形式"></a><font size=3>7.2一般形式</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *&lt;指针变量名称&gt;;</span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;在 <code>ANSI C</code> 标准中，对于<code>void</code>指针，虽然任何类型的指针都可以直接赋值给 <code>void</code> 指针，但是在<strong>没有强制类型转换之前，不能进行任何指针的算术运算</strong>，这是因为在引用指针目标值时，<code>void *</code>相当于类型不确定，只知道指针指的起始地址，但是不知道占用的字节数，所以就没有颁发决定以什么单位来进行偏移，就会出现编译错误。</p><p>&emsp;&emsp;在 <code>GNU</code> 中则允许其进行算术运算，因为在默认情况下，<code>GNU</code> 认为 <code>void * 和 char * </code>一样，既然是确定的，当然可以进行一些算术操作。</p><h3 id="7-3使用规则"><a href="#7-3使用规则" class="headerlink" title="7.3使用规则"></a><font size=3>7.3使用规则</font></h3><p>&emsp;&emsp;进行强制类型转换格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(&lt;目标数据类型&gt; *)&lt;指针变量名&gt;</span><br></pre></td></tr></table></figure><ul><li>对<code>void</code>指针赋值</li></ul><p><code>void </code>指针可以指向任意类型的数据，就是说可以用任意类型的指针对 <code>void</code>指针赋值。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *a;  <span class="comment">/* 定义一个整型指针变量 a */</span></span><br><span class="line"><span class="keyword">void</span> *p; <span class="comment">/* 定义一个 void 型指针变量 p */</span></span><br><span class="line">p = a;   <span class="comment">/* 将指针变量 a 指向的地址赋值给 p */</span></span><br></pre></td></tr></table></figure><ul><li>将<code>void</code>指针赋给其他类型指针</li></ul><p>&emsp;&emsp;“空类型”可以包容“有类型”，而“有类型”则不能包容“空类型”，要将<code>void</code>指针赋值给其他类型的指针，必须进行强制类型转换。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p1;     <span class="comment">/* 定义一个 void 型指针变量 p1 */</span></span><br><span class="line"><span class="keyword">int</span> *p2;      <span class="comment">/* 定义一个整型指针变量 p2 */</span></span><br><span class="line">p2 = (<span class="keyword">int</span>*)p1;<span class="comment">/* 将void指针变量p1赋值给int指针变量p2 */</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>void</code>指针</li></ul><p>&emsp;&emsp;必须进行强制类型转换才可以使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *a;  <span class="comment">/* 定义一个整型指针变量 a */</span></span><br><span class="line"><span class="keyword">void</span> *p; <span class="comment">/* 定义一个 void 型指针变量 p */</span></span><br><span class="line"></span><br><span class="line">p = a;   <span class="comment">/* 将指针变量 a 指向的地址赋值给 p */</span></span><br><span class="line"></span><br><span class="line">ptrintf(<span class="string">&quot;*p=%d\n&quot;</span>, *(<span class="keyword">int</span> *)p);</span><br></pre></td></tr></table></figure><h2 id="8-const指针"><a href="#8-const指针" class="headerlink" title="8.const指针"></a><font size=3>8.<code>const</code>指针</font></h2><h3 id="8-1const变量"><a href="#8-1const变量" class="headerlink" title="8.1const变量"></a><font size=3>8.1<code>const</code>变量</font></h3><p>&emsp;&emsp;<code>C语言</code>中，关键字<code>const</code>修饰变量，可以使<strong>变量常量化</strong>，这样就使得变量的值不能修改，从而达到保护变量的目的。一般的说明形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &lt;数据类型&gt; 变量名 = [&lt;表达式&gt;] ;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;那如果说当变量有<code>const</code>修饰时，想用指针间接访问变量，指针也要有<code>const</code>修饰。那么<code>const</code>放在指针声明的什么位置呢？请接着往下看。</p><h3 id="8-2常量化指针目标表达式"><a href="#8-2常量化指针目标表达式" class="headerlink" title="8.2常量化指针目标表达式 "></a><font size=3>8.2常量化指针目标表达式 </font></h3><ul><li>一般形式</li></ul><p>&emsp;&emsp;常量化指针目标是<strong>限制通过指针改变其目标的数值</strong> ，但**<code>&lt;指针变量&gt;</code>存储的地址值可以修改**。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &lt;数据类型&gt; *&lt;指针变量名称&gt;[= &lt;指针运算表达式&gt;];</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;a;</span><br></pre></td></tr></table></figure><p>分析：上边定义了两个整型变量<code>a,b</code>和一个带有<code>const</code>修饰的指针变量，此时指针<code>p</code>指向的是<code>a</code>，我们<strong>可以</strong>改变<code>p</code>中的地址值，即通过<code>p = &amp;b;</code>使其指向<code>b</code>；我们<strong>也可以</strong>通过<code>*p</code>来访问相应的目标值，但是，我们<strong>无法</strong>通过<code>*p = 30;</code>这样的赋值操作来改变目标值，若强行修改则会报以下错误：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: assignment of read-only location ‘*p’</span><br></pre></td></tr></table></figure><h3 id="8-3常量化指针变量"><a href="#8-3常量化指针变量" class="headerlink" title="8.3常量化指针变量"></a><font size=3>8.3常量化指针变量</font></h3><ul><li>一般形式</li></ul><p>&emsp;&emsp;常量化指针变量，使得**<code>&lt;指针变量&gt;</code>存储的地址值不可被修改<strong>，但是</strong>可以通过<code>*&lt;指针变量名称&gt;</code>修改指针所指向变量的值**。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;数据类型&gt; * <span class="keyword">const</span> &lt;指针变量名&gt; = &lt;指针运算表达式&gt; ; </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a;</span><br></pre></td></tr></table></figure><p>分析：上边定义了两个整型变量<code>a,b</code>和一个带有<code>const</code>修饰的指针变量，此时指针<code>p</code>指向的是<code>a</code>，我们<strong>无法</strong>改变<code>p</code>中的地址值，即通过<code>p = &amp;b;</code>使其指向<code>b</code>若强行修改则会报以下错误：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: assignment of read-only variable ‘p’</span><br></pre></td></tr></table></figure><p>我们<strong>可以</strong>通过<code>*p</code>来访问相应的目标值，我们<strong>也可以</strong>通过<code>*p = 30;</code>这样的赋值操作来改变目标值。</p><h3 id="8-4常量化指针变量及其目标表达式"><a href="#8-4常量化指针变量及其目标表达式" class="headerlink" title="8.4常量化指针变量及其目标表达式  "></a><font size=3>8.4常量化指针变量及其目标表达式  </font></h3><ul><li>一般形式</li></ul><p>&emsp;&emsp;常量化指针变量及其目标表达式，使得<strong>既不可以修改&lt;指针变量&gt;的地址</strong>，也<em><em>不可以通过</em>&lt;指针变量名称&gt;修改指针所指向变量的值</em>*。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &lt;数据类型&gt; *<span class="keyword">const</span> &lt;指针变量名&gt; = &lt;指针运算表达式&gt; ; </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a;</span><br></pre></td></tr></table></figure><p>分析：上边定义了两个整型变量<code>a,b</code>和一个带有<code>const</code>修饰的指针变量，此时指针<code>p</code>指向的是<code>a</code>，我们<strong>无法</strong>改变<code>p</code>中的地址值，即通过<code>p = &amp;b;</code>使其指向<code>b</code>；我们<strong>可以</strong>通过<code>*p</code>来访问相应的目标值，但是，我们<strong>无法</strong>通过<code>*p = 30;</code>这样的赋值操作来改变目标值。若强行修改地址值或者目标值，则会报以下错误：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: assignment of read-only variable ‘p’  <span class="comment">/* 通过p=&amp;b;修改存储的地址值 */</span></span><br><span class="line">error: assignment of read-only location ‘*p’ <span class="comment">/* 通过*p=30;修改目标值 */</span></span><br></pre></td></tr></table></figure><h1 id="二、指针与数组"><a href="#二、指针与数组" class="headerlink" title="二、指针与数组"></a><font size=3>二、指针与数组</font></h1><h2 id="1-指针与一维数组"><a href="#1-指针与一维数组" class="headerlink" title="1.指针与一维数组"></a><font size=3>1.指针与一维数组</font></h2><h3 id="1-1数组的指针"><a href="#1-1数组的指针" class="headerlink" title="1.1数组的指针"></a><font size=3>1.1数组的指针</font></h3><p>&emsp;&emsp;数组元素的地址是指数组元素在内存中的起始地址，可以由各个元素加上取地址符号<code>&amp;</code>组成，而数组名就代表了数组的起始地址。</p><p>&emsp;&emsp;<strong>数组指针</strong>就是指向<strong>数组起始地址</strong>的指针，其本质就是指针，一维数组名可以看做是一维数组的指针（但是一维数组名不能像指针变量那样做自<code>++</code>和<code>--</code>运算）</p><h3 id="1-2数组元素的表示"><a href="#1-2数组元素的表示" class="headerlink" title="1.2数组元素的表示"></a><font size=3>1.2数组元素的表示</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>]  = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *p = a;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a[i]\t p[i]\t *(a+i)\t *(p+i)\t|&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t   &amp;a[i]\t    &amp;p[i]\t     a+i\t     p+i \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d\t   %d\t    %d\t    %d\t|&quot;</span>, a[i], p[i], *(a+i), *(p+i));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t%p\t%p\t%p\t%p\n&quot;</span>, &amp;a[i], &amp;p[i], a+i, p+i);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220204134546751.png" alt="image-20220204134546751" style="zoom: 67%;" /><p>从上边实例可以看出：</p><ul><li><p>**<code>a[i], p[i], *(p+i), *(a+i)四者等价</code>**均可表 示数组元素；</p></li><li><p>**<code>&amp;a[i], &amp;p[i], p+i, a+i四者等价</code>**均可表示相应数组元素地址；</p></li></ul><table>    <tr>        <td align="center" colspan="4">元素表示</td>        <td align="center" colspan="4">元素地址表示</td>    </tr>    <tr>        <td align="center" colspan="4" style="font-weight: bold; color:red;">a[i] &hArr; p[i] &hArr; *(p+i) &hArr; *(a+i)</td>        <td align="center" colspan="4" style="font-weight: bold; color:red;">&a[i] &hArr; &p[i] &hArr; p+i &hArr; a+i</td>    </tr>    <tr>        <td align="center">a[0]</td>        <td align="center">p[0]</td>        <td align="center">*(p+0)</td>        <td align="center">*(a+0)</td>        <td align="center">&a[0]</td>        <td align="center">&p[0]</td>        <td align="center">p+0</td>        <td align="center">a+0</td>    </tr>    <tr>        <td align="center">a[1]</td>        <td align="center">p[1]</td>        <td align="center">*(p+1)</td>        <td align="center">*(a+1)</td>        <td align="center">&a[1]</td>        <td align="center">&p[1]</td>        <td align="center">p+1</td>        <td align="center">a+1</td>    </tr>    <tr>        <td align="center">a[2]</td>        <td align="center">p[2]</td>        <td align="center">*(p+2)</td>        <td align="center">*(a+2)</td>        <td align="center">&a[2]</td>        <td align="center">&p[2]</td>        <td align="center">p+2</td>        <td align="center">a+2</td>    </tr></table><p>【注意】</p><p>&emsp;&emsp;（1）指针变量和数组在访问数组中元素时，一定条件下其使用方法具有相同的形式，因为<strong>指针变量和数组名都是地址量</strong>。</p><p>&emsp;&emsp;（2）指针变量和数组的指针（或叫数组名）在<strong>本质上不同</strong>，<strong>指针变量是地址变量</strong>，而<strong>数组的指针是地址常量</strong>。例如<code>p++, p-- (正确); a++, a--(错误)</code>。</p><h2 id="2-指针与二维数组"><a href="#2-指针与二维数组" class="headerlink" title="2.指针与二维数组"></a><font size=3>2.指针与二维数组</font></h2><h3 id="2-1列指针遍历二维数组"><a href="#2-1列指针遍历二维数组" class="headerlink" title="2.1列指针遍历二维数组"></a><font size=3>2.1列指针遍历二维数组</font></h3><p>&emsp;&emsp;在<code>C语言中</code>二维数组的元素连续存储，按行优先存储，所以自然可以使用一级指针来进行访问。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]  = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> *p = a[<span class="number">0</span>]; <span class="comment">/* 不能直接写 int *p = a;这样类型不匹配，会有警告 */</span></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;a[%d][%d]=%d,&amp;a[%d][%d]=%p | &quot;</span>,i, j, a[i][j], i, j, &amp;a[i][j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*(p+%d)=%d,p+%d=%p\n&quot;</span>,i * <span class="number">3</span> + j, *(p + i * <span class="number">3</span> + j), i * <span class="number">3</span> + j, p + i * <span class="number">3</span> + j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220204155825156.png" alt="image-20220204155825156" style="zoom: 67%;" /><p>&emsp;&emsp;从例子中可以看出，一级指针<code>p</code>移动了<code>6</code>个数，到达<code>p + 5</code>时，将<code>a[2][3]</code>中的<code>6</code>个数访问完毕，相当于移动了<code>6</code>列，因此一级指针<code>p</code>也叫作<strong>列指针</strong>。</p><p>【注意】<code>int *p= a[0];  /* 列指针的定义法 */</code></p><h3 id="2-2行指针遍历二维数组"><a href="#2-2行指针遍历二维数组" class="headerlink" title="2.2行指针遍历二维数组"></a><font size=3>2.2行指针遍历二维数组</font></h3><ul><li>行指针的概念</li></ul><p>&emsp;&emsp;在学习二维数组时，我们就知道二维数组可以看做是多个一维数组，对于<code>a[2][3]</code>来说，有如下表格中理解：</p><table>    <tr>        <td align="center" colspan="3">行名(代表了地址)</td>        <td align="center" colspan="3">每行元素</td>    </tr>    <tr>        <td align="center">a</td>        <td align="center">a[0]</td>        <td align="center">&a[0][0]</td>        <td align="center">a[0][0]</td>        <td align="center">a[0][1]</td>        <td align="center">a[0][2]</td>    </tr>    <tr>        <td align="center">a + 1</td>        <td align="center">a[1]</td>        <td align="center">&a[1][0]</td>        <td align="center">a[1][0]</td>        <td align="center">a[1][1]</td>        <td align="center">a[1][2]</td>    </tr></table><p>&emsp;&emsp;在指针与一维数组中我们知道**<code>a[i], p[i], *(p+i), *(a+i)四者等价;&amp;a[i], &amp;p[i], p+i, a+i四者等价</code>**，所以类似的有：</p><table>    <tr>        <td align="center" colspan="4">行名(代表了地址)</td>        <td align="center" colspan="3">每行元素地址</td>    </tr>    <tr>        <td align="center">第1行</td>        <td align="center">a</td>        <td align="center">a[0] &hArr; *(a + 0)</td>        <td align="center">&a[0][0]</td>        <td align="center">a[0][0]</td>        <td align="center">a[0][1]</td>        <td align="center">a[0][2]</td>    </tr>    <tr>        <td align="center">第2行</td>        <td align="center">a + 1</td>        <td align="center">a[1] &hArr; *(a + 1)</td>        <td align="center">&a[1][0]</td>        <td align="center">a[1][0]</td>        <td align="center">a[1][1]</td>        <td align="center">a[1][2]</td>    </tr></table><p>&emsp;&emsp;所以，第2行第2列的元素就可以表示为:</p><table>    <tr>        <td align="center">a[1][1] &hArr; *(&a[1][0] + 1) &hArr; *(a[1] + 1) &hArr; *(*(a + 1) + 1)</td>    </tr></table><p>&emsp;&emsp;上边的<code>a[0]、a[1]</code>代表了行地址，但是与一维数组名一样，是地址常量。指针变量存储的是地址，那么存储行地址的指针变量，被称之为<strong>行指针</strong>。</p><ul><li>行指针的定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;存储类型&gt; &lt;数据类型&gt; (*&lt;指针变量名&gt;)[表达式] ; </span><br></pre></td></tr></table></figure><p>【注意】</p><p>（1）存储类型指的是<code>auto, register, static, extern</code>，若省略，则默认为<code>auto</code>。</p><p>（2）赋值时要注意定义为行指针的指针变量才可以直接将数组名赋值给指针变量，否则会有警告。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]; </span><br><span class="line"><span class="keyword">int</span> *q = a;       <span class="comment">/* 会报警告*/</span></span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">3</span>] = a;  <span class="comment">/* 正确方式*/</span></span><br></pre></td></tr></table></figure><ul><li>行指针使用</li></ul><p>若有<code>int a[2][3]; int (*p) = a; </code>则有</p><table>    <tr>        <td align="center" style="font-weight: bold; color:red;">a[i][j] &hArr; *(&a[i][0] + j) &hArr; *(a[i] + j) &hArr; *(*(a + i) + j)</td>    </tr>    <tr>        <td align="center" style="font-weight: bold; color:blue;">p[i][j] &hArr; *(&p[i][0] + j) &hArr; *(p[i] + j) &hArr; *(*(p + i) + j)</td>    </tr></table><h3 id="2-3行指针与列指针"><a href="#2-3行指针与列指针" class="headerlink" title="2.3行指针与列指针"></a><font size=3>2.3行指针与列指针</font></h3><p>&emsp;&emsp;对于<code>int a[2][3]  = &#123;&#123;0, 1, 2&#125;, &#123;3, 4, 5&#125;&#125;;</code>定义的二维数组有</p><table>    <tr>        <td align="center">指针类型</td>        <td align="center">表示形式</td>        <td align="center">说明</td>    </tr>    <tr>        <td align="center" rowspan="2">行指针</td>        <td align="center">a 或 a + 0</td>        <td align="left">指向第0行</td>    </tr>    <tr>        <td align="center">a + 1</td>        <td align="left">指向第1行</td>    </tr>    <tr>        <td align="center" rowspan="6">列指针</td>        <td align="center">a[0]</td>        <td align="left">是一维数组的名称，也是整个数组的首地址。<br>第0行第1个元素(a[0][0])的地址。</td>    </tr>    <tr>        <td align="center">a[0] + 1</td>        <td align="left">第0行第2个元素(a[0][1])的地址</td>    </tr>    <tr>        <td align="center">a[0] + 2</td>        <td align="left">第0行第3个元素(a[0][2])的地址</td>    </tr>    <tr>        <td align="center">a[1]</td>        <td align="left">第1行第1个元素(a[1][0])的地址</td>    </tr>    <tr>        <td align="center">a[1] + 1</td>        <td align="left">第1行第2个元素(a[1][1])的地址</td>    </tr>    <tr>        <td align="center">a[1] + 2</td>        <td align="left">第1行第3个元素(a[1][2])的地址</td>    </tr></table><p>&emsp;&emsp;可以将<strong>列指针理解为行指针的具体元素，行指针理解为列指针的地址。</strong>那么他们的具体关系就可以这样表示：</p><table>    <tr>        <td align="center">*行指针 &rArr; 列指针</td>    </tr>    <tr>        <td align="center">&列指针 &rArr; 行指针</td>    </tr></table><p>&emsp;&emsp;一般来说我们都是定义行指针，再转换为列指针进而访问数组具体元素，所以这里只写一个行指针转换为列指针的列子，列指针转行指针应该属于一个逆运算，但是意义好像不大，也基本没有遇到过。</p><table>    <tr>        <td align="center">行指针&rArr;列指针</td>        <td align="center">列指针等价表示</td>        <td align="center">指向内容</td>        <td align="center">指向内容的等价表示</td>        <td align="center">数组表示</td>    </tr>    <tr>        <td align="center">a &rArr; *a</td>        <td align="center">a[0]</td>        <td align="center">*a[0]</td>        <td align="center">*(*a)</td>        <td align="center">a[0][0]</td>    </tr>    <tr>        <td align="center">a+1 &rArr; *(a+1)</td>        <td align="center">a[1]</td>        <td align="center">*a[1]</td>        <td align="center">*(*(a+1))</td>        <td align="center">a[1][0]</td>    </tr></table>## <font size=3>3.指针数组</font><h3 id="3-1指针数组的定义"><a href="#3-1指针数组的定义" class="headerlink" title="3.1指针数组的定义"></a><font size=3>3.1指针数组的定义</font></h3><p>&emsp;&emsp;<strong>指针数组</strong>是指由若干个具有<strong>相同存储类型和数据类型</strong>的<strong>指针变量</strong>构成的<strong>集合</strong>，也就是说这个数组中的每个元素都是同类型的指针变量。</p><p>一般声明形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;存储类型&gt;  &lt;数据类型&gt;  *&lt;指针数组名&gt;[&lt;指针数组大小&gt;];</span><br></pre></td></tr></table></figure><p>【注意】<strong>指针数组名</strong>表示该指针数组的<strong>起始地址</strong>。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *pa[<span class="number">2</span>]; <span class="comment">/* 定义了一个长度为 2 的 int 型指针数组*/</span></span><br><span class="line"><span class="keyword">char</span> *pb[<span class="number">6</span>];<span class="comment">/* 定义了一个长度为 6 的 char 型指针数组*/</span></span><br></pre></td></tr></table></figure><p>但是其实写成下边这种形式可能会更好理解一些，看个人吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pa[<span class="number">2</span>]; <span class="comment">/* 定义了一个长度为 2 的 int 型指针数组*/</span></span><br><span class="line"><span class="keyword">char</span> * pb[<span class="number">6</span>];<span class="comment">/* 定义了一个长度为 6 的 char 型指针数组*/</span></span><br></pre></td></tr></table></figure><p>可以这样理解，对于<code>int * pa[2];</code>来说，是声明了一个<code>int</code>类型的一维数组<code>pa[2]</code>，它包含了两个元素，每个元素都是一个<code>int</code>类型的指针。</p><h3 id="3-2指针数组的初始化"><a href="#3-2指针数组的初始化" class="headerlink" title="3.2指针数组的初始化"></a><font size=3>3.2指针数组的初始化</font></h3><table>    <tr>        <td align="center" width=300px>初始化写法</td>        <td align="center" width=300px>等价写法(赋值)</td>    </tr>    <tr>        <td align="left">int a = 10;<br>            int b = 20;<br>            int * p[2] = {&a, &b};</td>        <td align="left">int a = 10;<br>            int b = 20;<br>            int * p[2];<br>            p[0] = &a;<br>            p[1] = &b;<br>        </td>    </tr></table><h3 id="3-3指针数组的存储空间"><a href="#3-3指针数组的存储空间" class="headerlink" title="3.3指针数组的存储空间"></a><font size=3>3.3指针数组的存储空间</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> * p[<span class="number">2</span>] = &#123;&amp;a, &amp;b&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p=%p,&amp;p=%p,&amp;p[0]=%p,&amp;p[1]=%p\n&quot;</span>, p, &amp;p, &amp;p[<span class="number">0</span>],&amp;p[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,&amp;a=%p,p[0]=%p,*p[0]=%d\n&quot;</span>, a, &amp;a, p[<span class="number">0</span>], *p[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b=%d,&amp;b=%p,p[1]=%p,*p[1]=%d\n&quot;</span>, b, &amp;b, p[<span class="number">1</span>], *p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220204190231704.png" alt="image-20220204190231704" style="zoom:67%;" /><p>由程序结果可知变量在内存中存储如下图所示：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220204195558425.png" alt="image-20220204195558425" style="zoom: 50%;" /><p>【注意】图中红色的两个地址之间是有<code>8Byte</code>的空间，类型明明是<code>int</code>，应该是<code>4</code>个字节才对吧，又怎么会这样呢？在介绍指针的的时候说过，<strong>指针变量所占空间是固定的，在<code>32</code>位系统中就是<code>4</code>个字节，而在<code>64</code>位系统中则是<code>8</code>个字节</strong>，由于这里是<code>64</code>位系统，所以指针数组名加<code>1</code>，就会移动<code>8</code>个字节。</p><h3 id="3-4指针数组的数组名"><a href="#3-4指针数组的数组名" class="headerlink" title="3.4指针数组的数组名"></a><font size=3>3.4指针数组的数组名</font></h3><p>&emsp;&emsp;对于指针数组的数组名，它代表了指针数组的起始地址。由于数组元素已经是指针了，而数组名又是数组首元素的地址，因此指针数组名就是指针数组中<strong>首个指针元素的地址</strong>，所以指针数组名是一个<strong>多级指针</strong>，具体来说就是一个二级指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> * p[<span class="number">2</span>] = &#123;&amp;a, &amp;b&#125;;</span><br><span class="line">    <span class="keyword">int</span> * *q;</span><br><span class="line"></span><br><span class="line">    q = p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(p)=%ld,sizeof(q)=%ld\n&quot;</span>,<span class="keyword">sizeof</span>(p), <span class="keyword">sizeof</span>(q));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;q=%p,&amp;q=%p,&amp;q[0]=%p,&amp;q[1]=%p\n&quot;</span>, q, &amp;q, &amp;p[<span class="number">0</span>],&amp;q[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p=%p,&amp;p=%p,&amp;p[0]=%p,&amp;p[1]=%p\n&quot;</span>, p, &amp;p, &amp;p[<span class="number">0</span>],&amp;p[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,&amp;a=%p,p[0]=%p,*p[0]=%d,**p=%d\n&quot;</span>, a, &amp;a, p[<span class="number">0</span>], *p[<span class="number">0</span>], **p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b=%d,&amp;b=%p,p[1]=%p,*p[1]=%d,**(p+1)=%d\n&quot;</span>, b, &amp;b, p[<span class="number">1</span>], *p[<span class="number">1</span>], **(p+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220204203431783.png" alt="image-20220204203431783" style="zoom:67%;" /><p>【注意】</p><p>&emsp;&emsp;（1）从另一个方面理解，在一维数组中我们知道**<code>a[i], p[i], *(p+i), *(a+i)四者等价</code>**，所以直接将<code> p[i]替换为*(p+i)</code>那么也可以得到上边的结果。</p><p>&emsp;&emsp;（2）通过<code>sizeof(指针数组名)</code>可以求得指针数组占据的总空间，而每个元素所占空间与系统相关。</p><h3 id="3-5指针数组与二维数组"><a href="#3-5指针数组与二维数组" class="headerlink" title="3.5指针数组与二维数组"></a><font size=3>3.5指针数组与二维数组</font></h3><p>&emsp;&emsp;考虑到二维数组可以通过行指针来访问，这样的话通过指针数组来存储二维数组的行指针，那么这样就可以通过指针数组遍历二维数组了。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220204204857551.png" alt="image-20220204204857551" style="zoom:67%;" /><ul><li>通过指针数组遍历二维数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a [<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> * p[<span class="number">2</span>] = &#123;a[<span class="number">0</span>], a[<span class="number">1</span>]&#125;;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;a[%d][%d]=%d,p[%d][%d]=%d,&quot;</span>, i, j, a[i][j], i, j, p[i][j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*(p[%d] + %d)=%d,*(*(p + %d) + %d)=%d\n&quot;</span>, i, j, *(p[i] + j), i, j, *(*(p + i) + j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220204210115901.png" alt="image-20220204210115901" style="zoom:67%;" /><h1 id="三、指针与字符串"><a href="#三、指针与字符串" class="headerlink" title="三、指针与字符串"></a><font size=3>三、指针与字符串</font></h1><h2 id="1-字符指针变量的概念"><a href="#1-字符指针变量的概念" class="headerlink" title="1.字符指针变量的概念"></a><font size=3>1.字符指针变量的概念</font></h2><p>&emsp;&emsp;<code>C语言</code>通过使用字符数 组来处理字符串，<code>char</code>数据类型的指针变量称为<strong>字符指针变量</strong>。字符指针变量与字符数组有着密切关系，它也被用来处理字符串。</p><h2 id="2-字符指针变量的赋值"><a href="#2-字符指针变量的赋值" class="headerlink" title="2.字符指针变量的赋值"></a><font size=3>2.字符指针变量的赋值</font></h2><ul><li>指向字符数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[] = <span class="string">&quot;strings&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *p = str;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样的赋值方式是将字符指针变量<code>p</code>指向数组<code>str</code>的首地址，即将字符串的首地址赋予指针，并不是把该字符串复制到指针中。</p><ul><li>指向字符串常量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *p = <span class="string">&quot;string&quot;</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样的赋值方式是将一个<strong>字符串常量</strong>的首地址赋给指针变量<code>p</code>，这样的赋值方式会使指针指向对象的值不能被修改，例如<code>*p =  &#39;S&#39;;</code>这将导致程序报错，原因就在于字符串常量不能被修改。</p><h1 id="四、多级指针"><a href="#四、多级指针" class="headerlink" title="四、多级指针"></a><font size=3>四、多级指针</font></h1><h2 id="1-多级指针的概念"><a href="#1-多级指针的概念" class="headerlink" title="1.多级指针的概念"></a><font size=3>1.多级指针的概念</font></h2><p>&emsp;&emsp;把一个<strong>指向指针变量</strong>的<strong>指针变量</strong>，称为多级指针变量。</p><p>&emsp;&emsp;对于<strong>指向处理数据</strong>的<strong>指针变量</strong>称为一级指针变量，简称一级指针。</p><p>&emsp;&emsp;把<strong>指向一级指针变量</strong>的<strong>指针变量</strong>称为二级指针变量，简称二级指针。</p><h2 id="2-二-多-级指针的声明"><a href="#2-二-多-级指针的声明" class="headerlink" title="2.二(多)级指针的声明"></a><font size=3>2.二(多)级指针的声明</font></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;存储类型&gt; &lt;数据类型&gt; ** &lt;指针名&gt;; <span class="comment">/* 几级指针就写几个* 号*/</span></span><br></pre></td></tr></table></figure><p>【注意】</p><p>（1）指针变量也是一种变量，也会占用存储空间，也可以使用<code>&amp;</code>获取它的地址。</p><p>（2）<code>C语言</code>不限制指针的级数，**每增加一级指针，在定义指针变量时就得增加一个星号<code>*</code>**。实际开发中会经常使用一级指针和二级指针，几乎用不到高级指针。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;  <span class="comment">/* 定义了一个整型变量 a */</span></span><br><span class="line"><span class="keyword">int</span> *p1;     <span class="comment">/* 定义了一个一级整型指针变量 p1 */</span></span><br><span class="line"><span class="keyword">int</span> **p2;    <span class="comment">/* 定义了一个二级整型指针变量 p2 */</span></span><br><span class="line"><span class="keyword">int</span> ***p3;   <span class="comment">/* 定义了一个三级整型指针变量 p3 */</span></span><br><span class="line"><span class="keyword">int</span> ****p4;  <span class="comment">/* 定义了一个四级整型指针变量 p4 */</span></span><br></pre></td></tr></table></figure><h2 id="3-二-多-级指针的初始化"><a href="#3-二-多-级指针的初始化" class="headerlink" title="3.二(多)级指针的初始化"></a><font size=3>3.二(多)级指针的初始化</font></h2><table>    <tr>        <td align="center" width=300px>初始化写法</td>        <td align="center" width=300px>等价写法(赋值)</td>    </tr>    <tr>        <td align="left">            int a = 10;<br>            int *p1 = &a;<br>            int **p2 = &p1;<br>            int ***p3 = &p2;<br>            int ****p4 = &p3;        </td>        <td align="left">            int a = 10;<br>            int *p1;<br>            int **p2;<br>            int ***p3;<br>            int ****p4;<br>            p1 = &a;<br>            p2 = &p2;<br>            p3 = &p3;<br>            p4 = &p4;<br>        </td>    </tr></table><p>【注意】指针变量的初始化或者赋值，后边一定要是<strong>地址</strong>。</p><p>【说明】</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220206154923623.png" alt="image-20220206154923623" style="zoom:50%;" /><p>&emsp;&emsp;上边初始化的部分，定义了一个整型变量<code>a</code>，然后定义了一个一级指针变量<code>p1</code>，指针变量<code>p1</code>中存放的数据是整型变量<code>a</code>的地址；又定义了一个二级指针变量<code>p2</code>，<code>p2</code>中存放的是<code>p1</code>的地址；又定义了一个指针变量<code>p3</code>，里边存放的是<code>p2</code>的地址；再后面又定义了一个四级指针变量<code>p4</code>，里边存放的是<code>p3</code>的地址。</p><h2 id="4-二-多-级指针的引用"><a href="#4-二-多-级指针的引用" class="headerlink" title="4.二(多)级指针的引用"></a><font size=3>4.二(多)级指针的引用</font></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">** &lt;指针名&gt;; <span class="comment">/* 几级指针就写几个* 号*/</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过上一节的多级指针初始化的分析可知，多级指针存放的都是地址，而<code>*</code>号可以取出地址中的数据，详细的使用情况可看下一节多级指针的存储空间的介绍。</p><h2 id="5-多级指针的存储空间"><a href="#5-多级指针的存储空间" class="headerlink" title="5.多级指针的存储空间"></a><font size=3>5.多级指针的存储空间</font></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *p1 = &amp;a;</span><br><span class="line">    <span class="keyword">int</span> **p2 = &amp;p1;</span><br><span class="line">    <span class="keyword">int</span> ***p3 = &amp;p2;</span><br><span class="line">    <span class="keyword">int</span> ****p4 = &amp;p3;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,&amp;a=%p\n&quot;</span>, a, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p1=%d,p1=%p,&amp;p1=%p\n&quot;</span>, *p1, p1, &amp;p1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**p2=%d,*p2=%p,p2=%p,&amp;p2=%p\n&quot;</span>, **p2, *p2, p2, &amp;p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***p3=%d,**p3=%p,*p3=%p,p3=%p,&amp;p3=%p\n&quot;</span>, ***p3, **p3, *p3, p3, &amp;p3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;****p4=%d,***p4=%p,**p4=%p,*p4=%p,p4=%p,&amp;p4=%p\n&quot;</span>, ****p4, ***p4, **p4, *p4, p4, &amp;p4);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220206165514337.png" alt="image-20220206165514337" style="zoom:67%;" /><p>由上图分析可得各级指针在内存中情况如下：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220206172020146.png" alt="image-20220206172020146" style="zoom:67%;" /><p>【注意】</p><p>&emsp;&emsp;（1）相邻红色的地址编号相差都为<code>8</code>，这是因为二级、三级和四级指针中存储的都是指针变量，而在<code>64</code>位系统中指针变量所占空间为<code>8</code>个字节，所以就出现了上边的情况。</p><p>&emsp;&emsp;（2）<code>*</code>号是自右向左结合，所以引用多级指针的时候的时候可以这样理解：<br>$$<br>\begin{flalign}<br>****p4 = ***(*p4) = ***p3 = **(*p3) = **p2 = *(*p2) = *p1 = 10 \<br>***p3 = **(*p3) = **p2 = *(*p2) = *p1 = 10 \<br>**p2 = *(*p2) = *p1 = 10 \<br>*p1 = 10<br>\end{flalign}<br>$$</p><h2 id="6-多级指针的运算"><a href="#6-多级指针的运算" class="headerlink" title="6.多级指针的运算"></a><font size=3>6.多级指针的运算</font></h2><p>&emsp;&emsp;总的来说，多级指针也是指针，符合一级指针的运算规则。指针变量加1，是向地址大的方向移动一个目标数据。类似，多级指针运算也是以其<strong>目标变量</strong>为单位进行偏移。</p><p>比如，<code>int **p;p++;</code>移动一个<code>int *</code>变量所占的内存空间。再比如<code>int ***p;p++</code>移动一个<code>int **</code>所占的内存空间。</p><p>&emsp;&emsp;其实多级指针中存放的都是指针变量，除了一级指针，多级指针移动时，移动的都是一个指针变量的大小，在<code>32</code>位系统中是<code>4</code>个字节，在<code>64</code>位系统中是<code>8</code>个字节。</p><h1 id="五、函数指针"><a href="#五、函数指针" class="headerlink" title="五、函数指针"></a><font size=3>五、函数指针</font></h1><p>&emsp;&emsp;为了汇总，这里需要使用函数的概念，函数的详情可以看下一章。</p><h2 id="1-函数指针的定义"><a href="#1-函数指针的定义" class="headerlink" title="1.函数指针的定义"></a><font size=3>1.函数指针的定义</font></h2><p>&emsp;&emsp;如果在程序中定义了一个函数，那么在编译时系统就会为这个函数代码<strong>分配一段存储空间，这段存储空间的首地址称为这个函数的地址</strong>。<strong>函数名表示的就是这个地址</strong>。通过指针的概念，我们知道既然是地址，那么就可以定义一个指针变量来存放，这个<strong>指针变量</strong>就叫作函数指针变量，简称<strong>函数指针</strong>。</p><h2 id="2-函数指针的声明"><a href="#2-函数指针的声明" class="headerlink" title="2.函数指针的声明"></a><font size=3>2.函数指针的声明</font></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;数据类型&gt; (*&lt;函数指针名称&gt;) (&lt;参数说明列表&gt;);</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=200px>数据类型</td>        <td align="left">函数指针所指向的函数的返回值类型</td>    </tr>    <tr>        <td align="center" width=200px>（*<函数指针名称>）</td>        <td align="left">*说明为指针()不可缺省，表明为函数的指针</td>    </tr>    <tr>        <td align="center" width=200px>参数说明列表</td>        <td align="left">应该与函数指针所指向的函数的形参说明保持一致</td>    </tr></table><p>【注意】<strong>指向函数的指针变量没有 <code>++</code> 和 <code>--</code> 运算</strong>。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>);</span><br></pre></td></tr></table></figure><p>这个语句定义了一个指向函数的指针变量 <code>p</code>:</p><p>&emsp;&emsp;（1）它是一个<strong>指针变量</strong>，所以要有一个<code>*</code>，即（<code>*p</code>）；</p><p>&emsp;&emsp;（2）前面的 <code>int</code> 表示这个指针变量可以<strong>指向返回值类型为 <code>int</code> 型的函数</strong>；</p><p>&emsp;&emsp;（3）括号中的两个 <code>int</code> 表示这个指针变量可以<strong>指向有两个参数且都是 <code>int</code> 型的函数</strong>。</p><p>所以总体来说，这个语句的意思就是：定义了一个指针变量 <code>p</code>，该指针变量可以指向返回值类型为<code>int</code>型，且有两个整型参数的函数。<code>p</code> 的类型为 <code>int (*)(int，int)</code>。</p><h2 id="3-函数指针的使用"><a href="#3-函数指针的使用" class="headerlink" title="3.函数指针的使用"></a><font size=3>3.函数指针的使用</font></h2><h3 id="3-1函数指针初始化"><a href="#3-1函数指针初始化" class="headerlink" title="3.1函数指针初始化"></a><font size=3>3.1函数指针初始化</font></h3><p>前边需要有一个函数的声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>; <span class="comment">/* 函数声明 */</span></span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=300px>初始化写法</td>        <td align="center" width=300px>等价写法(赋值)</td>    </tr>    <tr>        <td align="left">            int (*p)(int, int) = sum;        </td>        <td align="left">            int (*p)(int, int);<br>            p = sum;        </td>    </tr></table><h3 id="3-2函数指针的调用"><a href="#3-2函数指针的调用" class="headerlink" title="3.2函数指针的调用"></a><font size=3>3.2函数指针的调用</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &lt;变量名&gt; = ] (*&lt;函数指针名称&gt;)(&lt;实际传入参数说明列表&gt;);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 提前定义的函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>; <span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="comment">/* --------------------------------------------------  */</span></span><br><span class="line"><span class="comment">/* 主程序中函数指针的操作 */</span></span><br><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>) = sum;  <span class="comment">/* 定义一个函数指针 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,(*p)(a, b)=%d\n&quot;</span>, a, b, (*p)(a, b));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* --------------------------------------------------  */</span></span><br><span class="line"><span class="comment">/* 或者 */</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>) = sum;  <span class="comment">/* 定义一个函数指针 */</span></span><br><span class="line">c = (*p)(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,c=%d\n&quot;</span>, a, b, c);</span><br></pre></td></tr></table></figure><h2 id="4-函数指针的存储空间"><a href="#4-函数指针的存储空间" class="headerlink" title="4.函数指针的存储空间"></a><font size=3>4.函数指针的存储空间</font></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>; <span class="comment">/* 函数声明 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>) = sum;  <span class="comment">/* 定义一个函数指针 */</span></span><br><span class="line">    c = (*p)(a, b);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,c=%d\n&quot;</span>, a, b, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a=%p,&amp;b=%p,&amp;c=%p\n&quot;</span>, &amp;a, &amp;b,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;sum=%p,p=%p,&amp;p=%p\n&quot;</span>, sum, p, &amp;p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220207104831017.png" alt="image-20220207104831017" style="zoom:67%;" /><p>由上图分析可以得到函数和函数指针在内存中的分布如下图：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-06-C-Language/image-20220207105826214.png" alt="image-20220207105826214" style="zoom:50%;" /><h2 id="5-函数指针数组"><a href="#5-函数指针数组" class="headerlink" title="5.函数指针数组"></a><font size=3>5.函数指针数组</font></h2><ul><li>定义</li></ul><p>&emsp;&emsp;函数指针数组是一个保存若干个函数名的数组，一般形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;数据类型&gt; (*&lt;函数指针数组名称&gt; [&lt;大小&gt;] )(&lt;参数说明列表&gt; );</span><br></pre></td></tr></table></figure><p>其中，&lt;大小&gt;是指函数指针数组元数的个数，其它同普通的函数指针。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*pFunction[<span class="number">3</span>])(<span class="keyword">int</span>, <span class="keyword">int</span>);</span><br></pre></td></tr></table></figure><p>以上语句定义了一个指针数组 <code>pFunction</code>，该指针数组的元素都是<code>int</code>型函数指针，可以指向返回值类型为<code>int</code>型，且有两个整型参数的函数。</p><ul><li>使用</li></ul><p>与指针数组一致，这里不再详述。</p><h1 id="六、指针定义总结"><a href="#六、指针定义总结" class="headerlink" title="六、指针定义总结"></a><font size=3>六、指针定义总结</font></h1><h2 id="int-p"><a href="#int-p" class="headerlink" title="int p;"></a><font size=3><code>int p;</code></font></h2><p>&emsp;&emsp;这是一个普通的整型变量</p><h2 id="int-p-1"><a href="#int-p-1" class="headerlink" title="int *p;"></a><font size=3><code>int *p;</code></font></h2><p>&emsp;&emsp;首先从 <code>p</code> 处开始，先与 <code>*</code> 结合，所以说明<code> p</code> 是一个指针, 然后再与<code>int</code> 结合, 说明指针所指向的内容的类型为 <code>int</code> 型。所以 <code>p</code> 是一个<strong>返回整型数据的指针</strong>。</p><h2 id="int-p-2"><a href="#int-p-2" class="headerlink" title="int **p;"></a><font size=3><code>int **p;</code></font></h2><p>&emsp;&emsp;首先从 <code>p</code> 开始, 先与 <code>*</code> 结合, 说是 <code>p </code>是一个指针, 然后再与 <code>* </code>结合, 说明指针所指向的元素是指针, 然后再与 <code>int</code> 结合, 说明该指针所指向的元素是整型数据，所以<code>p</code>是一个<strong>二级指针，指向整型数据</strong>。</p><h2 id="int-p-3"><a href="#int-p-3" class="headerlink" title="int p[3];"></a><font size=3><code>int p[3];</code></font></h2><p>&emsp;&emsp;首先从 <code>p</code> 处开始，先与 <code>[] </code>结合，说明 <code>p</code> 是一个数组, 然后与 <code>int</code> 结合, 说明数组里的元素是整型的, 所以 <code>p</code> 是一个由整型数据组成的<strong>数组</strong>。</p><h2 id="int-p-3-1"><a href="#int-p-3-1" class="headerlink" title="int *p[3];"></a><font size=3><code>int *p[3];</code></font></h2><p>&emsp;&emsp;首先从 <code>p</code> 处开始, 先与<code>[]</code>结合，因为其优先级比<code> *</code> 高,所以<code>p</code>是一个数组, 然后再与<code>*</code>结合, 说明数组里的元素是指针类型, 然后再与 int 结合, 说明指针所指向的内容的类型是整型的, 所以 <code>p </code>是一个由<strong>返回整型数据的指针所组成的数组</strong>。</p><h2 id="int-p-3-2"><a href="#int-p-3-2" class="headerlink" title="int (*p)[3];"></a><font size=3><code>int (*p)[3];</code></font></h2><p>&emsp;&emsp;首先从 <code>p</code> 处开始, 先与 <code>*</code> 结合,说明 <code>p</code> 是一个指针然后再与<code> []</code> 结合(与”()”这步可以忽略,只是为了改变优先级), 说明指针所指向的内容是一个数组, 然后再与<code>int</code> 结合, 说明数组里的元素是整型的。所以<code>p</code>是一个<strong>指向由整型数据组成的数组的指针</strong>。</p><h2 id="int-p-int"><a href="#int-p-int" class="headerlink" title="int p(int);"></a><font size=3><code>int p(int);</code></font></h2><p>&emsp;&emsp;从 <code>p</code> 处起,先与 <code>() </code>结合, 说明 <code>p</code> 是一个函数, 然后进入<code>()</code>里分析, 说明该函数有一个整型变量的参数, 然后再与外面的<code> int</code> 结合, 说明<strong>函数的返回值是一个整型数据</strong>。</p><h2 id="int-p-int-1"><a href="#int-p-int-1" class="headerlink" title="int (*p)(int);"></a><font size=3><code>int (*p)(int);</code></font></h2><p>&emsp;&emsp;从 <code>p </code>处开始, 先与指针结合, 说明<code>p</code>是一个指针, 然后与<code>()</code>结合, 说明指针指向的是一个函数, 然后再与<code>()</code>里的<code>int</code>结合, 说明函数有一个<code>int</code> 型的参数, 再与最外层的 int 结合, 说明函数的返回类型是整型, 所以<code>p</code>是一个<strong>指向有一个整型参数且返回类型为整型的函数的指针</strong>。</p><h2 id="int-p-3-int-int"><a href="#int-p-3-int-int" class="headerlink" title="int (*p[3])(int, int);"></a><font size=3><code>int (*p[3])(int, int);</code></font></h2><p>&emsp;&emsp;首先从<code> p</code> 处开始, 先与 <code>[] </code>结合，因为其优先级比 <code>*</code> 高,所以 <code>p</code> 是一个数组,然后再与 <code>* </code>结合, 说明数组里的元素是指针类型,然后与<code>()</code>结合, 说明指针指向的是一个函数, 然后再与<code>()</code>里的<code>int</code>结合, 说明函数有两个<code>int </code>型的参数, 再与最外层的 <code>int </code>结合, 说明函数的返回类型是整型, 所以 <code>p</code> 是一个指向有两个整型参数且返回类型为整型的<strong>函数的指针数组</strong>。</p><h2 id="int-p-int-3"><a href="#int-p-int-3" class="headerlink" title="int *(*p(int))[3];"></a><font size=3><code>int *(*p(int))[3];</code></font></h2><p>&emsp;&emsp;从 <code>p</code> 开始,先与 <code>()</code> 结合, 说明 <code>p</code> 是一个函数, 然后进入 <code>()</code> 里面, 与<code> int</code> 结合, 说明函数有一个整型变量参数, 然后再与外面的<code>*</code>结合, 说明函数返回的是一个指针, 然后到最外面一层, 先与<code>[]</code>结合, 说明返回的指针指向的是一个数组, 然后再与<code>*</code>结合, 说明数组里的元素是指针, 然后再与<code>int</code>结合, 说明指针指向的内容是整型数据。所以<code>p</code>是一个<strong>参数为一个整数据且返回一个指向由整型指针变量组成的数组的指针变量的函数</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】LV1-05-C语言-5数组与字符串</title>
      <link href="post/582937ae.html"/>
      <url>post/582937ae.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是记录<code>C语言</code>笔记——数组与字符串。</p><span id="more"></span><h1 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a><font size=3>一、数组</font></h1><p>&emsp;&emsp;数组是<strong>构造数据类型</strong>之一，是具有一定顺序关系的若干个<strong>变量</strong>的<strong>集合</strong>，组成数组的各个变量称为数组的<strong>元素</strong>，数组中各元素的<strong>数据类型要求相同</strong>，用<strong>数组名</strong>和<strong>下标</strong>确定。数组可以是一维的，也可以是多维的。</p><h2 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1.一维数组"></a><font size=3>1.一维数组</font></h2><h3 id="1-1一维数组定义"><a href="#1-1一维数组定义" class="headerlink" title="1.1一维数组定义"></a><font size=3>1.1一维数组定义</font></h3><ul><li>概念</li></ul><p>&emsp;&emsp;一维数组是指<strong>只有一个下标</strong>的数组。它在计算机的内存中是<strong>连续存储</strong>的。</p><ul><li>一维数组声明</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">storage_type data_type array_name[ array_size ];</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=100px>storage_type</td>        <td align="left">存储类型（可以说明也可以不说明）</td>    </tr>    <tr>        <td align="center" width=100px>data_type</td>        <td align="left">任意有效的 C 数据类型（必须说明）</td>    </tr>    <tr>        <td align="center" width=100px>array_name</td>        <td align="left">数组名称（必须说明）</td>    </tr>    <tr>        <td align="center" width=100px>array_size</td>        <td align="left">数组长度（有些情况可以省略）</td>    </tr></table><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> m[<span class="number">12</span>];  <span class="comment">/* 定义一个长度为 12 的浮点型数组 */</span></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">9</span>];   <span class="comment">/* 定义一个长度为 9 的字符型数组 */</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1</span>];     <span class="comment">/* 定义一个长度为 9 的整型数组 */</span></span><br><span class="line"><span class="keyword">int</span> b[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">/* 定义了一个长度为3，且进行了初始化的整形数组 */</span></span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）数组必须<strong>先声明</strong>才能进行使用和赋值。</p><p>&emsp;&emsp;（2）<code>C语言</code>对数组<strong>不作越界检查</strong>，使用时要注意。</p><p>&emsp;&emsp;（3）用变量定义数组维数时，该变量必须提前告知。例如<code>int i = 6;int a[i];</code></p><p>&emsp;&emsp;（4）<code>sizeof(array_name)</code>可以获取整个一维数组所占据的字节数（<strong>等于元素个数x元素类型所占字节数</strong>）。</p><h3 id="1-2一维数组元素访问"><a href="#1-2一维数组元素访问" class="headerlink" title="1.2一维数组元素访问"></a><font size=3>1.2一维数组元素访问</font></h3><ul><li>访问格式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_name[index]  <span class="comment">/* 数组名[元素索引（也可以说是下标）] 索引从0开始 */</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(“%d”, a);          <span class="comment">/* （错误） 这种访问方式是错误的 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(“%d\t”, a[j]); <span class="comment">/* (正确) 这种情况才是正确的访问方式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）数组必须定义之后才能够访问。</p><p>&emsp;&emsp;（2）数组的元素只能逐个访问，不能一次性访问整个数组。</p><p>&emsp;&emsp;（3）下标可以是整型表达式或者常量。</p><ul><li>遍历一维数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i, n;</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过for循环来逐个访问 */</span></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">    <span class="built_in">printf</span>(“%d\t”, a[j]); <span class="comment">/* 逐个打印数组元素 */</span></span><br></pre></td></tr></table></figure><h3 id="1-3一维数组元素初始化"><a href="#1-3一维数组元素初始化" class="headerlink" title="1.3一维数组元素初始化"></a><font size=3>1.3一维数组元素初始化</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">/* 在声明数组时直接进行初始化 */</span></span><br><span class="line"><span class="keyword">int</span> b[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;           <span class="comment">/* 定义了一个长度为3，且进行了初始化的整形数组 */</span></span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）数组不初始化，其元素值为随机数</p><p>&emsp;&emsp;（2）对<code>static</code>数组元素不赋初值，系统会自动赋以<code>0</code>值</p><p>&emsp;&emsp;（3）只给部分数组元素赋初值，剩余元素自动赋值为<code>0</code>。</p><p>【说明】</p><table>    <tr>        <td align="center">数组声明形式</td>        <td align="center">等价写法</td>    </tr>    <tr>        <td align="left">static int a[3];</td>        <td align="left">static int a[3]; a[0] = 0;  a[1] = 0; a[2] = 0;</td>    </tr>    <tr>        <td align="left">int a[3] = {1, 2};</td>        <td align="left">int a[3]; a[0] = 1;  a[1] = 2; a[2] = 0;</td>    </tr>    <tr>        <td align="left">int a[] = {1, 2, 3}</td>        <td align="left">int a[3]; a[0] = 1;  a[1] = 2; a[2] = 3;<br> /* 编译系统根据初值个数确定数组维数 */</td>    </tr></table><h3 id="1-4一维数组的存储空间"><a href="#1-4一维数组的存储空间" class="headerlink" title="1.4一维数组的存储空间"></a><font size=3>1.4一维数组的存储空间</font></h3><p>&emsp;&emsp;数组是一个整体，它的<strong>内存是连续</strong>的，相邻元素地址相差 <code>data_type</code>所占字节长度。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[%d] = %p, a[%d] = %d\n&quot;</span>,i, &amp;a[i], i,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-05-C-Language/image-20220128110245590.png" alt="image-20220128110245590" style="zoom:67%;" /><p>&emsp;&emsp;<code>a[3]</code>在内存中的结构如下图所示，<code>a[3]</code>数组为<code>int</code>类型，在<code>64</code>位平台下占<code>4</code>个字节，所以相邻元素之间地址相差<code>4</code>。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-05-C-Language/image-20220128111357350.png" alt="image-20220128111357350" style="zoom: 67%;" /><h3 id="1-5一维数组的数组名"><a href="#1-5一维数组的数组名" class="headerlink" title="1.5一维数组的数组名"></a><font size=3>1.5一维数组的数组名</font></h3><p>&emsp;&emsp;一维数组的数组名代表了该数组的起始地址，可以通过该数名推出各个元素的地址，并通过指针（后边说，先提一下）进行访问。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %p\n&quot;</span>,a);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a + %d = %p, &amp;a[%d] = %p, a[%d] = %d\n&quot;</span>,i, a + i, i, &amp;a[i], i,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-05-C-Language/image-20220128112243966.png" alt="image-20220128112243966" style="zoom:67%;" /><p>【注意】数组名<strong>不可以进行自加自减</strong>运算。</p><h2 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2.二维数组"></a><font size=3>2.二维数组</font></h2><h3 id="2-1二维数组声明"><a href="#2-1二维数组声明" class="headerlink" title="2.1二维数组声明"></a><font size=3>2.1二维数组声明</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[ 常量表达式<span class="number">1</span> ][ 常量表达式<span class="number">2</span> ];</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]; <span class="comment">/* 定义了一个2行3列的二维数组 */</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;表示定义了一个<code>2行3列的二维数组</code>，元素共有<code>2x3=6</code>个（<code>元素个数 = 行数 x 列数</code>）。</p><p>【注意】</p><p>&emsp;&emsp;（1）声明时<strong>列数不能省略</strong>，**行数可以省略(定义时进行初始化，编译器可以判别出行数时)**。</p><p>&emsp;&emsp;（2）<code>sizeof(数组名)</code>可以获取整个二维数组所占据的字节数（<strong>等于元素个数x元素类型所占字节数</strong>）。</p><p>&emsp;&emsp;（3）2）<code>sizeof(行数组名)</code>可以获取二维数组某行所占据的字节数（<strong>等于该行元素个数x元素类型所占字节数</strong>）。</p><h3 id="2-2二维数组访问"><a href="#2-2二维数组访问" class="headerlink" title="2.2二维数组访问"></a><font size=3>2.2二维数组访问</font></h3><ul><li>访问格式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_name[row_index][col_index]  <span class="comment">/* 数组名[行索引][列索引] 行索引和列索引都是从0开始*/</span></span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=100px>storage_type</td>        <td align="left">存储类型（可以说明也可以不说明）</td>    </tr>    <tr>        <td align="center" width=100px>data_type</td>        <td align="left">任意有效的 C 数据类型（必须说明）</td>    </tr>    <tr>        <td align="center" width=100px>p_name</td>        <td align="left">指针变量名</td>    </tr></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(“%d\t”, a[i][j]); <span class="comment">/* (正确) 这种情况才是正确的访问方式 */</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>遍历二维数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="comment">/* 通过for循环进行逐个元素的访问 */</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)       <span class="comment">/* 行循环 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)  <span class="comment">/* 列循环 */</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(“%d\t”, a[i][j]); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3二维数组元素初始化"><a href="#2-3二维数组元素初始化" class="headerlink" title="2.3二维数组元素初始化"></a><font size=3>2.3二维数组元素初始化</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;; <span class="comment">/* 分行赋值 */</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;     <span class="comment">/* 按数组排列顺序进行赋值 */</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;;           <span class="comment">/* 对部分元素赋初值 */</span></span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）与一维数组相同，数组不初始化，其元素值为随机；对<code>static</code>数组元素不赋初值，系统会自动赋以<code>0</code>值；只给部分数组元素赋初值，剩余元素自动赋值为<code>0</code>。</p><p>&emsp;&emsp;（2）当采用分行赋值的方法声明二维数组时，二维数组的行数可以省略，行数会由编译器自己进行计算。</p><p>【说明】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 声明形式 1 (两种写法等价) */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]; a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>; a[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>; a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>; a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>; a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 声明形式 2 (两种写法等价) */</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]; a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>; a[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>; a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>; a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>; a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明形式 3 (两种写法等价) */</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]; a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>; a[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>; a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>; a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>; a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明形式 4 (两种写法等价) */</span></span><br><span class="line"><span class="keyword">int</span> a[ ][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]; a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>; a[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>; a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>; a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>; a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明形式 5 (两种写法等价) */</span></span><br><span class="line"><span class="keyword">int</span> a[ ][<span class="number">3</span>] = &#123;&#123;&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]; a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>; a[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>; a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>; a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>; a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明形式 6 (两种写法等价) */</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]; a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>; a[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>; a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>; a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>; a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>;<span class="comment">/* 编译器自己计算赋值，不过会有警告*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明形式 7 (两种写法等价) */</span></span><br><span class="line"><span class="keyword">int</span> a[ ][<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]; a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>; a[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>; a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>; a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>; a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>;<span class="comment">/* 编译器自己计算赋值，不过会有警告*/</span></span><br></pre></td></tr></table></figure><h3 id="2-4二维数组的存储空间"><a href="#2-4二维数组的存储空间" class="headerlink" title="2.4二维数组的存储空间"></a><font size=3>2.4二维数组的存储空间</font></h3><p>&emsp;&emsp;二维数组在内存中是一维的，存储时行序优先。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[%d][%d] = %p, a[%d][%d] = %d\n&quot;</span>,i, j, &amp;a[i][j],i, j, a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-05-C-Language/image-20220128124741125.png" alt="image-20220128124741125" style="zoom:67%;" /><p>&emsp;&emsp;<code>a[2][3]</code>在内存中的结构如下图所示，<code>a[2][3]</code>数组为<code>int</code>类型，在<code>64</code>位平台下占<code>4</code>个字节，所以相邻元素之间地址相差<code>4</code>。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-05-C-Language/image-20220128125248664.png" alt="image-20220128125248664" style="zoom:67%;" /><h3 id="2-5二维数组的数组名"><a href="#2-5二维数组的数组名" class="headerlink" title="2.5二维数组的数组名"></a><font size=3>2.5二维数组的数组名</font></h3><p>&emsp;&emsp;与一维数组一样，二维数组的数组名也代表了该二维数组的起始地址。</p><p>&emsp;&emsp;二维数组的另一种理解方式：二维数组可以看做是由多个元素组成的一维数组，而每个元素又是一个数组，从而合起来构成了二维数组。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %p\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a + %d = %p, a[%d] = %p\n&quot;</span>,i,a +i, i, a[i]);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[%d][%d] = %p, a[%d][%d] = %d\n&quot;</span>,i, j, &amp;a[i][j],i, j, a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-05-C-Language/image-20220128161750817.png" alt="image-20220128161750817" style="zoom:67%;" /><p>经过打印地址发现：</p><p>&emsp;&emsp;（1）<code>a</code>为整个二维数组的数组名，代表了整个二维数组的起始地址。</p><p>&emsp;&emsp;（2）<code>a[0], a[1]</code>也分别代表了第一行和第二行起始数据的地址。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-05-C-Language/image-20220128161709639.png" alt="image-20220128161709639" style="zoom:50%;" /><p>经过分析和验证，可以得到：一个二维数组，按行可以分为多个一维数组，以<code>int a[2][3]</code>为例，该<code>2行3列</code>的二维数组就可以理解为<code>2个元素</code>组成，每个元素都是一个一维数组组成，每个一维数组的数组名就是二维数组名加上第一个下标，即<code>a[0], a[1]</code>。</p><table>    <tr>        <td align="center" colspan="3">行名(代表了地址)</td>        <td align="center" colspan="3">每行元素</td>    </tr>    <tr>        <td align="center">a</td>        <td align="center">a[0]</td>        <td align="center">&a[0][0]</td>        <td align="center">a[0][0]</td>        <td align="center">a[0][1]</td>        <td align="center">a[0][2]</td>    </tr>    <tr>        <td align="center">a + 1</td>        <td align="center">a[1]</td>        <td align="center">&a[1][0]</td>        <td align="center">a[1][0]</td>        <td align="center">a[1][1]</td>        <td align="center">a[1][2]</td>    </tr></table><p>【注意】数组名<strong>不可以进行自加自减</strong>运算，自然这里的行名就相当于每一行元素的数组名，也不可以进行自加自减运算。</p><h1 id="二、字符串与字符数组"><a href="#二、字符串与字符数组" class="headerlink" title="二、字符串与字符数组"></a><font size=3>二、字符串与字符数组</font></h1><h2 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a><font size=3>1.字符串</font></h2><h3 id="1-1字符串定义"><a href="#1-1字符串定义" class="headerlink" title="1.1字符串定义"></a><font size=3>1.1字符串定义</font></h3><p>&emsp;&emsp;字符串是一系列<strong>连续的字符的组合</strong>，要想在内存中定位一个字符串，除了要知道它的开头，还要知道它的结尾。找到字符串的开头很容易，知道它的名字（字符数组名或者字符串名）就可以，但是结尾怎么办呢？在<code>C语言</code>中，字符串总是以<code>&#39;\0&#39;</code>作为结尾，所以<code>&#39;\0&#39;</code>也被称为<strong>字符串结束标志</strong>，或者字符串结束符。由<code>&quot; &quot;</code>包围的字符串会自动在末尾添加<code>&#39;\0&#39;</code>。例如，<code>&quot;abc123&quot;</code>从表面看起来只包含了<code>6</code>个字符，其实不然，<code>C语言</code>会在最后隐式地添加一个<code>&#39;\0&#39;</code>。</p><p>&emsp;&emsp;<code>&#39;\0&#39;</code>是 <code>ASCII 码</code>表中的第 <code>0 </code>个字符，英文称为 <code>NULL</code>，中文称为“空字符”。该字符既不能显示，也没有控制功能，输出该字符不会有任何效果，它在<code>C语言</code>中<strong>唯一</strong>的作用就是作为字符串结束标志。</p><h3 id="1-2字符串长度"><a href="#1-2字符串长度" class="headerlink" title="1.2字符串长度"></a><font size=3>1.2字符串长度</font></h3><p>&emsp;&emsp;所谓字符串长度，就是字符串包含了多少个字符（**不包括最后的结束符<code>&#39;\0&#39;</code>**）。</p><p>例如：<code>abc123</code>字符串在内存中占据的空间是<code>6 + 1 = 7</code>个字符的空间，但是这个字符串的长度为<code>6</code>。</p><h2 id="2-字符数组"><a href="#2-字符数组" class="headerlink" title="2.字符数组"></a><font size=3>2.字符数组</font></h2><h3 id="2-1字符数组定义"><a href="#2-1字符数组定义" class="headerlink" title="2.1字符数组定义"></a><font size=3>2.1字符数组定义</font></h3><p>&emsp;&emsp;元素的数据类型为字符类型的数组称为<strong>字符数组</strong>，字符数组实际上是一系列字符的集合，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[<span class="number">10</span>];     <span class="comment">/* 定义一个长度为10的一维字符数组 */</span></span><br><span class="line"><span class="keyword">char</span> b[<span class="number">2</span>][<span class="number">10</span>];  <span class="comment">/* 定义一个2行3列的二维字符数组 */</span></span><br></pre></td></tr></table></figure><h3 id="2-2字符数组初始化"><a href="#2-2字符数组初始化" class="headerlink" title="2.2字符数组初始化"></a><font size=3>2.2字符数组初始化</font></h3><ul><li>一维字符数组初始化</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一维字符数组初始化 */</span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">7</span>] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;; <span class="comment">/* 逐个字符赋值 */</span></span><br><span class="line"><span class="keyword">char</span> a[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;  <span class="comment">/* 省略长度，逐个字符赋值 */</span></span><br><span class="line"><span class="keyword">char</span> a[] = &#123;<span class="string">&quot;world!&quot;</span>&#125;;                 <span class="comment">/* 用字符串常量赋值 */</span></span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">&quot;world!&quot;</span>;                   <span class="comment">/* 用字符串常量赋值 */</span></span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;（1）给字符数组赋值时，通常将字符串一次性地赋值（可以指明数组长度，也可以不指明），而不是一个字符一个字符地赋值。</p><p>&emsp;&emsp;（2）字符数组<strong>只有在定义时才能将整个字符串一次性地赋值</strong>给它，一旦定义完了，就只能一个字符一个字符地赋值了。</p><p>&emsp;&emsp;（3）字符数组在未赋初值时，内容也是随机的。</p><p>&emsp;&emsp;（4）当使用字符串给字符数组赋值，且未给出长度时，创建的字符数组真实长度为<strong>字符串长度 + 1</strong>，原因就在于用字符串进行赋值时，字符串结束处自带一个<strong>字符串结束标志：<code>\0</code><strong>。所以这也就意味着，我们若是要指定字符数组的大小，一定要留够</strong>字符串长度 + 1</strong>的长度，这样字符串才更加完整，也会比较严谨。</p><p>【说明】</p><table>    <tr>        <td align="center">字符数组声明形式</td>        <td align="center">等价写法</td>    </tr>    <tr>        <td align="center">char a[3] = {'h', 'e', 'l'};</td>        <td align="center">char a[3]; a[0] = 'h'; a[1] = 'h'; a[2] = 'l';</td>    </tr>    <tr>        <td align="center">char a[3] = {'h'};</td>        <td align="center">char a[3]; a[0] = 'h'; a[1] = '\0'; a[2] = '\0';</td>    </tr>    <tr>        <td align="center">char a[3] = {"hel"};</td>        <td align="center">char a[3]; a[0] = 'h'; a[1] = 'e'; a[2] = 'l';<br>/* 这里若是长度定义为4就会更加合理 */</td>    </tr>    <tr>        <td align="center">char a[] = {"hel"};</td>        <td align="center">char a[4]; a[0] = 'h'; a[1] = 'e'; a[2] = 'l';a[3] = '\0';</td>    </tr></table><ul><li>二维字符数组初始化</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> fruit[][<span class="number">7</span>]=&#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>效果如下表</p><table>    <tr>        <td align="center">行名</td>        <td align="center" colspan="7">每行元素</td>    </tr>    <tr>        <td align="center">fruit[0]</td>        <td align="center">'A'</td>        <td align="center">'p'</td>        <td align="center">'p'</td>        <td align="center">'l'</td>        <td align="center">'e'</td>        <td align="center">'\0'</td>        <td align="center">'\0'</td>        </tr>    <tr>        <td align="center">fruit[1]</td>        <td align="center">'O'</td>        <td align="center">'r'</td>        <td align="center">'a'</td>        <td align="center">'r'</td>        <td align="center">'g'</td>        <td align="center">'e'</td>        <td align="center">'\0'</td>        </tr></table><h3 id="2-3字符数组访问"><a href="#2-3字符数组访问" class="headerlink" title="2.3字符数组访问"></a><font size=3>2.3字符数组访问</font></h3><p>&emsp;&emsp;与一般的数组一样，访问元素时只能一个逐个字符访问，但是若是只输出的话要注意赋值方式的不同，输出时也会不一样。</p><ul><li>逐个字符访问输出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">6</span>] = &#123; <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;; <span class="comment">/* 逐个赋值，中间带有 &#x27;\0&#x27; */</span></span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">&quot;h\0ello&quot;</span>;                        <span class="comment">/* 字符串常量赋值,中间带有 &#x27;\0&#x27; */</span></span><br><span class="line"><span class="keyword">char</span> c[] = <span class="string">&quot;hello&quot;</span>;                          <span class="comment">/* 字符串常量赋值,中间没带有 &#x27;\0&#x27; */</span></span><br><span class="line"><span class="keyword">int</span> i, n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------Character by character---------\n&quot;</span>);</span><br><span class="line">n = <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">char</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nlength(a)=%d\t&quot;</span>,n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">sizeof</span>(b)/<span class="keyword">sizeof</span>(<span class="keyword">char</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nlength(b)=%d\t&quot;</span>,n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">sizeof</span>(c)/<span class="keyword">sizeof</span>(<span class="keyword">char</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nlength(c)=%d\t&quot;</span>,n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n------------------end------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-05-C-Language/image-20220128185210049.png" alt="image-20220128185210049" style="zoom:67%;" /><p>注意数组<code>b[]</code>打印是有问题的。</p><ul><li>以字符串的形式访问输出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">6</span>] = &#123; <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;; <span class="comment">/* 逐个赋值，中间带有 &#x27;\0&#x27; */</span></span><br><span class="line"><span class="keyword">char</span> b[<span class="number">6</span>] = &#123; <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;!&#x27;</span>&#125;;  <span class="comment">/* 逐个赋值，整个字符数组不带 &#x27;\0&#x27;  */</span></span><br><span class="line"><span class="keyword">char</span> c[] = <span class="string">&quot;h\0ello&quot;</span>;                        <span class="comment">/* 字符串常量赋值,中间带有 &#x27;\0&#x27; */</span></span><br><span class="line"><span class="keyword">char</span> d[] = <span class="string">&quot;hello&quot;</span>;                          <span class="comment">/* 字符串常量赋值,中间没带有 &#x27;\0&#x27; */</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------Character by character---------\n&quot;</span>);</span><br><span class="line">n = <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">char</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;length(a)=%d, a[6]=%s\n&quot;</span>, n, a);</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">sizeof</span>(b)/<span class="keyword">sizeof</span>(<span class="keyword">char</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;length(b)=%d, b[]=%s\n&quot;</span>, n, b);</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">sizeof</span>(c)/<span class="keyword">sizeof</span>(<span class="keyword">char</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;length(c)=%d,c[]=%s\n&quot;</span>, n, c);</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">sizeof</span>(d)/<span class="keyword">sizeof</span>(<span class="keyword">char</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;length(d)=%d,c[]=%s\n&quot;</span>, n, d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n------------------end------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-05-C-Language/image-20220128185825245.png" alt="image-20220128185825245" style="zoom:67%;" /><p>注意数组<code>b[]</code>打印是有问题的。</p><p>【总结】</p><p>&emsp;&emsp;（1）注意字符数组中的<code>\0</code>，当输出时，该字符会对输出结果造成影响。</p><p>&emsp;&emsp;（2）注意在字符数组逐个赋值时，若没有字符串结束标志<code>\0</code>，那么尽量不要使用<code>printf</code>函数的<code>%s</code>格式进行输出，就如上图中的<code>b[]</code>数组</p><h2 id="3字符串处理函数"><a href="#3字符串处理函数" class="headerlink" title="3字符串处理函数"></a><font size=3>3字符串处理函数</font></h2><p>&emsp;&emsp;在使用字符串处理函数时，要加上头文件<code>&lt;string.h&gt;</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 计算字符串 str 的长度，直到空结束字符，但不包括空结束字符。 */</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span> </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">/* 把 src 所指向的字符串复制到 dest */</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span> </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">/* 把 src 所指向的字符串追加到 dest 所指向的字符串的结尾。 */</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcat</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 把 str1 所指向的字符串和 str2 所指向的字符串进行比较。 */</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span> </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】LV1-04-C语言-4控制语句</title>
      <link href="post/d7b81674.html"/>
      <url>post/d7b81674.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是记录<code>C语言</code>笔记——控制语句。</p><span id="more"></span><h1 id="一、顺序结构"><a href="#一、顺序结构" class="headerlink" title="一、顺序结构"></a><font size=3>一、顺序结构</font></h1><p>&emsp;&emsp;先执行第一条语句，然后是第二条、第三条……一直到最后一条语句，这称为顺序结构。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220125194507922.png" alt="image-20220125194507922" style="zoom:50%;" /><h1 id="二、选择结构"><a href="#二、选择结构" class="headerlink" title="二、选择结构"></a><font size=3>二、选择结构</font></h1><h2 id="1-if-else"><a href="#1-if-else" class="headerlink" title="1.if...else..."></a><font size=3>1.<code>if...else...</code></font></h2><ul><li>基本形式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    语句块<span class="number">1.</span>..;     <span class="comment">// 表达式为真，执行语句1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    语句块<span class="number">2.</span>..;    <span class="comment">// 表达式非真，执行语句2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220125195352926.png" alt="image-20220125195352926" style="zoom:50%;" /><ul><li>嵌套形式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">  <span class="keyword">if</span>(表达式)    语句块<span class="number">1.</span>..;</span><br><span class="line"> <span class="keyword">else</span>       语句块<span class="number">2.</span>..;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="keyword">if</span>(表达式)    语句块<span class="number">3.</span>..;</span><br><span class="line"> <span class="keyword">else</span>      语句块<span class="number">4.</span>..;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>阶梯形式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>) 语句块<span class="number">1.</span>..;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>) 语句块<span class="number">2.</span>..;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">3</span>) 语句块<span class="number">3.</span>..;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">4</span>) 语句块<span class="number">4.</span>..;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> 语句块n...;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220125200142589.png" alt="image-20220125200142589" style="zoom:40%;" /><p>【注意】</p><p>&emsp;&emsp;（1）语句块只有单条语句时，<code>&#123; &#125;</code>可以省略，但是当有若干条语句时，必须用<code>&#123;  &#125;</code>括起来。</p><p>&emsp;&emsp;（2）对于表达式，一般情况下为逻辑表达式或关系表达式；也可以是任意类型(包括整型、实型、字符型、指针类型）</p><p>&emsp;&emsp;（3）要注意表达式中的判断条件原则是<strong>非0即为真</strong>。</p><p>&emsp;&emsp;（4）<code>if</code>语句嵌套时，<code>else</code>总是与它上面的<strong>最近的<code>if</code>配对</strong>，与书写格式无关。要实行强行的配对关系可以利用<code>&#123; &#125; </code>来实现。</p><h2 id="2-switch"><a href="#2-switch" class="headerlink" title="2.switch"></a><font size=3>2.<code>switch</code></font></h2><ul><li>基本形式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span>:语句块<span class="number">1.</span>..;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span>:语句块<span class="number">2.</span>..;<span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> 常量表达式n:语句块n...;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:语句块n+<span class="number">1</span>;<span class="keyword">break</span>; <span class="comment">/* 放在最后时default后边的break可以省略，其他位置则不可省略 */</span>     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220125203408073.png" alt="image-20220125203408073" style="zoom:50%;" /><p>【注意】</p><p>（1）每个常量表达式的值必须<strong>各不相同</strong>,否则将会出现矛盾。</p><p>（2）当表达式的值与<code>case</code>后面的常量表达式值（可以是<strong>整型、字符型或者枚举型</strong>）相等时，就执行此case后面的语句。<code>case 常量：</code>只起语句标号的作用。另外要注意<strong>多个<code>case</code>可以执行一组语句</strong>。 </p><p>（3）<code>switch</code>中的表达式可以是<strong>整型、字符型或枚举型</strong>。</p><p>（4）<code>break</code>语句用于强行跳出<code>switch</code>，一般每个<code>case</code>后面应有一个<code>break</code>语句，<code>default</code>分支后的<code>break</code>可以省略。一般情况<code>default</code>分支都放在最后面，当然，也可以放在开头或者中间，但是此时的<code>break</code>就不可以省略了。</p><h1 id="三、循环结构"><a href="#三、循环结构" class="headerlink" title="三、循环结构"></a><font size=3>三、循环结构</font></h1><h2 id="1-while"><a href="#1-while" class="headerlink" title="1.while"></a><font size=3>1.<code>while</code></font></h2><h3 id="1-1基本形式"><a href="#1-1基本形式" class="headerlink" title="1.1基本形式"></a><font size=3>1.1基本形式</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    语句块...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;先计算“表达式”的值，当值为真（非0）时， 执行“语句块”；执行完“语句块”，再次计算表达式的值，如果为真，继续执行“语句块”……这个过程会一直重复，直到表达式的值为假（0），就退出循环，执行 <code>while</code>整体 后面的代码。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220125205217591.png" alt="image-20220125205217591" style="zoom:60%;" /><h3 id="1-2实例"><a href="#1-2实例" class="headerlink" title="1.2实例"></a><font size=3>1.2实例</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int n = 5;</span><br><span class="line">    int count = 0;</span><br><span class="line">    printf(&quot;------cycle start------\n&quot;);</span><br><span class="line">    while(n &gt; 2)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;Before statement execution: count=%d, n=%d\n&quot;, count, n);</span><br><span class="line">        n--;</span><br><span class="line">        count++;</span><br><span class="line">        printf(&quot;After statement execution: count=%d, n=%d\n&quot;, count, n);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;------cycle end------\n&quot;);</span><br><span class="line">    printf(&quot;count = %d, n = %d \n&quot;, count, n);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220125205922983.png" alt="image-20220125205922983" style="zoom:50%;" /><p>【注意】<code>while</code>循环是<strong>先判断</strong>表达式为真，<strong>然后才执行</strong>循环，若为假，则直接结束循环，不会再执行循环体内的语句块。</p><h2 id="2-do-while"><a href="#2-do-while" class="headerlink" title="2.do...while"></a><font size=3>2.<code>do...while</code></font></h2><h3 id="2-1基本形式"><a href="#2-1基本形式" class="headerlink" title="2.1基本形式"></a><font size=3>2.1基本形式</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    语句块...;</span><br><span class="line">&#125;<span class="keyword">while</span>(表达式);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;先执行“语句块”，再计算“表达式”的值，当值为真（非0）时，继续执行“语句块”……这个过程会一直重复，直到表达式的值为假（0），就退出循环，执行 <code>do...while</code> 整体后面的代码。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220125210700859.png" alt="image-20220125210700859" style="zoom:67%;" /><h3 id="2-2实例"><a href="#2-2实例" class="headerlink" title="2.2实例"></a><font size=3>2.2实例</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int n = 5;</span><br><span class="line">    int count = 0;</span><br><span class="line">    printf(&quot;------cycle start------\n&quot;);</span><br><span class="line">    do&#123;</span><br><span class="line">        printf(&quot;Before statement execution: count=%d, n=%d\n&quot;, count, n);</span><br><span class="line">        n--;</span><br><span class="line">        count++;</span><br><span class="line">        printf(&quot;After statement execution: count=%d, n=%d\n&quot;, count, n);</span><br><span class="line">    &#125;while(n &gt; 5);</span><br><span class="line">    printf(&quot;------cycle end------\n&quot;);</span><br><span class="line">    printf(&quot;count = %d, n = %d \n&quot;, count, n);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220125211932332.png" alt="image-20220125211932332" style="zoom:50%;" /><p>【注意】<code>do...while</code>循环是<strong>先执行一次循环，然后才判断</strong>表达式为真，然后才继续执行循环，若为假，则直接结束循环，不会再执行循环体内的语句块。所以当两个实例中的判断条件<code>n &gt; 2</code>变为<code>n &gt; 5</code>时<code>while</code>循环结构一次也不执行，而<code>do...while</code>循环结构会执行一次，这点需要注意。</p><h2 id="3-for"><a href="#3-for" class="headerlink" title="3.for"></a><font size=3>3.<code>for</code></font></h2><h3 id="3-1基本形式"><a href="#3-1基本形式" class="headerlink" title="3.1基本形式"></a><font size=3>3.1基本形式</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>; 表达式<span class="number">2</span>; 表达式<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    语句块...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：</p><p>&emsp;&emsp;(1) 先执行“表达式1”。</p><p>&emsp;&emsp;(2) 再执行“表达式2”，如果它的值为真（非0），则执行循环体，否则结束循环。</p><p>&emsp;&emsp;(3) 执行完循环体后再执行“表达式3”。</p><p>&emsp;&emsp;(4) 重复执行步骤 (2) 和 (3)，直到“表达式2”的值为假，就结束循环。</p><p>&emsp;&emsp;上面的步骤中，(2) 和 (3) 是一次循环，会重复执行，for 语句的主要作用就是不断执行步骤 (2) 和 (3)。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220126111212925.png" alt="image-20220126111212925" style="zoom:50%;" /><p>【注意】</p><p>&emsp;&emsp;（1）“表达式1”<strong>仅在第一次循环时执行</strong>，以后都不会再执行，可以认为这是一个初始化语句。“表达式1”<strong>可省略,但循环之前应给循环变量赋值</strong>。</p><p>&emsp;&emsp;（2）表达式2”一般是一个<strong>关系表达式</strong>，决定了是否还要继续下次循环，称为“循环条件”。“表达式2”<strong>可省略,将陷入死循环</strong>。</p><p>&emsp;&emsp;（3）“表达式3”很多情况下是一个带有自增或自减操作的表达式，以<strong>使循环条件逐渐变得“不成立”</strong>。“表达式3”<strong>可省略,但在循环体中增加使循环变量值改变的语句</strong>。</p><h1 id="四、辅助控制语句"><a href="#四、辅助控制语句" class="headerlink" title="四、辅助控制语句"></a><font size=3>四、辅助控制语句</font></h1><h2 id="1-return"><a href="#1-return" class="headerlink" title="1.return"></a><font size=3>1.<code>return</code></font></h2><h3 id="1-1基本形式-1"><a href="#1-1基本形式-1" class="headerlink" title="1.1基本形式"></a><font size=3>1.1基本形式</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (表达式); <span class="comment">/* 有没有 ( ) 都可以*/</span></span><br></pre></td></tr></table></figure><h3 id="1-2基本应用"><a href="#1-2基本应用" class="headerlink" title="1.2基本应用"></a><font size=3>1.2基本应用</font></h3><ul><li>返回函数的值</li></ul><p>&emsp;&emsp;当<code>return</code>应用在函数中时，可以用于返回一个值，如<code>return (10 + 9);</code></p><ul><li>结束程序</li></ul><p>&emsp;&emsp;当<code>return</code>应用在函数中时，不仅可以用于返回一个值，还可以直接结束该函数，<code>return</code>语句执行完毕，它后边的所有语句不再执行，直接跳到主函数继续执行，若是用在主函数中，则遇到<code>return</code>直接结束主函数，整个程序结束，后边的语句不再执行。</p><p>【注意】 <code>return</code> 语句<strong>可以有多个</strong>，可以出现在函数体的<strong>任意位置</strong>，但是每次调用函数<strong>只能有一个 <code>return</code> 语句被执行</strong>，所以只有一个返回值（少数的编程语言支持多个返回值，例如<code>Go</code>语言）。</p><h2 id="2-goto"><a href="#2-goto" class="headerlink" title="2.goto"></a><font size=3>2.<code>goto</code></font></h2><p>&emsp;&emsp;<code>goto</code> 语句是一种无条件流程跳转语句，通常 <code>goto</code> 语句与<code> if</code> 语句结合使用，当满足一定条件时，程序流程跳转到指定标号处，接着往下执行。</p><h3 id="2-1基本形式-1"><a href="#2-1基本形式-1" class="headerlink" title="2.1基本形式"></a><font size=3>2.1基本形式</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义一个语句标识 flag_name （flag_name只是一个名字）*/</span></span><br><span class="line">flag_name :      <span class="comment">/* 语句标识后的冒号不能省略 */</span></span><br><span class="line">语句块...;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* goto 语句的调用 */</span></span><br><span class="line"><span class="keyword">goto</span> flag_name;  <span class="comment">/* 程序将从对应 flag_name 的代码处开始往下执行。 */</span></span><br></pre></td></tr></table></figure><p>【注意】<code>flag_name</code>后边的语句可以加<code>&#123; &#125;</code>，也可以不加。不过加上的话可读性会强一些。</p><h3 id="2-2基本应用"><a href="#2-2基本应用" class="headerlink" title="2.2基本应用"></a><font size=3>2.2基本应用</font></h3><ul><li>跳出循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    flag:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;------goto statement execution------\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;------cycle end------\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;count = %d\n&quot;</span>, count);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------while cycle start------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before statement execution: count=%d\n&quot;</span>, count);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;After statement execution: count=%d\n&quot;</span>, count);</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">goto</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220126133428798.png" alt="image-20220126133428798" style="zoom:50%;" /><p>&emsp;&emsp;<code>goto flag_name;</code>语句放在循环中用于跳出循环，用于结束循环时，此时<code>flag_name</code>处的代码有两种情况：</p><p>（1）第一种是放在循环上边，比循环先执行，这个时候，<code>flag_name</code>处的程序会先执行一遍，所以，切记，这里边不要直接放<code>return</code>语句，否则程序直接结束了，有需要的话可以加一个判断，以保证程序可以正常运行。</p><p>（2）第二种是放在循环下边，这个时候，只有满足了跳转指令时，程序才会跳转到<code>flag_name</code>处执行。</p><ul><li>构成循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    flag: </span><br><span class="line">    <span class="keyword">if</span>(i &lt;= <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = sum + i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">goto</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-break"><a href="#3-break" class="headerlink" title="3.break"></a><font size=3>3.<code>break</code></font></h2><h3 id="3-1基本形式-1"><a href="#3-1基本形式-1" class="headerlink" title="3.1基本形式"></a><font size=3>3.1基本形式</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>break</code>语句通常用在循环语句和开关语句中。当<code>break</code>用于开关语句<code>switch</code>中时，可使程序跳出<code>switch</code>而执行<code>switch</code>以后的语句；如果没有<code>break</code>语句，则将成为一个死循环而无法退出。</p><p>&emsp;&emsp;当<code>break</code>语句用于<code>do-while、for、while</code>循环语句中时，可使程序终止循环而执行循环后面的语句，通常<code>break</code>语句总是与<code>if</code>语句联在一起，即满足条件时便跳出循环。</p><h3 id="3-2基本应用"><a href="#3-2基本应用" class="headerlink" title="3.2基本应用"></a><font size=3>3.2基本应用</font></h3><ul><li>跳出<strong>一层</strong>循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;自数1~100全部素数:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(n = <span class="number">2</span>; n &lt;= <span class="number">100</span>; n++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= n)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220126134630921.png" alt="image-20220126134630921" style="zoom:67%;" /><p>【注意】</p><p>&emsp;&emsp;（1）<code>break</code>语句对<code>if-else</code>的条件语句不起作用；</p><p>&emsp;&emsp;（2）在多层循环中，一个<code>break</code>语句只向外跳一层。</p><h2 id="4-continue"><a href="#4-continue" class="headerlink" title="4.continue"></a><font size=3>4.<code>continue</code></font></h2><h3 id="4-1基本形式"><a href="#4-1基本形式" class="headerlink" title="4.1基本形式"></a><font size=3>4.1基本形式</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>continue</code>语句的作用是跳过循环体中剩余的语句而<strong>强行执行下一次循环</strong>。<code>continue</code>语句只用在<code>for、while、do-while</code>等循环体中，常与<code>if</code>条件语句一起使用，用来<strong>加速循环</strong>。</p><h3 id="4-2基本应用"><a href="#4-2基本应用" class="headerlink" title="4.2基本应用"></a><font size=3>4.2基本应用</font></h3><ul><li>直接跳过剩余语句执行下一次循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span>(n = <span class="number">1</span>; n &lt;= <span class="number">30</span>; n++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-04-C-Language/image-20220126140539529.png" alt="image-20220126140539529" style="zoom: 67%;" />]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】LV1-03-C语言-3输入输出</title>
      <link href="post/b9a7171d.html"/>
      <url>post/b9a7171d.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是记录<code>C语言</code>笔记——输入输出。</p><span id="more"></span><h1 id="一、输出函数"><a href="#一、输出函数" class="headerlink" title="一、输出函数"></a><font size=3>一、输出函数</font></h1><h2 id="1-putchar"><a href="#1-putchar" class="headerlink" title="1.putchar"></a><font size=3>1.<code>putchar</code></font></h2><p>【函数描述】：<code>C标准库&lt;stdio.h&gt;中的函数</code>，把参数 <code>char</code> 指定的字符（一个无符号字符）写入到标准输出<code>stdout</code>中。</p><p>【函数声明】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putchar</span><span class="params">(<span class="keyword">int</span> <span class="keyword">char</span>)</span></span></span><br></pre></td></tr></table></figure><p>【函数参数】：</p><ul><li><code>char</code> ：这是要被写入的字符。该字符以其对应的<code>int</code> 值进行传递。</li></ul><p>【返回值】：该函数以无符号<code>char</code>强制转换为<code>int</code>的形式返回写入的字符，如果发生错误则返回<code> EOF(-1)</code>。</p><p>【函数实例】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="number">0x23</span>; <span class="comment">/* ascii 中 0x23 = # */</span></span><br><span class="line">    <span class="built_in">putchar</span>(a);    <span class="comment">/* 输出字符 */</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>); <span class="comment">/* 输出换行符 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】：<code>putchar</code>函数只是输出一个字符，并不会自动换行。</p><h2 id="2-puts"><a href="#2-puts" class="headerlink" title="2.puts"></a><font size=3>2.<code>puts</code></font></h2><p>【函数描述】：<code>C标准库&lt;stdio.h&gt;中的函数</code>，把一个字符串写入到标准输出 <code>stdout</code>，直到空字符，但不包括空字符。换行符会被追加到输出中。</p><p>【函数声明】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">puts</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br></pre></td></tr></table></figure><p>【函数参数】：</p><ul><li><code>str</code> ：这是要被写入的字符串。</li></ul><p>【返回值】：如果成功，该函数返回一个非负值为字符串长度（包括末尾的 <code>\0</code>），如果发生错误则返回<code>EOF(-1)</code>。</p><p>【函数实例】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">16</span>] = <span class="string">&quot;abcdefg&quot;</span>;<span class="comment">/* 最后还有一个 \0 表示字符串的结束 */</span></span><br><span class="line">    i = <span class="built_in">puts</span>(str);    <span class="comment">/* 输出字符串 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i=%d\n&quot;</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】：<code>puts</code>函数输出时会<strong>自动换行</strong>。</p><h2 id="3-printf"><a href="#3-printf" class="headerlink" title="3.printf"></a><font size=3>3.<code>printf</code></font></h2><p>&emsp;&emsp;该函数应该是应用最多的函数，用法也极其丰富。</p><h3 id="3-1函数说明"><a href="#3-1函数说明" class="headerlink" title="3.1函数说明"></a><font size=3>3.1函数说明</font></h3><p>【函数描述】：<code>C标准库&lt;stdio.h&gt;中的函数</code>，发送格式化输出到标准输出<code> stdout</code>。</p><p>【函数声明】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span></span><br></pre></td></tr></table></figure><p>【调用格式】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&lt;格式化字符串&gt;&quot;</span>, &lt;输出表&gt;);</span><br></pre></td></tr></table></figure><p>【函数参数】：</p><ul><li>格式化字符串（<code>format</code> ）： 就是格式化需要输出的字符串，<code>format</code> 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。<code>format</code>标签属性是<code> %[flags][width][.precision][length]specifier</code>即<code>%[标志][最小宽度][.精度][长度]类型</code>。</li><li>输出表（附加参数）：根据不同的<code>format</code>字符串，函数可能需要一系列的附加参数，每个参数包含了一个要被插入的值，替换了<code>format</code>参数中指定的每个<code>%</code>标签。参数的个数应与<code>%</code>标签的个数相同。</li></ul><p>【返回值】：如果成功，则返回写入的<strong>字符总数</strong>，否则返回一个负数。</p><h3 id="3-2格式化字符串详解"><a href="#3-2格式化字符串详解" class="headerlink" title="3.2格式化字符串详解"></a><font size=3>3.2格式化字符串详解</font></h3><ul><li>格式字符（<code>specifier</code>）</li></ul><table>    <tr>        <td align="center" width=100px>格式字符</td>        <td align="center">形式</td>        <td align="center">意义</td>    </tr>    <tr>        <td align="center" width=100px>i, d</td>        <td align="center">%i, %d</td>        <td align="left">以十进制形式输出带符号整数(正数不输出符号)</td>    </tr>    <tr>        <td align="center" width=100px>u</td>        <td align="center">%u</td>        <td align="left">以十进制形式输出无符号整数</td>    </tr>    <tr>        <td align="center" width=100px>o</td>        <td align="center">%o</td>        <td align="left">以八进制形式输出无符号整数(不输出前缀0)</td>    </tr>    <tr>        <td align="center" width=100px>x, X</td>        <td align="center">%x, %X</td>        <td align="left">以十六进制形式输出无符号整数(不输出前缀0x)</td>    </tr>    <tr>        <td align="center" width=100px>f</td>        <td align="center">%f</td>        <td align="left">以小数形式输出单、双精度实数</td>    </tr>    <tr>        <td align="center" width=100px>e, E</td>        <td align="center">%e, %E</td>        <td align="left">以指数形式输出单、双精度实数</td>    </tr>    <tr>        <td align="center" width=100px>g, G</td>        <td align="center">%g, %G</td>        <td align="left">以 %f 或 %e 中较短的输出宽度输出单、双精度实数</td>    </tr>    <tr>        <td align="center" width=100px>c</td>        <td align="center">%c</td>        <td align="left">输出单个字符</td>    </tr>    <tr>        <td align="center" width=100px>s</td>        <td align="center">%s</td>        <td align="left">输出字符串</td>    </tr></table><p>【注意】想要输出**<code>%</code><strong>本身的话可以</strong><code>%%</code>**。</p><ul><li>标识（<code>flag</code>）</li></ul><table>    <tr>        <td align="center" width=100px>标识</td>        <td align="center">描述</td>    </tr>    <tr>        <td align="center" width=100px>-</td>        <td align="left">在给定的字段宽度内左对齐，默认是右对齐</td>    </tr>    <tr>        <td align="center" width=100px>+</td>        <td align="left">强制在结果之前显示加号或减号（+ 或 -），即正数前面会显示 + 号。默认情况下，只有负数前面会显示一个 - 号。</td>    </tr>    <tr>        <td align="center" width=100px>space<br>(空格)</td>        <td align="left">有符号值若为正，则在值前显示前导空格（但是不显示符号）；若为负，则在值前显示-。</td>    </tr>    <tr>        <td align="center" width=100px rowspan="3">#</td>        <td align="left">与 o、x 或 X 说明符一起使用时，非零值前面会分别显示 0、0x 或 0X。</td>    </tr>    <tr>        <td align="left">与 e、E 和 f 一起使用时，会强制输出包含一个小数点，即使后边没有数字时也会显示小数点。默认情况下，如果后边没有数字时候，不会显示显示小数点。</td>    </tr>    <tr>        <td align="left">与 g 或 G 一起使用时，结果与使用 e 或 E 时相同，但是尾部的零不会被移除。</td>    </tr>    <tr>        <td align="center" width=100px>0</td>        <td align="left">输出数值时指定左面不使用的空位置自动填0。</td>    </tr></table><ul><li>最小输出宽度（<code>width</code>）</li></ul><table>    <tr>        <td align="center" width=100px>宽度</td>        <td align="center">描述</td>    </tr>    <tr>        <td align="center" width=100px>number</td>        <td align="left">数值（十进制整数），数据长度 小于number，则左补空格；否则按实际输出。</td>    </tr>    <tr>        <td align="center" width=100px>*</td>        <td align="left">星号，精度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。<br>如：printf("%0*d",6,1000); 将输出:001000</td>    </tr></table><ul><li>精度（<code>.precision</code>）</li></ul><table>    <tr>        <td align="center" width=100px>精度</td>        <td align="center">描述</td>    </tr>    <tr><!-- 1 -->        <td align="center" width=100px rowspan="6">.number</td>        <td align="left">对于整数说明符（d、i、o、u、x、X）：precision 指定了要写入的数字的最小位数。如果写入的值短于该数，结果会用前导零来填充。如果写入的值长于该数，结果不会被截断。精度为 0 意味着不写入任何字符。</td>    </tr>    <tr><!-- 2 -->        <td align="left">对于 e、E 和 f 说明符：要在小数点后输出的小数位数。</td>    </tr>    <tr><!-- 3 -->        <td align="left">对于 g 和 G 说明符：要输出的最大有效位数。</td>    </tr>    <tr><!-- 4 -->        <td align="left">对于 s : 要输出的最大字符数,不足number则正常输出，超过则截断。默认情况下，所有字符都会被输出，直到遇到末尾的空字符。</td>    </tr>    <tr><!-- 5 -->        <td align="left">对于 c 类型：没有任何影响。</td>    </tr>    <tr><!-- 6 -->        <td align="left">当未指定任何精度时，默认为 1。如果指定时不带有一个显式值，则假定为 0。</td>    </tr>    <tr>        <td align="center" width=100px>.*</td>        <td align="left">星号，精度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。<br>但是在尝试的时候似乎有一些数据类型不匹配的情况，不过也用的不多。</td>    </tr></table>【注意】<p>&emsp;&emsp;1.精度格式符以**<code>.</code>**开头，后跟十进制整数。</p><p>&emsp;&emsp;2.对数值型数据的来说，未指定精度（<code>.precision</code>）时，隐含的精度为<code>6</code>位。</p><ul><li>长度（<code>length</code>）</li></ul><p>&emsp;&emsp;详情可查看该网站（含有<code>C99</code>标准）：<a href="https://en.cppreference.com/w/c/io/fprintf">File input/output。</a></p><h3 id="3-3转义字符"><a href="#3-3转义字符" class="headerlink" title="3.3转义字符"></a><font size=3>3.3转义字符</font></h3><table>    <tr>        <td align="center">转义字符</td>        <td align="center">含义</td>        <td align="center">ASCII码(十进制)</td>    </tr>    <tr>        <td align="center">\a</td>        <td align="left">响铃(BEL)</td>        <td align="center">007</td>    </tr>    <tr>        <td align="center">\b</td>        <td align="left">退格(BS)，将当前位置移到前一列</td>        <td align="center">008</td>    </tr>    <tr>        <td align="center">\f</td>        <td align="left">换页(FF)，将当前位置移到下页开头</td>        <td align="center">012</td>    </tr>    <tr>        <td align="center">\n</td>        <td align="left">换行(LF)，将当前位置移到下一行开头</td>        <td align="center">010</td>    </tr>    <tr>        <td align="center">\r</td>        <td align="left">回车(CR)，将当前位置移到本行开头</td>        <td align="center">013</td>    </tr>    <tr>        <td align="center">\t</td>        <td align="left">水平制表(HT)，跳到下一个TAB位置</td>        <td align="center">009</td>    </tr>    <tr>        <td align="center">\v</td>        <td align="left">垂直制表(VT)</td>        <td align="center">011</td>    </tr>    <tr>        <td align="center">\\</td>        <td align="left">反斜线字符 \</td>        <td align="center">092</td>    </tr>    <tr>        <td align="center">\'</td>        <td align="left">单引号字符 ' </td>        <td align="center">039</td>    </tr>    <tr>        <td align="center">\"</td>        <td align="left">双引号字符 " </td>        <td align="center">034</td>    </tr>    <tr>        <td align="center">\?</td>        <td align="left">问号 ？ </td>        <td align="center">063</td>    </tr>    <tr>        <td align="center">\0</td>        <td align="left">空字符(NULL)</td>        <td align="center">000</td>    </tr>    <tr>        <td align="center">\ooo</td>        <td align="left">1-3位八进制数所代表的任意字符</td>        <td align="center">三位八进制</td>    </tr>    <tr>        <td align="center">\xhh</td>        <td align="left">1-2位十六进制数所代表的任意字符</td>        <td align="center">二位十六进制</td>    </tr></table>### <font size=3>3.4实例</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c, str[<span class="number">20</span>]; </span><br><span class="line"><span class="keyword">int</span> a = <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">float</span> pi = <span class="number">3.141592653589</span>; </span><br><span class="line"><span class="keyword">double</span> b = <span class="number">0.123456789123456789</span>; </span><br><span class="line"><span class="built_in">strcpy</span>(str, <span class="string">&quot;strings&quot;</span>);      <span class="comment">/* 将字符串复制到数组 */</span></span><br><span class="line">c = <span class="string">&#x27;\x41&#x27;</span>;                  <span class="comment">/* 两位十六进制转移字符 代表A */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);       <span class="comment">/* 按照十进制整数格式输出，显示 a = 12345 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d%%\n&quot;</span>, a);     <span class="comment">/* 输出%号 结果 a = 12345%             */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %7d\n&quot;</span>, a);      <span class="comment">/* 输出7位十进制整数 左边补空格，显示 a = 12345 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %07d\n&quot;</span>, a);     <span class="comment">/* 输出7位十进制整数 左边补0，显示 a = 0012345  */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %2d\n&quot;</span>, a);      <span class="comment">/* a超过2位，按实际输出 a = 12345             */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %-7d\n&quot;</span>, a);     <span class="comment">/* 输出7位十进制整数 右边补空格，显示 a = 12345  */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pi = %f\n&quot;</span>, pi);     <span class="comment">/* 浮点数默认精度6位小数，结果 f = 13.141593    */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pi = %6.4f\n&quot;</span>, pi);  <span class="comment">/* 输出6列，小数点后4位，结果 f = 3.1416        */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %lf\n&quot;</span>, b);      <span class="comment">/* 输出长浮点数 b = 0.123457                  */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %18.17lf\n&quot;</span>, b); <span class="comment">/* 输出18列，小数点后16位，b = 0.12345678912345678 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %c\n&quot;</span>, c);       <span class="comment">/* 输出字符 c = A */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %x\n&quot;</span>, c);       <span class="comment">/* 以十六进制输出字符的ASCII码 c = 41 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str[] = %s\n&quot;</span>, str); <span class="comment">/* 输出数组字符串str[] = strings    */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str[] = %6.3s\n&quot;</span>, str);<span class="comment">/* 输出最多3个字符的字符串 str[] = str */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-03-C-Language/image-20220105210806637.png" alt="image-20220105210806637" style="zoom:50%;" /><h1 id="二、输入函数"><a href="#二、输入函数" class="headerlink" title="二、输入函数"></a><font size=3>二、输入函数</font></h1><h2 id="1-getchar"><a href="#1-getchar" class="headerlink" title="1.getchar"></a><font size=3>1.<code>getchar</code></font></h2><p>【函数描述】：<code>C标准库&lt;stdio.h&gt;中的函数</code>，从标准输入<code>stdin</code>获取一个字符（一个无符号字符）。</p><p>【函数声明】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getchar</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure><p>【函数参数】：无</p><p>【返回值】：该函数以无符号<code>char</code>强制转换为<code>int</code>的形式返回读取的字符，如果到达文件末尾或发生读错误，则返回<code> EOF(-1)</code>（输入<code>Ctrl+d</code>，就会返回<code> EOF</code>）。</p><p>【函数实例】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">char</span> b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符:&quot;</span>);</span><br><span class="line">a = getchar();</span><br><span class="line">b = <span class="keyword">sizeof</span>(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的字符:&quot;</span>);</span><br><span class="line"><span class="built_in">putchar</span>(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, a = %x, b = %d\n&quot;</span>,a, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-03-C-Language/image-20220106100551934.png" alt="image-20220106100551934" style="zoom: 67%;" /><p>【注意】：通过该函数输入的都是字符，例如输入数字<code>1</code>，实际输入的是字符<code>1</code>。</p><h2 id="2-gets"><a href="#2-gets" class="headerlink" title="2.gets"></a><font size=3>2.<code>gets</code></font></h2><p>【函数描述】：<code>C标准库&lt;stdio.h&gt;中的函数</code>，从标准输入<code>stdin</code>读取一行（以<code>&lt;Enter&gt;</code>结束），并把它存储在<code>str</code>所指向的字符串中。当读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。</p><p>【函数声明】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">gets</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br></pre></td></tr></table></figure><p>【函数参数】：</p><ul><li><code>str</code>： 这是指向一个字符数组的指针，该数组存储了 <code>C</code> 字符串。</li></ul><p>【返回值】：如果成功，该函数返回<code>str</code>。如果发生错误或者到达文件末尾时还未读取任何字符，则返回<code>NULL</code>。</p><p>【函数实例】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符串:&quot;</span>);</span><br><span class="line">gets(str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的字符串:&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str[50] = %s,\n&quot;</span>, str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-03-C-Language/image-20220106101538008.png" alt="image-20220106101538008" style="zoom:60%;" /><p>【注意】：</p><ul><li><code>gets</code>从键盘输入一以<strong>回车结束</strong>的字符串放入<strong>字符数组</strong>中，并自动加**<code>\0</code>**。</li><li>输入字符串长度应小于字符数组维数。</li><li>与<code>scanf</code>函数不同，<code>gets</code>函数并不以<strong>空格</strong>作为字符串输入结束的标志。</li><li>产生警告的原因：在后来的标准中已经移除该函数，取而代之的是<code>fgets</code>。</li></ul><h2 id="3-scanf"><a href="#3-scanf" class="headerlink" title="3.scanf"></a><font size=3>3.<code>scanf</code></font></h2><h3 id="3-1函数说明-1"><a href="#3-1函数说明-1" class="headerlink" title="3.1函数说明"></a><font size=3>3.1函数说明</font></h3><p>【函数描述】：<code>C标准库&lt;stdio.h&gt;中的函数</code>，从标准输入 <code>stdin</code> 读取格式化输入。</p><p>【函数声明】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span></span><br></pre></td></tr></table></figure><p>【调用格式】：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;&lt;格式化字符串&gt;&quot;</span>, &lt;地址表&gt;);</span><br></pre></td></tr></table></figure><p>【函数参数】：</p><ul><li>格式化字符串（<code>format</code> ）：这是 <code>C</code> 字符串，包含了以下各项中的一个或多个：<strong>空格字符、非空格字符 和 <code>format</code> 说明符</strong>。<code>format</code> 说明符形式为:<code>%[*][width][modifiers]type</code></li></ul><table>    <tr>        <td align="center">参数</td>        <td align="center">描述</td>    </tr>    <tr>        <td align="center">*</td>        <td align="left">这是一个可选的星号，表示数据是从流 stream 中读取的，但是可以被忽视，即它不存储在对应的参数中。</td>    </tr>    <tr>        <td align="center">width</td>        <td align="left">这指定了在当前读取操作中读取的最大字符数。</td>    </tr>    <tr>        <td align="center">modifiers</td>        <td align="left">为对应的附加参数所指向的数据指定一个不同于整型（针对 d、i 和 n）、无符号整型（针对 o、u 和 x）或浮点型（针对 e、f 和 g）的大小。</td>    </tr>    <tr>        <td align="center">type</td>        <td align="left">一个字符，指定了要被读取的数据类型以及数据读取方式。具体参见下一个表格。</td>        </tr></table><ul><li>附加参数（地址表）：根据不同的<code>format</code>字符串，函数可能需要一系列的附加参数，每个参数包含了一个要被插入的值，替换了<code>format</code>参数中指定的每个<code> %</code>标签。参数的个数应与<code>%</code>标签的个数相同。</li></ul><p>【返回值】：如果成功，该函数返回成功匹配和赋值的个数。如果到达文件末尾或发生读错误，则返回<code>EOF(-1)</code>。</p><p>【读取结束】：</p><ul><li><code>&lt;space&gt;</code>、<code>Tab</code>、或<code>Enter</code></li><li>遇非法输入</li><li>遇宽度结束</li></ul><h3 id="3-2格式化字符串详解-1"><a href="#3-2格式化字符串详解-1" class="headerlink" title="3.2格式化字符串详解"></a><font size=3>3.2格式化字符串详解</font></h3><ul><li><code>*</code></li></ul><p>&emsp;&emsp;基本没有用过，这里不再说明，以后用到了再补充。</p><ul><li>格式字符(<code>type</code>)</li></ul><table>    <tr>        <td align="center" width=100px>格式字符</td>        <td align="center" width=100px>形式</td>        <td align="center">意义</td>    </tr>    <tr>        <td align="center" width=100px>i, d</td>        <td align="center" width=100px>%i, %d</td>        <td align="left">输入或读取十进制整数，数字前面的 + 或 - 号是可选的。</td>    </tr>    <tr>        <td align="center" width=100px>u</td>        <td align="center" width=100px>%u</td>        <td align="left">输入或读取十进制无符号整数。</td>    </tr>    <tr>        <td align="center" width=100px>o</td>        <td align="center" width=100px>%o</td>        <td align="left">输入或读取八进制无符号整数。</td>    </tr>    <tr>        <td align="center" width=100px>x, X</td>        <td align="center" width=100px>%x, %X</td>        <td align="left">输入或读取十六进制无符号整数。</td>    </tr>    <tr>        <td align="center" width=100px>f, F</td>        <td align="center" width=100px>%f, %F</td>        <td align="left" rowspan="3">输入或读取小数形式(指数形式浮点小数)浮点数。</td>    </tr>    <tr>        <td align="center" width=100px>e, E</td>        <td align="center" width=100px>%e, %E</td>    </tr>    <tr>        <td align="center" width=100px>g, G</td>        <td align="center" width=100px>%g, %G</td>    </tr>    <tr>        <td align="center" width=100px>c</td>        <td align="center" width=100px>%c</td>        <td align="left">输入或读取单个字符。空格和转义字符作为有效字符输入。</td>    </tr>    <tr>        <td align="center" width=100px>s</td>        <td align="center" width=100px>%s</td>        <td align="left">输入或读取字符串，这将读取连续字符，直到遇到一个空格字符（空格字符可以是空白、换行和制表符）。</td>    </tr></table><p>【注意】：</p><p>&emsp;&emsp;1.输入<code>double</code>类型数据必须用<code>lf</code>，不能用<code>f</code>。</p><p>&emsp;&emsp;2.输入<code>%</code>，可以用<code>%%</code>。</p><ul><li>数据宽度(<code>width</code>)</li></ul><table>    <tr>        <td align="center" width=100px>参数</td>        <td align="center">描述</td>    </tr>    <tr>        <td align="center">number</td>        <td align="left">指定输入数据宽度，遇空格或不可转换字符结束。</td>    </tr></table><ul><li>修饰符(<code>modifiers</code>)</li></ul><table>    <tr>        <td align="center" width=100px>参数</td>        <td align="center">描述</td>    </tr>    <tr>        <td align="center">h</td>        <td align="left">用于d, o, x前，指定输入为short型整数。</td>    </tr>    <tr>        <td align="center" rowspan="2">l</td>        <td align="left">用于d, o, x前，指定输入为long型整数。</td>    </tr>    <tr>        <td align="left">用于e, f前，指定输入为double型实数。</td>    </tr>    <tr>        <td align="center">*</td>        <td align="left">抑制符，指定输入项读入后不赋给变量。</td>        </tr></table><h3 id="3-3地址表详解"><a href="#3-3地址表详解" class="headerlink" title="3.3地址表详解"></a><font size=3>3.3地址表详解</font></h3><p>&emsp;&emsp;<code>scanf</code>函数读取时，后边的地址表代表的是地址，也就是说，必须是地址的形式。</p><table>    <tr>        <td align="center" width=100px>类型</td>        <td align="left">说明</td>    </tr>    <tr>        <td align="center" width=100px>变量</td>        <td align="left">对于变量，应该加上 & 符号，如：&a, &b等。</td>    </tr>    <tr>        <td align="center" width=100px>数组</td>        <td align="left">对于数组，数组名就代表了该数组的起始地址，所以不需要加 & 。如：a[12]&rarr;a即可。</td>    </tr>    <tr>        <td align="center" width=100px>指针</td>        <td align="left">对于指针，指针名就代表了该指针指向的地址，所以不需要加 & 。如： *p &rarr; p 即可。</td>    </tr></table><h3 id="3-4一般用法实例"><a href="#3-4一般用法实例" class="headerlink" title="3.4一般用法实例"></a><font size=3>3.4一般用法实例</font></h3><ul><li>格式字符串必须严格按书写格式输入</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, a1, a2;</span><br><span class="line"><span class="keyword">int</span> b, b1, b2;</span><br><span class="line"><span class="keyword">int</span> c, c1, c2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的数据为:a = %d, b = %d, c = %d\n&quot;</span>, a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,&amp;a1, &amp;b1, &amp;c1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的数据为:a1 = %d, b1 = %d, c1 = %d\n&quot;</span>, a1, b1, c1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a2, &amp;b2, &amp;c2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的数据为:a2 = %d, b2 = %d, c2 = %d\n&quot;</span>, a2, b2, c2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-03-C-Language/image-20220106115533901.png" alt="image-20220106115533901" style="zoom:67%;" /><p>【注意】：</p><p>&emsp;&emsp;1.<code>scanf</code>中的格式字符串中除了<code>%</code>部分的格式字符，其他的自行添加的（如<code>,</code>、<code>其他的字母</code>等）在输入的时候要严格按照格式一起输入，否则输入的数据会有问题。经实验证明，格式字符串中的空格似乎不会对输入结果产生影响。</p><p>&emsp;&emsp;2.在同时进行多个数字变量的数据输入时，相邻数据之间可以用<code>&lt;space&gt;</code>、<code>&lt;Tab&gt;</code>或者<code>&lt;Enter&gt;</code>均可，但要注意自己是否添加了其他字符。</p><ul><li>字符输入时的空格</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">char</span> b;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">char</span> d;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c%c%c&quot;</span>,&amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的字符为:a = %c, b = %c, c = %c\n&quot;</span>, a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的字符为:d = %c\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-03-C-Language/image-20220106155105187.png" alt="image-20220106155105187" style="zoom:67%;" /><p>【注意】：</p><p>&emsp;&emsp;1.在用<code>%c</code>进行单个字符输入时，<strong>空格和转义字符作为有效字符输入</strong>。</p><p>&emsp;&emsp;2.在测试过程中，若有连续两个<code>scanf</code>函数进行输入时，上一个<code>scanf</code>多余出来的数据（**包括最后的<code>&lt;Enter&gt;</code>**）将会直接作为下一个<code>scanf</code>的输入。</p><ul><li>字符串输入时的空格</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str1[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> str2[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符串:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的字符串为:str[20] = %s\n&quot;</span>, str1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符串:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的字符串为:str[20] = %s\n&quot;</span>, str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-03-C-Language/image-20220106155842151.png" alt="image-20220106155842151" style="zoom:67%;" /><p>【注意】：</p><p>&emsp;&emsp;1.<code>%s</code>进行字符串输入时，遇到<code>&lt;space&gt;</code>即认为该数据结束。</p><p>&emsp;&emsp;2.若有连续两个<code>scanf</code>函数进行输入时，上一个<code>scanf</code>输入的数据若有<code>&lt;space&gt;</code>，则<code>&lt;space&gt;</code>后的数据，将会直接作为下一个<code>scanf</code>的输入。</p><ul><li>其他实例（也要注意）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y,m,d;</span><br><span class="line"><span class="keyword">int</span> y1,m1,d1;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> b;</span><br><span class="line"><span class="keyword">float</span> c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%4d%2d%2d&quot;</span>, &amp;y, &amp;m, &amp;d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的数据为:y = %d, m = %d, d = %d\n&quot;</span>, y, m, d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line"><span class="comment">/* scanf(&quot;%4d%*3d%2d&quot;, &amp;y1, &amp;m1, &amp;d1); 将报too many arguments for format的waring*/</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%4d%*3d%2d&quot;</span>, &amp;y1, &amp;d1); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的数据为:y1 = %d, m1 = %d, d1 = %d\n&quot;</span>, y1, m1, d1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%c%f&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的数据为:a = %d, b = %c, c = %f\n&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-03-C-Language/image-20220106161356110.png" alt="image-20220106161356110" style="zoom:67%;" /><p>【注意】：</p><p>&emsp;&emsp;1.输入数据时，要格外注意遇以下情况认为该数据结束：遇**<code>&lt;space&gt;</code>、<code>Tab</code>、或<code>Enter</code>；遇非法输入；遇宽度结束**。</p><p>&emsp;&emsp;2.一定要注意上一次的数据输入是否还有余留，可能会导致后续输入出现问题，具体处理方法看后文。</p><ul><li>字符输入时，最后的换行的处理</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="comment">// getchar();     /* 加上此行，吸收 &lt;Enter&gt; 或者可以用 scanf(&quot;%*c%c&quot;, &amp;x); */</span></span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x = %d, ch=%d\n&quot;</span>, x, ch); <span class="comment">/* \n 的十进制为 10 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-03-C-Language/image-20220106163053444.png" alt="image-20220106163053444" style="zoom:67%;" /><h3 id="3-5scanf缓冲区处理实例"><a href="#3-5scanf缓冲区处理实例" class="headerlink" title="3.5scanf缓冲区处理实例"></a><font size=3>3.5<code>scanf</code>缓冲区处理实例</font></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span>) ; <span class="comment">//清除缓冲区的内容</span></span><br></pre></td></tr></table></figure><p>【说明】：输入流中多余的字符均可通过此行代码处理。</p><h3 id="3-6scanf其他用法实例"><a href="#3-6scanf其他用法实例" class="headerlink" title="3.6scanf其他用法实例"></a><font size=3>3.6<code>scanf</code>其他用法实例</font></h3><ul><li>读取带空格的字符串</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">30</span>]; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符串:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,str); <span class="comment">//读到&#x27;\n&#x27;结束读取</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入的字符串为:%s\n&quot;</span>,str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>另外几种</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]%*c&quot;</span>,str); <span class="comment">/* 遇到&#x27;\n&#x27;结束读取输入的字符,并存入str,然后再抛弃一个字符 */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*[^\n]%*c&quot;</span>);<span class="comment">/* 遇到&#x27;\n&#x27;结束读取输入的字符,并将其读到的数据抛弃,然后再抛弃一个字符（其实这个字符是&#x27;\n&#x27;），此时缓存中不存在任何字符 */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span>) ; <span class="comment">/* 清除缓冲区的内容 */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*[^\n]&quot;</span>); <span class="comment">/* 与上边的循环等价 */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;  </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*[^a]%*c%c&quot;</span>,&amp;ch); <span class="comment">/* 遇到字符a停止读取，并舍弃a, 将a后的一个字符存入变量ch */</span></span><br></pre></td></tr></table></figure><p>【参考网站】</p><table>    <tr>        <td align="center">cppreference</td>        <td align="left"><a href="https://en.cppreference.com/w/">https://en.cppreference.com/w/</a></td>    </tr>    <tr>        <td align="center">Cplusplus</td>        <td align="left"><a href="http://www.cplusplus.com/">http://www.cplusplus.com/</a></td>    </tr>    <tr>        <td align="center">TutorialsPoint</td>        <td align="left"><a href="https://www.tutorialspoint.com/index.htm">https://www.tutorialspoint.com/index.htm</a></td>    </tr></table>]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】LV1-02-C语言-2变量与运算符</title>
      <link href="post/ce2c2639.html"/>
      <url>post/ce2c2639.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是记录<code>C语言</code>笔记——运算符。</p><span id="more"></span><style>    table tr td{        border:2px solid #000000;        font-size: 13.5px;        font-weight: bold;        height: 25px;    }</style><h1 id="一、运算符"><a href="#一、运算符" class="headerlink" title="一、运算符"></a><font size=3>一、运算符</font></h1><table>    <tr >        <td align="center" width=80px>优先级</td>        <td align="center" width=80px>运算符</td>        <td align="center">名称(含义)</td>        <td align="center">使用形式</td>        <td align="center">结合规律</td>        <td align="center">说明</td>    </tr>    <tr>        <td align="center" width=80px rowspan="4">1</td>        <td align="center" width=80px>[]</td>        <td align="left">数组下标</td>        <td align="left">数组名称[常量表达式]</td>        <td align="center" rowspan="4">左&rarr;右</td>        <td align="center">——</td>    </tr>    <tr>        <td align="center" width=80px>()</td>        <td align="left">圆括号</td>        <td align="left">(表达式）<br>函数名(形参表)</td>        <td align="center">——</td>    </tr>    <tr>        <td align="center" width=80px>.</td>        <td align="left">成员选择(对象)</td>        <td align="left">对象.成员名</td>        <td align="center">——</td>    </tr>    <tr>        <td align="center" width=80px>-></td>        <td align="left">成员选择(指针)</td>        <td align="left">对象指针->成员名</td>        <td align="center">——</td>    </tr>    <tr><!-- 1 -->        <td align="center" width=80px rowspan="9">2</td>        <td align="center" width=80px>-</td>        <td align="left">负号运算符</td>        <td align="left">-表达式</td>        <td align="center" rowspan="9"  style="color: red">左&larr;右</td>        <td align="center" rowspan="7">单目运算符</td>    </tr>    <tr><!-- 2 -->        <td align="center" width=80px>~</td>        <td align="left">按位取反运算符</td>        <td align="left">~表达式</td>    </tr>    <tr><!-- 3 -->        <td align="center" width=80px>++</td>        <td align="left">自增运算符</td>        <td align="left">++变量名<br>变量名++</td>    </tr>    <tr> <!-- 4 -->        <td align="center" width=80px>--</td>        <td align="left">自减运算符</td>        <td align="left">--变量名<br>变量名--</td>    </tr>    <tr><!-- 5 -->        <td align="center" width=80px>*</td>        <td align="left">取值运算符</td>        <td align="left">*指针变量</td>    </tr>    <tr><!-- 6 -->        <td align="center" width=80px>&</td>        <td align="left">取地址运算符</td>        <td align="left">&变量名</td>    </tr>    <tr><!-- 7 -->        <td align="center" width=80px>!</td>        <td align="left">逻辑非运算符</td>        <td align="left">!表达式</td>    </tr>    <tr><!-- 8 -->        <td align="center" width=80px>(类型)</td>        <td align="left">强制类型转换</td>        <td align="left">(数据类型)表达式</td>        <td align="center">——</td>    </tr>    <tr><!-- 9 -->        <td align="center" width=80px>sizeof</td>        <td align="left">长度运算符</td>        <td align="left">sizeof(表达式)</td>        <td align="center">——</td>    </tr>    <tr><!-- 1 -->        <td align="center" width=80px rowspan="3">3</td>        <td align="center" width=80px>*</td>        <td align="left">乘</td>        <td align="left">表达式 * 表达式</td>        <td align="center" rowspan="3">左&rarr;右</td>        <td align="center" rowspan="3">双目运算符</td>    </tr>    <tr><!-- 2 -->        <td align="center" width=80px>/</td>        <td align="left">除</td>        <td align="left">表达式 / 表达式</td>    </tr>    <tr><!-- 3 -->        <td align="center" width=80px>%</td>        <td align="left">余数(取模)</td>        <td align="left">整型表达式 % 整型表达式</td>    </tr>    <tr><!-- 1 -->        <td align="center" width=80px rowspan="2">4</td>        <td align="center" width=80px>+</td>        <td align="left">加</td>        <td align="left">表达式 + 表达式</td>        <td align="center" rowspan="2">左&rarr;右</td>        <td align="center" rowspan="2">双目运算符</td>    </tr>    <tr><!-- 2 -->        <td align="center" width=80px>-</td>        <td align="left">减</td>        <td align="left">表达式 - 表达式</td>    </tr>    <tr><!-- 1 -->        <td align="center" width=80px rowspan="2">5</td>        <td align="center" width=80px> << </td>        <td align="left">左移</td>        <td align="left">变量 << 表达式</td>        <td align="center" rowspan="2">左&rarr;右</td>        <td align="center" rowspan="2">双目运算符</td>    </tr>    <tr><!-- 2 -->        <td align="center" width=80px>  >> </td>        <td align="left">右移</td>        <td align="left">变量 >> 表达式</td>    </tr>    <tr><!-- 1 -->        <td align="center" width=80px rowspan="4">6</td>        <td align="center" width=80px> > </td>        <td align="left">大于</td>        <td align="left">表达式 > 表达式</td>        <td align="center" rowspan="4">左&rarr;右</td>        <td align="center" rowspan="4">双目运算符</td>    </tr>    <tr><!-- 2 -->        <td align="center" width=80px>  >= </td>        <td align="left">大于等于</td>        <td align="left">表达式 >= 表达式</td>    </tr>    <tr><!-- 3 -->        <td align="center" width=80px>  < </td>        <td align="left">小于</td>        <td align="left">表达式 < 表达式</td>    </tr>    <tr><!-- 4 -->        <td align="center" width=80px>  <= </td>        <td align="left">小于等于</td>        <td align="left">表达式 <= 表达式</td>    </tr>    <tr><!-- 1 -->        <td align="center" width=80px rowspan="2">7</td>        <td align="center" width=80px> == </td>        <td align="left">等于</td>        <td align="left">表达式 == 表达式</td>        <td align="center" rowspan="2">左&rarr;右</td>        <td align="center" rowspan="2">双目运算符</td>    </tr>    <tr><!-- 2 -->        <td align="center" width=80px>  !== </td>        <td align="left">不等于</td>        <td align="left">表达式 !== 表达式</td>    </tr>    <tr>        <td align="center" width=80px>8</td>        <td align="center" width=80px>  & </td>        <td align="left">按位与</td>        <td align="left">表达式 & 表达式</td>        <td align="center">左&rarr;右</td>        <td align="center">双目运算符</td>    </tr>    <tr>        <td align="center" width=80px>9</td>        <td align="center" width=80px>  ^ </td>        <td align="left">按位异或</td>        <td align="left">表达式 ^ 表达式</td>        <td align="center">左&rarr;右</td>        <td align="center">双目运算符</td>    </tr>    <tr>        <td align="center" width=80px>10</td>        <td align="center" width=80px>  | </td>        <td align="left">按位或</td>        <td align="left">表达式 | 表达式</td>        <td align="center">左&rarr;右</td>        <td align="center">双目运算符</td>    </tr>    <tr>        <td align="center" width=80px>11</td>        <td align="center" width=80px>  && </td>        <td align="left">逻辑与</td>        <td align="left">表达式 && 表达式</td>        <td align="center">左&rarr;右</td>        <td align="center">双目运算符</td>    </tr>    <tr>        <td align="center" width=80px>12</td>        <td align="center" width=80px>  || </td>        <td align="left">逻辑与</td>        <td align="left">表达式 || 表达式</td>        <td align="center">左&rarr;右</td>        <td align="center">双目运算符</td>    </tr>    <tr>        <td align="center" width=80px>13</td>        <td align="center" width=80px>  ? : </td>        <td align="left">逻辑与</td>        <td align="left">表达式1 ? 表达式2 : 表达式3</td>        <td align="center"  style="color: red">左&larr;右</td>        <td align="center">三目运算符</td>    </tr>    <tr><!-- 1 -->        <td align="center" width=80px rowspan="11">14</td>        <td align="center" width=80px>=</td>        <td align="left">赋值运算符</td>        <td align="left">变量 = 表达式</td>        <td align="center" rowspan="11"  style="color: red">左&larr;右</td>        <td align="center">——</td>    </tr>    <tr><!-- 2 -->        <td align="center" width=80px>/=</td>        <td align="left">除后赋值</td>        <td align="left">变量 /= 表达式</td>        <td align="center">——</td>    </tr>    <tr><!-- 3 -->        <td align="center" width=80px>*=</td>        <td align="left">乘后赋值</td>        <td align="left">变量 *= 表达式</td>        <td align="center">——</td>    </tr>    <tr><!-- 4 -->        <td align="center" width=80px>%=</td>        <td align="left">取模后赋值</td>        <td align="left">变量 %= 表达式</td>        <td align="center">——</td>    </tr>    <tr><!-- 5 -->        <td align="center" width=80px>+=</td>        <td align="left">加后赋值</td>        <td align="left">变量 += 表达式</td>        <td align="center">——</td>    </tr>    <tr><!-- 6 -->        <td align="center" width=80px>-=</td>        <td align="left">减后赋值</td>        <td align="left">变量 -= 表达式</td>        <td align="center">——</td>    </tr>    <tr><!-- 7 -->        <td align="center" width=80px><<=</td>        <td align="left">左移后赋值</td>        <td align="left">变量 <<= 表达式</td>        <td align="center">——</td>    </tr>    <tr><!-- 8 -->        <td align="center" width=80px>>>=</td>        <td align="left">右移后赋值</td>        <td align="left">变量 >>= 表达式</td>        <td align="center">——</td>    </tr>    <tr><!-- 9 -->        <td align="center" width=80px>&=</td>        <td align="left">按位与后赋值</td>        <td align="left">变量 &= 表达式</td>        <td align="center">——</td>    </tr>    <tr><!-- 10 -->        <td align="center" width=80px>^=</td>        <td align="left">按位异或后赋值</td>        <td align="left">变量 ^= 表达式</td>        <td align="center">——</td>    </tr>    <tr><!-- 11 -->        <td align="center" width=80px>|=</td>        <td align="left">按位或后赋值</td>        <td align="left">变量 |= 表达式</td>        <td align="center">——</td>    </tr>    <tr>        <td align="center" width=80px>15</td>        <td align="center" width=80px>  , </td>        <td align="left">逗号运算符</td>        <td align="left">表达式1, 表达式2, …, 表达式n</td>        <td align="center">左&rarr;右</td>        <td align="center">——</td>    </tr></table>【注意】：<ul><li>优先级数字越小，优先级越高。</li><li>同一优先级的运算符，运算次序由结合方向决定</li></ul><h1 id="二、位逻辑运算"><a href="#二、位逻辑运算" class="headerlink" title="二、位逻辑运算"></a><font size=3>二、位逻辑运算</font></h1><h2 id="1-与"><a href="#1-与" class="headerlink" title="1.与"></a><font size=3>1.与</font></h2><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">A &amp; B</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><h2 id="2-或"><a href="#2-或" class="headerlink" title="2.或"></a><font size=3>2.或</font></h2><table><thead><tr><th align="center">A</th><th>B</th><th align="center">A | B</th></tr></thead><tbody><tr><td align="center">1</td><td>1</td><td align="center">1</td></tr><tr><td align="center">1</td><td>0</td><td align="center">1</td></tr><tr><td align="center">0</td><td>1</td><td align="center">1</td></tr><tr><td align="center">0</td><td>0</td><td align="center">0</td></tr></tbody></table><h2 id="3-非"><a href="#3-非" class="headerlink" title="3.非"></a><font size=3>3.非</font></h2><table><thead><tr><th align="center">A</th><th align="center">!A</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td></tr></tbody></table><h2 id="4-异或"><a href="#4-异或" class="headerlink" title="4.异或"></a><font size=3>4.异或</font></h2><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">A ^ B</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><p>【<strong>相同为0，不同为1</strong>】</p><h2 id="5-同或"><a href="#5-同或" class="headerlink" title="5.同或"></a><font size=3>5.同或</font></h2><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">!(A^B)</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr></tbody></table><p>【<strong>相同为1，不同为0</strong>】</p>]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】LV1-01-C语言-1数据类型</title>
      <link href="post/e8ba6a9c.html"/>
      <url>post/e8ba6a9c.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是记录<code>C语言</code>笔记——数据类型。</p><span id="more"></span><h1 id="一、数据表示"><a href="#一、数据表示" class="headerlink" title="一、数据表示"></a><font size=3>一、数据表示</font></h1><h2 id="1-数值数据"><a href="#1-数值数据" class="headerlink" title="1.数值数据"></a><font size=3>1.数值数据</font></h2><table>    <tr>        <td align="center">十进制</td>        <td align="center">二进制</td>        <td align="center">八进制</td>        <td align="center">十六进制</td>    </tr>    <tr>        <td align="center">0</td>        <td align="center">0000</td>        <td align="center">0</td>        <td align="center">0</td>    </tr>    <tr>        <td align="center">1</td>        <td align="center">0001</td>        <td align="center">1</td>        <td align="center">1</td></tr>    <tr>        <td align="center">2</td>        <td align="center">0010</td>        <td align="center">2</td>        <td align="center">2</td>    </tr>    <tr>        <td align="center">3</td>        <td align="center">0011</td>        <td align="center">3</td>        <td align="center">3</td>    </tr>    <tr>        <td align="center">4</td>        <td align="center">0100</td>        <td align="center">4</td>        <td align="center">4</td>    </tr>    <tr>        <td align="center">5</td>        <td align="center">0101</td>        <td align="center">5</td>        <td align="center">5</td>    </tr>    <tr>        <td align="center">6</td>        <td align="center">0110</td>        <td align="center">6</td>        <td align="center">6</td>    </tr>    <tr>        <td align="center">7</td>        <td align="center">0111</td>        <td align="center">7</td>        <td align="center">7</td>    </tr>    <tr>        <td align="center">8</td>        <td align="center">1000</td>        <td align="center">10</td>        <td align="center">8</td>    </tr>    <tr>        <td align="center">9</td>        <td align="center">1001</td>        <td align="center">11</td>        <td align="center">9</td>    </tr>    <tr>        <td align="center">10</td>        <td align="center">1010</td>        <td align="center">12</td>    </td><td align="center">a</td></tr>    <tr>        <td align="center">11</td>        <td align="center">1011</td>        <td align="center">13</td>        <td align="center">b</td>    </tr>    <tr>        <td align="center">12</td>        <td align="center">1100</td>        <td align="center">14</td>        <td align="center">c</td>    </tr>    <tr>        <td align="center">13</td>        <td align="center">1101</td>        <td align="center">15</td>        <td align="center">d</td>    </tr>    <tr>        <td align="center">14</td>        <td align="center">1110</td>        <td align="center">16</td>        <td align="center">e</td>    </tr>    <tr>        <td align="center">15</td>        <td align="center">1111</td>        <td align="center">17</td>        <td align="center">f</td>    </tr></table><h2 id="2-非数值数据-ASCII"><a href="#2-非数值数据-ASCII" class="headerlink" title="2.非数值数据(ASCII)"></a><font size=3>2.非数值数据(<code>ASCII</code>)</font></h2><p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Linux/LV1-01-C-Language/1641269764160.png" alt="1641269764160"></p><h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a><font size=3>二、数据类型</font></h1><h2 id="1-原码、反码、补码"><a href="#1-原码、反码、补码" class="headerlink" title="1.原码、反码、补码"></a><font size=3>1.原码、反码、补码</font></h2><ul><li>机器数</li></ul><p>&emsp;&emsp;机器数就是一个数在计算机中的二进制表示，计算机中机器数的最高位是符号位，正数符号位为<code>0</code>，负数符号位为<code>1</code>。机器数包含原码、反码和补码三种表示形式。</p><p>如：数字<code>3</code>若用<code>8</code>位二进制数表示，则机器数为<code>0000 0011</code>，数字<code>-3</code>若用<code>8</code>位二进制数表示，则机器数为<code>1000 0011</code>。</p><ul><li>机器数的真值</li></ul><p>&emsp;&emsp;真值就是带符号位的机器数对应的真正数值。</p><p>如：机器数为<code>0000 0011</code>则，真值为<code>3</code>，机器数为<code>1000 0011</code>，则真值为<code>-3</code>。</p><ul><li>原码</li></ul><p>&emsp;&emsp;若机器字长为<code>n</code>，那么一个数的原码就是用一个<code>n</code>位的二进制数表示出来的机器数，其中最高位为符号位：正数为<code>0</code>，负数为<code>1</code>，位数不够的用<code>0</code>补全。其实就是<code>原码 = 符号位(0或1) + 真值的绝对值</code>。</p><p>如（假设机器字长为<code>8</code>）：<code>3</code>的原码为<code>0000 0011</code>，<code>-3</code>的原码为<code>1000 0011</code>。</p><p>【注意】<code>0</code>的原码有两个：<code>[+0]</code>原码为<code>0000 0000</code>；<code>[-0]</code>原码为<code>1000 0000</code>。</p><ul><li>反码</li></ul><p>&emsp;&emsp;正数的反码就是其<strong>本身</strong>，负数的反码为除了<strong>符号位不变</strong>外，<strong>其他各位取反</strong>。</p><p>如（假设机器字长为<code>8</code>）：<code>3</code>的反码为<code>0000 0011</code>，<code>-3</code>的反码为<code>1111 1100</code>。</p><p>【注意】<code>0</code>的反码有两个：<code>[+0]</code>反码为<code>0000 0000</code>；<code>[-0]</code>反码为<code>1111 1111</code>。</p><ul><li>补码</li></ul><p>&emsp;&emsp;正数的补码就是其<strong>本身</strong>，负数的补码则是<strong>反码加一</strong>。</p><p>如（假设机器字长为<code>8</code>）：<code>3</code>的补码为<code>0000 0011</code>，<code>-3</code>的补码为<code>1111 1101</code>。</p><p>【注意】：</p><p>&emsp;&emsp;<strong>1.<code>0</code>的补码只有一个：<code>[0]</code>补码为<code>0000 0000</code>。</strong></p><p>&emsp;&emsp;<strong>2.（<code>8</code>位数据长度下）<code>-128</code>，没有原码和反码，补码为<code>10000000</code>。</strong></p><ul><li>为什么使用反码和补码</li></ul><p>&emsp;&emsp;在使用原码进行计算的时候，对于人来说，可以轻易识别符号位，轻松知道正负，然后再对其他位来进行计算，对于计算机的设计来说，识别符号位就是一项复杂的工程了，若是能让符号位直接参与计算，那么这样就可以忽略符号位的识别了。</p><p>&emsp;&emsp;对于加法来说，符号位有没有影响不大，但是对于减法来说，计算机是将其转换为加法来进行运算，所以若是通过原码来进行计算（符号位直接参与计算）则：<br>$$<br>\begin{align}<br>5 - 3 =&amp; 2 \<br>      =&amp; 5 + (-3) \<br>      =&amp; 0000 \text{ } 0101(原码) + 1000 \text{ } 0011(原码) \<br>      =&amp; 1000 \text{ } 1000(原码) \<br>      =&amp; -8<br>\end{align}<br>$$<br>显然，计算结果理论上为<code>2</code>，但是计算机按照原码计算出来的数值为<code>-8</code>，所以对减法来说，原码计算的方式不行，于是引入反码，若通过反码进行减法计算，则有：<br>$$<br>\begin{align}<br>5 - 3 =&amp; 2 \<br>      =&amp; 5 + (-3) \<br>      =&amp; 0000 \text{ } 0101(原码) + 1000 \text{ } 0011(原码) \<br>      =&amp; 0000 \text{ } 0101(反码) + 1111 \text{ } 1100(反码) \<br>      =&amp; 1 \text{ } 0000 \text{ } 0001(反码) \<br>      =&amp; 0000 \text{ } 0001(反码) + 0000 0001(高位进位，结果要加1)\<br>      =&amp; 0000 \text{ } 0010(反码，符号位为0，为正数)\<br>      =&amp; 0000 \text{ } 0010(原码)\<br>      =&amp; 2<br>\end{align}<br>$$<br>【注意】反码计算的运算规则：从低到高位逐列进行计算。<code>0+0=0,0+1=1,1+1=0(向高位进1)</code>。若最高位产生了进位，则最后得到的结果要<strong>加1</strong>。</p><p>但是，有一个问题出现了对于相同两个数相减，如：<br>$$<br>\begin{align}<br>1 - 1 =&amp; 0 \<br>      =&amp; 1 + (-1) \<br>      =&amp; 0000 \text{ } 0001(原码) + 1000 \text{ } 0001(原码) \<br>      =&amp; 0000 \text{ } 0001(反码) + 1111 \text{ } 1110(反码) \<br>      =&amp; 1111 \text{ } 1111(反码) \<br>      =&amp; 1000 \text{ } 0000(原码) \<br>      =&amp; -0<br>\end{align}<br>$$<br>显然，计算出的结果的真值是对的，但是结果却是<code>-0</code>，通过上边已经知道<code>0</code>的原码和反码都有2个，所以，用反码进行计算时遇上了<code>0</code>，这样的结果就是不合理的了，于是，又引入了补码，则：<br>$$<br>\begin{align}<br>1 - 1 =&amp; 0 \<br>      =&amp; 1 + (-1) \<br>      =&amp; 0000 \text{ } 0001(原码) + 1000 \text{ } 0001(原码) \<br>      =&amp; 0000 \text{ } 0001(反码) + 1111 \text{ } 1110(反码) \<br>      =&amp; 0000 \text{ } 0001(补码) + 1111 \text{ } 1111(补码) \<br>      =&amp; 1 \text{ } 0000 \text{ } 0000(补码) \<br>      =&amp; 0000 \text{ } 0000(补码，最高位进位，舍去进位) \<br>      =&amp; 0000 \text{ } 0000(最高位为0，是正数) \<br>      =&amp; 0<br>\end{align}<br>$$<br>【注意】补码计算时，若最高位产生进位，则舍去进位，注意与反码相区别。</p><h2 id="2-数据类型及标识符"><a href="#2-数据类型及标识符" class="headerlink" title="2.数据类型及标识符"></a><font size=3>2.数据类型及标识符</font></h2><table>    <tr>        <td align="center">分类</td>        <td align="center">数据类型</td>        <td align="center">标识符</td>    </tr>    <tr>        <td align="center" rowspan="6">基本类型</td>        <td align="center">整型</td>        <td align="center">int</td>    </tr>    <tr>        <td align="center">字符型</td>        <td align="center">char</td>    </tr>    <tr>        <td align="center" rowspan="2">浮点型</td>        <td align="center">float(单精度)</td>    </tr>    <tr>        <td align="center">double(双精度)</td>    </tr>    <tr>        <td align="center">枚举型</td>        <td align="center">enum</td>    </tr>    <tr>        <td align="center">指针型</td>        <td align="center">无</td>    </tr>    <tr>        <td align="center" rowspan="3">构造类型</td>        <td align="center">结构体</td>        <td align="center">struct</td>    </tr>    <tr>        <td align="center">共用体</td>        <td align="center">union</td>    </tr>    <tr>        <td align="center">数组</td>        <td align="center">无</td>    </tr>    <tr>        <td align="center" >空类型</td>        <td align="center">空类型</td>        <td align="center">void</td>    </tr></table>## <font size=3>3.不同系统中数据类型长度</font><table>    <tr><!-- 第1行 -->        <td align="center" rowspan="2">常用数据类型</td> <!-- 第1列 -->        <td align="center" colspan="2">16位平台</td><!-- 第2列 -->                                                <!-- 第3列 -->        <td align="center" colspan="2">32位平台</td><!-- 第4列 -->                                                <!-- 第5列 -->        <td align="center" colspan="2">64位平台</td><!-- 第6列 -->                                                <!-- 第7列 -->    </tr>    <tr><!-- 第2行 -->                                               <!-- 第1列 -->        <td align="center">字节数</td><!-- 第2列 -->        <td align="center">位数</td><!-- 第3列 -->        <td align="center">字节数</td><!-- 第4列 -->        <td align="center">位数</td><!-- 第5列 -->        <td align="center">字节数</td><!-- 第6列 -->        <td align="center">位数</td><!-- 第7列 -->    </tr>    <tr> <!-- 第3行 -->        <td align="center">char<br>unsigned char</td><!-- 第1列 -->        <td align="center">1</td><!-- 第2列 -->        <td align="center">8</td><!-- 第3列 -->        <td align="center">1</td><!-- 第4列 -->        <td align="center">8</td><!-- 第5列 -->        <td align="center">1</td><!-- 第6列 -->        <td align="center">8</td><!-- 第7列 -->    </tr>    <tr> <!-- 第4行 -->        <td align="center">short<br>unsigned short</td><!-- 第1列 -->        <td align="center">2</td><!-- 第2列 -->        <td align="center">16</td><!-- 第3列 -->        <td align="center">2</td><!-- 第4列 -->        <td align="center">16</td><!-- 第5列 -->        <td align="center">2</td><!-- 第6列 -->        <td align="center">16</td><!-- 第7列 -->    </tr>    <tr> <!-- 第5行 -->        <td align="center">int<br>unsigned int</td><!-- 第1列 -->        <td align="center">2</td><!-- 第2列 -->        <td align="center">16</td><!-- 第3列 -->        <td align="center">4</td><!-- 第4列 -->        <td align="center">32</td><!-- 第5列 -->        <td align="center">4</td><!-- 第6列 -->        <td align="center">32</td><!-- 第7列 -->    </tr>    <tr> <!-- 第6行 -->        <td align="center">long<br>unsigned long</td><!-- 第1列 -->        <td align="center">4</td><!-- 第2列 -->        <td align="center">32</td><!-- 第3列 -->        <td align="center" style="font-weight: bold">4</td><!-- 第4列 -->        <td align="center" style="font-weight: bold">32</td><!-- 第5列 -->        <td align="center" style="font-weight: bold; color: red">8</td><!-- 第6列 -->        <td align="center" style="font-weight: bold; color: red">64</td><!-- 第7列 -->    </tr>    <tr> <!-- 第7行 -->        <td align="center">long long</td><!-- 第1列 -->        <td align="center">---</td><!-- 第2列 -->        <td align="center">---</td><!-- 第3列 -->        <td align="center">8</td><!-- 第4列 -->        <td align="center">64</td><!-- 第5列 -->        <td align="center">8</td><!-- 第6列 -->        <td align="center">64</td><!-- 第7列 -->    </tr>    <tr> <!-- 第8行 -->        <td align="center">指针</td><!-- 第1列 -->        <td align="center">2</td><!-- 第2列 -->        <td align="center">16</td><!-- 第3列 -->        <td align="center" style="font-weight: bold">4</td><!-- 第4列 -->        <td align="center" style="font-weight: bold">32</td><!-- 第5列 -->        <td align="center" style="font-weight: bold; color: red">8</td><!-- 第6列 -->        <td align="center" style="font-weight: bold; color: red">64</td><!-- 第7列 -->    </tr>    <tr> <!-- 第9行 -->        <td align="center">bool</td><!-- 第1列 -->        <td align="center">1</td><!-- 第2列 -->        <td align="center">8</td><!-- 第3列 -->        <td align="center">1</td><!-- 第4列 -->        <td align="center">8</td><!-- 第5列 -->        <td align="center">1</td><!-- 第6列 -->        <td align="center">8</td><!-- 第7列 -->    </tr>    <tr> <!-- 第9行 -->        <td align="center">float</td><!-- 第1列 -->        <td align="center">4</td><!-- 第2列 -->        <td align="center">32</td><!-- 第3列 -->        <td align="center">4</td><!-- 第4列 -->        <td align="center">32</td><!-- 第5列 -->        <td align="center">4</td><!-- 第6列 -->        <td align="center">32</td><!-- 第7列 -->    </tr>    <tr> <!-- 第10行 -->        <td align="center">double</td><!-- 第1列 -->        <td align="center">8</td><!-- 第2列 -->        <td align="center">64</td><!-- 第3列 -->        <td align="center">8</td><!-- 第4列 -->        <td align="center">64</td><!-- 第5列 -->        <td align="center">8</td><!-- 第6列 -->        <td align="center">64</td><!-- 第7列 -->    </tr></table>]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ubuntu】VScode安装与配置</title>
      <link href="post/da6e1bb8.html"/>
      <url>post/da6e1bb8.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;<code>VIM</code>很强大，但是还是用<code>VScode</code>更习惯些。那么<code>Ubuntu</code>中的<code>VScode</code>怎么安装？安装后如何从命令行启动？如何创建快捷方式？</p><span id="more"></span><p>【说明】所用环境<code>VMwareWorkstation16.0 + Ubuntu18.04.6 + Win10</code></p><h1 id="一、安装VScode"><a href="#一、安装VScode" class="headerlink" title="一、安装VScode"></a><font size=3>一、安装<code>VScode</code></font></h1><ul><li>下载安装包</li></ul><p>&emsp;&emsp;进入<code>VScode</code>官网，找到<code>.tar.gz</code>，下载免安装的<code>64位</code>压缩包。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://code.visualstudio.com/#alt-downloads</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Software/VScode/image-20220104184534948.png" alt="image-20220104184534948" style="zoom:50%;" /><ul><li>解压压缩包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir 1software</span><br><span class="line">mv 下载/code-stable-x64-1639562789.tar.gz 1software/</span><br><span class="line">tar -zxvf code-stable-x64-1639562789.tar.gz</span><br></pre></td></tr></table></figure><ul><li>运行<code>VScode</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/1software/VSCode-linux-x64/</span><br><span class="line">sudo chmod +x code</span><br><span class="line">./code </span><br></pre></td></tr></table></figure><p>【注意】这里运行该软件必须要在<code>code</code>文件所在文件夹，或者要加上<code>code</code>的绝对路径(也可以是相对路径)。</p><h1 id="二、在终端启动VScode"><a href="#二、在终端启动VScode" class="headerlink" title="二、在终端启动VScode"></a><font size=3>二、在终端启动<code>VScode</code></font></h1><ul><li>查看环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Software/VScode/image-20220104185510825.png" alt="image-20220104185510825"></p><p>&emsp;&emsp;在打印结果中任选一个位置(这里选择<code>/usr/local/bin/</code>)进行下一步。</p><ul><li>创建软链接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s ~/1software/VSCode-linux-x64/code /usr/local/bin/code</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样，不管在哪个目录下，只要在终端输入<code>code</code>即可启动<code>VScode</code>。</p><h1 id="三、创建VScode快捷方式"><a href="#三、创建VScode快捷方式" class="headerlink" title="三、创建VScode快捷方式"></a><font size=3>三、创建<code>VScode</code>快捷方式</font></h1><ul><li>在<code>/usr/share/applications/</code>创建<code>VScode.desktop</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/share/applications/VScode.desktop</span><br></pre></td></tr></table></figure><ul><li>添加快捷方式信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name&#x3D;VScode</span><br><span class="line">Comment&#x3D;Multi-platform code editor for Linux</span><br><span class="line">Exec&#x3D;&#x2F;home&#x2F;hk&#x2F;1software&#x2F;VSCode-linux-x64&#x2F;code</span><br><span class="line">Icon&#x3D;&#x2F;home&#x2F;hk&#x2F;1software&#x2F;VSCode-linux-x64&#x2F;resources&#x2F;app&#x2F;resources&#x2F;linux&#x2F;code.png</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">StartupNotify&#x3D;true</span><br></pre></td></tr></table></figure><p>【注意】<code>Name</code>、<code>Exec</code>、<code>Icon</code>三个参数分别问快捷方式的名称、可执行文件路径、和快捷方式图标。</p><h1 id="四、VScode插件与配置"><a href="#四、VScode插件与配置" class="headerlink" title="四、VScode插件与配置"></a><font size=3>四、<code>VScode</code>插件与配置</font></h1><p>&emsp;&emsp;这里记录一些自己常用的插件（除了字体需要注意一下，其他配置项与<code>Win10</code>一致）以及配置。</p><h2 id="1-插件"><a href="#1-插件" class="headerlink" title="1.插件"></a><font size=3>1.插件</font></h2><table>    <tr>        <td align="center">插件名称</td>        <td align="center">插件用途</td>    </tr>    <tr>        <td align="left">Bracket Pair Colorizer</td>        <td align="left">多彩括号，不同层级的代码块的括号展现不同颜色。</td>    </tr>    <tr>        <td align="left">Material Icon Theme</td>        <td align="left">文件导航窗格不同文件图标样式。</td>    </tr>    <tr>        <td align="left">background-cover</td>        <td align="left">设置VScode背景图片。</td>    </tr>    <tr>        <td align="left">Markdown Preview Enhanced  </td>        <td align="left">完善Markdown预览功能。</td>    </tr></table><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a><font size=3>2.配置</font></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//==========================================================================================</span></span><br><span class="line">    <span class="attr">&quot;tabnine.experimentalAutoImports&quot;</span>: <span class="literal">true</span>,     <span class="comment">//开启自动补全</span></span><br><span class="line">    <span class="comment">//==========================================================================================</span></span><br><span class="line">    <span class="comment">//终端参数配置</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorStyle&quot;</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorBlinking&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.lineHeight&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.letterSpacing&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontSize&quot;</span>: <span class="number">14</span>,  </span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontFamily&quot;</span>: <span class="string">&quot;monospace&quot;</span>, </span><br><span class="line">    <span class="comment">//==========================================================================================</span></span><br><span class="line">    <span class="attr">&quot;window.zoomLevel&quot;</span>: <span class="number">0</span>,                      <span class="comment">//调整窗口的缩放级别</span></span><br><span class="line">    <span class="attr">&quot;files.autoGuessEncoding&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="comment">//==========================================================================================</span></span><br><span class="line">    <span class="comment">//文本编辑窗口配置</span></span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">&quot;editor.fontLigatures&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;&#x27;Courier New&#x27;, &#x27;Courier New&#x27;, Courier New, &#x27;Courier New&#x27;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.fontWeight&quot;</span>: <span class="number">1000</span>,<span class="comment">//控制字体粗细</span></span><br><span class="line">    <span class="attr">&quot;editor.quickSuggestions&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//&quot;editor.renderWhitespace&quot;: &quot;all&quot;,//显示所有空格为点</span></span><br><span class="line">    <span class="comment">//==========================================================================================</span></span><br><span class="line">    <span class="comment">//python语法检查配置</span></span><br><span class="line">    <span class="attr">&quot;python.linting.flake8Enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;python.linting.flake8Args&quot;</span>: [<span class="string">&quot;--max-line-length=248&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;python.linting.pylintEnabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;python.pythonPath&quot;</span>: <span class="string">&quot;D:\\StudySoftware\\MyIDE\\Python\\Python39\\python.exe&quot;</span>,</span><br><span class="line">   <span class="comment">//===========================================================================================</span></span><br><span class="line">    <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;*.vue&quot;</span>: <span class="string">&quot;html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;json.schemaDownload.enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Analog】二极管01-PN结的形成与特性</title>
      <link href="post/1cd72e5c.html"/>
      <url>post/1cd72e5c.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;二极管（<code>Diode</code>），是一种电子元件，具有两不对称电导的电极，只允许电流由单一方向流过，所以最常应用其整流功能。像我们平时见到的<code>LED</code>灯也是二极管的一种，这篇文章就来介绍一下二极管的基础部分———PN结的形成及其特性。<br></p><span id="more"></span><p>&emsp;&emsp;本篇文章中的概念性的内容主要还是参考<strong>康华光</strong>老师的《电子技术基础·模拟部分》第五版，在大学的时候我们专业有一门专业基础课叫模电，用的就是这本书，有什么需要深入了解的，还是请参考这本书。</p><h1 id="1-半导体的基本知识"><a href="#1-半导体的基本知识" class="headerlink" title="1.半导体的基本知识"></a><font size=3>1.半导体的基本知识</font></h1><h2 id="1-1半导体材料"><a href="#1-1半导体材料" class="headerlink" title="1.1半导体材料"></a><font size=3>1.1半导体材料</font></h2><p>&emsp;&emsp;什么是半导体呢？我们平时接触较多的是导体和绝缘体，而在常温下，导电性介于两者之间的这种材料就叫做半导体材料。常见的半导体材料有硅、锗、砷化镓等，而硅更是各种半导体材料中，在商业应用上最具有影响力的一种。</p><h2 id="1-2半导体的共价键"><a href="#1-2半导体的共价键" class="headerlink" title="1.2半导体的共价键"></a><font size=3>1.2半导体的共价键</font></h2><p>&emsp;&emsp;半导体与金属和多数绝缘体一样，都具有晶体结构，相邻的原子以共价键的方式连接。在元素周期表中硅元素排列在第<code>14</code>位，外围电子排布为<code>2，8，4</code>，所以一个硅原子要与另外<code>4</code>个硅原子结合形成共价键，如下图所示，图中展示为二维结果，实际是三维结构。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog01.png" width=60%  height=60%>  <p align="center">图 1 硅的晶体结构二维图</p></div><h2 id="1-3本征半导体"><a href="#1-3本征半导体" class="headerlink" title="1.3本征半导体"></a><font size=3>1.3本征半导体</font></h2><p>&emsp;&emsp;<strong>本征半导体</strong>是一种完全纯净的、结构完整的半导体晶体。半导体的电导率与材料内单位体积中包含的电荷载流子的数目有关，电荷载流子的浓度越高，电导率就越高。<br><br>&emsp;&emsp;在<code>T=0K</code>和没有外界激发的时候，每一个原子的外围电子都被共价键所束缚，这些被束缚的电子对半导体内的传导电流是内有贡献的。但是半导体的共价键中的价电子并不像绝缘体中束缚那么紧，例如在室温（<code>T=300K</code>）的条件下，被束缚的价电子就会获得足够的随机热振动能量而挣脱共价键的束缚，成为自由电子，这种现象被称为<strong>本征激发</strong>，这些自由电子是很容易就在晶体内运动的。<br></p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog02.png" width=60%  height=60%>  <p align="center">图 2 由于随机热振动致使共价键被打破而产生空穴—电子对</p></div><p>&emsp;&emsp;半导体虽然在常温下就有本征激发现象出现，但是其实能挣脱共价键束缚的电子数量也是少的可怜的，拿硅来说，硅的原子密度约为 5x10<sup>22</sup>/cm<sup>3</sup> ，在室温条件下，其本征激发的自由电子浓度 n<sub>i</sub> $\approx$ 1.45x10<sup>10</sup>/cm<sup>3</sup> ，也就是说，室温下 3.45x10<sup>12</sup> 个原子中只有一个电子可以打破共价键束缚成为自由电子。</p><h2 id="1-4空穴"><a href="#1-4空穴" class="headerlink" title="1.4空穴"></a><font size=3>1.4空穴</font></h2><p>&emsp;&emsp;当电子挣脱共价键的束缚成为自由电子后，共价键中就留下了一个空位，这个空位就叫做<strong>空穴</strong>。空穴的出现是半导体区别于导体的一个重要特点。<br><br>&emsp;&emsp;由于共价键出现了空位，在外加电场或者其他能源的作用下，临近的价电子就可以补到这个空位上，而这个价电子原来的位置上就留下了新的空位，以后其他的电子又可以转移到这个新空位上，这就使共价键中出现了一定的电荷迁移。<br><br>&emsp;&emsp;在本征半导体中，共价键中的空穴或者束缚电子移动产生电流的根本原因是由于共价键中出现空穴引起的，只有当共价键中出现了空穴之后，半导体才开始导电。<br><br>&emsp;&emsp;我们可以将空穴看成是一个带<strong>正电荷</strong>的粒子（本来硅原子为中性，但是失去一个电子后就带上了正电荷），它所带的电量与电子相等，符号相反，在外加电场的作用下可以自由地在晶体中运动，从而和自由电子一样可以参与导电，因此空穴也是一种<strong>载流子</strong>，不过这种载流子的运动，是人们根据共价键中出现空位移动而虚拟出来的，它实际上是共价键中束缚电子移动形成的。<br><br>&emsp;&emsp;在本征半导体中，自由电子和空穴总是成对出现，因此在任何时候，本征半导体中的自由电子浓度和空穴浓度总是相等的。在热能的激励下，晶体中的共价键结构被打破，以一定的速率成对地产生自由电子和空穴，温度愈高，其产生率愈高。<br><br>&emsp;&emsp;另一方面，当一个自由电子与一个空穴相遇复合时，即空穴与自由电子相结合而形成一个新的填充的共价键。一旦空穴和自由电子浓度建立起来之后，复合作用是经常性的。当温度一定时，载流子(电子和空穴)的复合率等于产生率，即达到一种动态平衡。<br><br>&emsp;&emsp;当载流子的浓度较高时，晶体的导电能力增强。换句话说，本征半导体的导电率将随温度的增加而增加。</p><h2 id="1-5杂质半导体"><a href="#1-5杂质半导体" class="headerlink" title="1.5杂质半导体"></a><font size=3>1.5杂质半导体</font></h2><p>&emsp;&emsp;在本征半导体中掺入微量的杂质，可以使半导体的导电性能发生显著的改变，根据掺入杂质的不同，杂质半导体可分为空穴（<code>P</code>）型半导体和电子（<code>N</code>）型半导体两大类。</p><div class="note info no-icon 点击查看元素周期表 flat"><table>  <tr>    <td>元素周期表</td>    <td><a href="https://ptable.com/?lang=zh#" target="_blank">https://ptable.com/?lang=zh#</a></td>  </tr></table></div><h3 id="1-5-1P型半导体"><a href="#1-5-1P型半导体" class="headerlink" title="1.5.1P型半导体"></a><font size=3>1.5.1<code>P</code>型半导体</font></h3><p>&emsp;&emsp;在硅的晶体内掺入少量三价元素杂质，如硼等。因硼原子是<code>5</code>号元素，外围电子排布为<code>2,3</code>，只有<code>3</code>个价电子，所以它与周围硅原子组成共价键时，缺少一个电子，在晶体中便会产生一个空位，当相邻共价键上的电子受到热振动或在其他激发条件下获得能量时，就有可能填补这个空位，使硼原子成了不能移动的负离子，而原来硅原子的共价键则因缺少一个电子，形成了空穴，但整个半导体仍呈中性。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog03.png" width=60%  height=60%>  <p align="center">图 3 P型半导体共价键结构</p></div><p>&emsp;&emsp;因为硼原子在硅晶体中能接受电子，故称硼为<strong>受主杂质</strong>或<strong>P(Positive)型杂质</strong>。在硅中加入的受主杂质除硼外，还有铟（<code>49</code>号元素）和铝（<code>13</code>号元素）。<br><br>&emsp;&emsp;值得注意的是，在加入受主杂质产生空穴的同时，并不产生新的自由电子，但原来的本征晶体由于本征激发仍会产生少量的<strong>电子 — 空穴</strong>对。控制掺入杂质的多少，就可以控制空穴数量。在<code>P</code>型半导体中，空穴数远大于自由电子数，在这种半导体中，以<strong>空穴导电</strong>为主，因而空穴为<strong>多数载流子（多子）</strong>，自由电子为<strong>少数载流子（少子）</strong>。离子化的受主原子的负电荷加上自由电子必然与空穴的正电荷相等。</p><h3 id="1-5-2N型半导体"><a href="#1-5-2N型半导体" class="headerlink" title="1.5.2N型半导体"></a><font size=3>1.5.2<code>N</code>型半导体</font></h3><p>&emsp;&emsp;按照上边<code>P</code>型半导体产生的方式，为了在半导体内产生多余的电子，可以将一种叫做<strong>施主杂质</strong>或<strong>N（Negative）型杂质</strong>掺入硅的晶体内。施主原子在掺杂半导体的共价键结构中多余一个电子。在硅工艺中，典型的施主原子有磷（<code>15</code>号元素）、砷（<code>33</code>号元素）和锑（<code>51</code>号元素）。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog04.png" width=60%  height=60%>  <p align="center">图 4 N型半导体共价键结构</p></div><p>&emsp;&emsp;当一个施主原子加入半导体后，其多余的电子易受热激发而挣脱共价键的束缚成为自由电子。自由电子参与传导电流，它移动后，在施主原子的位置上留下一个固定的、不能移动的正离子，但半导体仍保持中性。<br><br>&emsp;&emsp;在产生自由电子的同时，并不产生相应的空穴。正因为掺人施主原子的半导体会有多余的自由电子，故称之为<strong>电子型半导体</strong>或<strong>N型半导体</strong>。在N型半导体中，电子为多数载流子，空穴为少数载流子。</p><h1 id="2-PN结的形成与特性"><a href="#2-PN结的形成与特性" class="headerlink" title="2.PN结的形成与特性"></a><font size=3>2.<code>PN</code>结的形成与特性</font></h1><h2 id="2-1载流子的漂移与扩散"><a href="#2-1载流子的漂移与扩散" class="headerlink" title="2.1载流子的漂移与扩散"></a><font size=3>2.1载流子的漂移与扩散</font></h2><ul><li>漂移</li></ul><p>&emsp;&emsp;由于热能的激发，半导体内的载流子将作随机的无定向移动，载流子在任意方向的平均速度为零。若有电场加到晶体上，则内部载流子将受力做定向移动。对于空穴而言，其移动方向与电场方向相同，而电子则是逆着电场的方向移动。<br><br>&emsp;&emsp;由于电场作用而导致载流子的运动称为<strong>漂移</strong>，其平均漂移速度与电场矢量<code>E</code>成比例。若用 V<sub>n</sub> 和 V<sub>p</sub> 分别表示电子和空穴的漂移速度矢量，则有</p><p>$$<br>\begin{cases}<br>V_p = - \mu_p E \\<br>V_n = \mu_n E<br>\end{cases}<br>$$</p><p>&emsp;&emsp;式子中 $\mu$为比例系数。$\mu_p$称为自由电子的迁移率，负号表明电子的漂移速度矢量与电场方向相反；$\mu_n$称为空穴迁移率，无符号表明空穴的漂移速度矢量与电场方向相同。<br><br>&emsp;&emsp;在室温（<code>T=300K</code>）情况下，硅材料内的电子迁移率$\mu_p$约为$1500cm^2/(V · s)$，空穴的迁移率$\mu_n$约为$475cm^2/(V · s)$。这就是说，对于给定的电场，在硅材料内电子移动的速度约为空穴移动速度的<code>3</code>倍，各种三端器件（含半导体三极管、场效应管等）的导电机制，主要是由空穴或自由电子导电构成。在数字电路或高频模拟电路中，电子导电器件优于空穴导电器件。</p><ul><li>扩散</li></ul><p>&emsp;&emsp;在半导体内，由于制造工艺和运行机制等原因，致使某一特定的区域内，其空穴或电子的浓度高于正常值。基于载流子的浓度差异和随机热运动速度，载流子由高浓度区域向低浓度的区域扩散，从而形成<strong>扩散电流</strong>。如果没有外来的超量载流子的注入或电场的作用，晶体内的载流子浓度趋向于均匀直至扩散电流为零。</p><h2 id="2-2PN结的形成"><a href="#2-2PN结的形成" class="headerlink" title="2.2PN结的形成"></a><font size=3>2.2<code>PN</code>结的形成</font></h2><p>&emsp;&emsp;从前边介绍可以知道，<code>P</code>型半导体中含有受主杂质，在室温下，受主杂质电离为带正电的空穴和带负电的受主离子。<code>N</code>型半导体中含有施主杂质，在室温下，施主杂质电离为带负电的自由电子和带正电的施主离子。此外，<code>P</code>型和<code>N</code>型半导体中还有少数受本征激发产生的自由电子和空穴，通常本征激发产生的载流子要比掺杂产生的载流子少得多。<br><br>&emsp;&emsp;在半导体两个不同的区域分别掺入三价和五价杂质元素，便形成<code>P</code>型区和<code>N</code>型区。这样，在它们的交界处就出现了电子和空穴的浓度差异，<code>N</code>型区内电子浓度很高，而<code>P</code>型区内空穴浓度很高。<br></p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog05.jpg" width=80%  height=80%>  <p align="center">图 5 载流子运动</p></div><p>&emsp;&emsp;电子和空穴都要从浓度高的区域向浓度低的区域扩散。即有一些电子要从<code>N</code>型区向<code>P</code>型区扩散，也有一些空穴要从<code>P</code>型区向<code>N</code>型区扩散，它们扩散的结果就使<code>P</code>区和<code>N</code>区的交界处原来呈现的电中性被破坏了。<code>P</code>区一边失去空穴，留下了带负电的杂质离子；<code>N</code>区一边失去电子，留下了带正电的杂质离子。<br><br>&emsp;&emsp;半导体中的离子虽然也带电，但由于物质结构的关系，它们不能任意移动，因此并不参与导电。这些不能移动的带电粒子集中在<code>P</code>区和<code>N</code>区交界面附近，形成了一个很薄的<strong>空间电荷区</strong>，这就是所谓的<strong>PN结</strong>。在这个区域内，多数载流子已扩散到对方并复合掉了，或者说消耗尽了，因此空间电荷区有时又称为<strong>耗尽区</strong>，它的电阻率很高。扩散越强，空间电荷区越宽。<br><br>&emsp;&emsp;在形成空间电荷区之后，由于正负离子之间的相互作用，在空间电荷区中就形成了一个电场，其方向是从带正电的<code>N</code>区指向带负电的<code>P</code>区。由于这个电场是在<code>PN</code>结区内部形成的，而不是外加电压形成的，故称为<strong>内电场</strong>。显然，这个内电场的方向是阻止载流子扩散运动的。<br></p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog06.png" width=80%  height=80%>  <p align="center">图 6 PN结的形成</p></div><p>&emsp;&emsp;另一方面，根据电场的方向和电子、空穴的带电极性来看，这个内电场将使<code>N</code>区的少数载流子（空穴）向<code>P</code>区漂移，使<code>P</code>区的少数载流子（电子）向<code>N</code>区漂移，漂移运动的方向正好与扩散运动的方向相反。<br><br>&emsp;&emsp;从<code>N</code>区漂移到<code>P</code>区的空穴补充了原来交界面上<code>P</code>区失去的空穴，而从<code>P</code>区漂移到<code>N</code>区的电子补充了原来交界面上<code>N</code>区所失去的电子，这就使空间电荷减少。因此，漂移运动的结果是使空间电荷区<strong>变窄</strong>，其作用正好与扩散运动相反。<br><br>&emsp;&emsp;由此可见，扩散运动和漂移运动是互相联系又互相对立的，扩散运动使空间电荷区加宽，电场增强，对多数载流子扩散的阻力增大，但使少数载流子的漂移增强；而漂移使空间电荷区变窄，电场减弱，又使扩散容易进行。当漂移运动和扩散运动相等时，空间电荷区便处于动态平衡状态，空间电荷区也称为<strong>势垒区</strong>（在<code>PN</code>结空间电荷区内，电子要从<code>N</code>区到<code>P</code>区必须越过一个能量高坡，一般称为势垒）。</p><h2 id="2-3PN结的单向导电性"><a href="#2-3PN结的单向导电性" class="headerlink" title="2.3PN结的单向导电性"></a><font size=3>2.3<code>PN</code>结的单向导电性</font></h2><ul><li>外加正向电压</li></ul><p>&emsp;&emsp;当<code>PN</code>结外加正向电压 $V_F$ ，即 $V_F$ 的正端接<code>P</code>区，负端接<code>N</code>区时，外加电场与<code>PN</code>结内电场方向相反。在这个外加电场作用下，<code>PN</code>结的平衡状态被打破，<code>P</code>区中的多数载流子空穴和<code>N</code>区中的多数载流子电子都要向<code>PN</code>结移动，即<code>P</code>区空穴进入<code>PN</code>结后，就要和原来的一部分负离子中和，使<code>P</code>区的空间电荷量减少。同样，当<code>N</code>区电子进入<code>PN</code>结时，中和了部分正离子，使<code>N</code>区的空间电荷量减少，结果<code>PN</code>结变窄。这时耗尽区厚度变薄，耗尽区中载流子增加，因而电阻的阻值减小，所以通常将这个方向的外加电压称为<strong>正向电压</strong>或<strong>正向偏置电压</strong>。由于半导体本身的体电阻和<code>PN</code>结上的电阻相比，前者的阻值是很小的，所以外加电压作用后，其值将集中降落在<code>PN</code>结上。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog07.png" width=60%  height=60%>  <p align="center">图 7 PN结外加正向电压</p></div><p>&emsp;&emsp;外加电压将使<code>PN</code>结中的电场由平衡状态下的 $E_0$ 减小到 $E_0-E_F$ 。<code>PN</code>结电场强度的减小，有利于<code>P</code>区和<code>N</code>区中多数载流子的扩散运动，形成扩散电流。这时扩散运动将胜过漂移运动，<code>N</code>区电子不断扩散到<code>P</code>区，<code>P</code>区空穴不断扩散到<code>N</code>区。<code>PN</code>结内的电流便由起支配地位的扩散电流所决定，在外电路上形成一个流入<code>P</code>区的电流，称为<strong>正向电流 $I_F$</strong> 。当外加电压 $V_F$ 升高，<code>PN</code>结电场便进一步减弱，扩散电流随之增加，在正常工作范围内，<code>PN</code>结上外加电压只要稍有变化（如<code>0.1V</code>），便能引起电流的显著变化，因此电流 $I_F$ 是随着外加电压急速上升的，这样的情况下，<code>PN</code>结表现为一个阻值很小的电阻，此时也称<strong>PN结导通</strong>，这种情况下由少数载流子形成的漂移电流方向与扩散电流相反，和正向电流相比很小，可以忽略不计。</p><ul><li>外加反向电压</li></ul><p>&emsp;&emsp;当<code>PN</code>结外加反向电压 $V_R$ ，即 $V_R$ 的正端接<code>N</code>区，负端接<code>P</code>区时，外加电场方向与<code>PN</code>结内电场方向相同。在这种外电场作用下，<code>P</code>区中的空穴和<code>N</code>区中的电子都将进一步离开<code>PN</code>结，使耗尽区厚度加宽，这时<code>PN</code>结处于<strong>反向偏置</strong>。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog08.png" width=60%  height=60%>  <p align="center">图 8 PN结外加反向电压</p></div><p>&emsp;&emsp;外加电压将使<code>PN</code>结中的电场由平衡状态下的 $E_0$ 增加到 $E_0+E_R$ 。<code>PN</code>结电场强度增加阻碍多数载流子的扩散运动，因此扩散电流趋近于零。但是，结电场的增加，使<code>N</code>区和<code>P</code>区中的少数载流子更容易产生漂移运动，因此在这种情况下，<code>PN</code>结内的电流由起支配地位的漂移电流所决定。漂移电流的方向与扩散电流相反，表现在外电路上有一个流入<code>N</code>区的<strong>反向电流 $I_R$</strong> ，它是由少数载流子的漂移运动形成的。由于少数载流子的浓度很小，所以 $I_R$ 是很微弱的（一般硅管为微安数量级）。同时，少数载流子是由本征激发产生的，当管子制成后，其数值决定于温度，而几乎与外加电压 $V_R$ 无关。在一定温度<code>T</code>下，由于热激发而产生的少数载流子的数量是一定的，电流的值趋于恒定。这时的反向电流 $I_R$ 就是<strong>反向饱和电流</strong>，用 $I_S$ 表示。<br><br>&emsp;&emsp;由于 $I_S$ 很小，所以<code>PN</code>结在反向偏置时，呈现出一个阻值很大的电阻，此时可认为它基本上是不导电的，称<strong>PN结截止</strong>。但因 $I_S$ 受温度的影响，在某些实际应用中，还必须予以考虑。<br><br>&emsp;&emsp;<em>由此看来，<code>PN</code>结加正向电压时，电阻值很小，<code>PN</code>结导通；加反向电压时，电阻值很大，<code>PN</code>结截止，这就是它的单向导电性。<code>PN</code>结的单向导电性关键在于它的耗尽区的存在，且其宽度随外加电压而变化。</em></p><h2 id="2-3PN结的V-I特性"><a href="#2-3PN结的V-I特性" class="headerlink" title="2.3PN结的V-I特性"></a><font size=3>2.3<code>PN</code>结的<code>V-I</code>特性</font></h2><p>&emsp;&emsp;以硅结型二极管为例，在硅二极管<code>PN</code>结的两端施加正、反向电压时，通过管子的电流如图9所示。根据理论分析，<code>PN</code>结的<code>V-I</code>特性可表达为</p><p>$$\begin{aligned}<br>i_D = I_S(e^{v_D/nV_T}-1)<br>\end{aligned}<br>$$</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog09.png" width=70%  height=70%>  <p align="center">图 9 硅二极管的 V-I 特性</p></div><p>&emsp;&emsp;公式中，$i_D$ 为通过<code>PN</code>结的电流；$v_D$ 为<code>PN</code>结两端的外加电压；<code>n</code>为发射系数，它与<code>PN</code>结的尺寸、材料及通过的电流有关，值在<code>1~2</code>之间；$V_T$ 为温度的电压当量，$V_T = kT/q$ ,其中<code>k</code>为<a href="https://baike.baidu.com/item/玻尔兹曼常数/3152031?fr=aladdin" target="_blank">玻尔兹曼常数<i class="fa fa-external-link-alt"></i></a>，<code>T</code>为热力学温度，即绝对温度（单位为$K$，$0K=-273°C$）,<code>q</code>为<a href="https://baike.baidu.com/item/电荷量/5728792?fr=aladdin" target="_blank">电子电荷量<i class="fa fa-external-link-alt"></i></a>，常温（<code>T = 300K</code>）下，$V_T = 0.026V$；<code>e</code>为自然对数的底；$I_S$为反向饱和电流，对于典型的的分立器件，其典型值约在 $10^{-8}A-10^{-14}A$ 范围内。<br><br><strong>公式理解：</strong><br>&emsp;&emsp;（1）当二极管两端加正向电压的时候，电压 $v_D$ 为正值，当 $v_D$ 比 $V_T$ 大几倍时，公式中的 $e^{v_D/nV_T}$ 远大于<code>1</code>，括号中的<code>1</code>可以忽略，这样二极管的电流 $i_D$ 与电压 $v_D$ 成指数关系。 <br><br>&emsp;&emsp;（2）当二极管两端加反向电压的时候，电压 $v_D$ 为负值，当 $|v_D|$ 比 $nV_T$ 大几倍时，公式中的 $e^{v_D/nV_T}$ 趋近于<code>0</code>，此时 $i_D = - I_S$ 。当温度一定时，反向饱和电流是一个常数 $I_S$ 不随外加反向电压的大小而变化。</p><h2 id="2-4PN结的反向击穿"><a href="#2-4PN结的反向击穿" class="headerlink" title="2.4PN结的反向击穿"></a><font size=3>2.4<code>PN</code>结的反向击穿</font></h2><p>&emsp;&emsp;在测量<code>PN</code>结的<code>V-I</code>特性时，如果加到<code>PN</code>结两端的反向电压增大到一定的数值时，反向电流突然增加，如图10，这个现象就称为<code>PN</code>结的<strong>反向击穿</strong>（电击穿）发生击穿所需的反向电压 $V_BR$ 称为<strong>反向击穿电压</strong>。<code>PN</code>结击穿后电流很大，容易使<code>PN</code>结发热，这个时候<code>PN</code>结的电流和温度进一步升高，从而很容易烧毁<code>PN</code>结，反向击穿电压的大小与<code>PN</code>结的制造参数有关。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog10.png" width=70%  height=70%>  <p align="center">图 10 硅二极管的 V-I 特性</p></div><p><strong>PN结击穿原因：</strong></p><p>&emsp;&emsp;（1）当<code>PN</code>结反向电压增加时，空间电荷区中的电场随着增强。产生漂移运动的少数载流子通过空间电荷区时，在很强的电场作用下获得足够的动能，与晶体原子发生碰撞，从而打破共价键的束缚，形成更多的自由电子—空穴对，这种现象称为<strong>碰撞电离</strong>。新产生的电子和空穴与原有的电子和空穴一样，在强电场作用下获得足够的能量，继续碰撞电离，再产生电子—空穴对，这就是载流子的<strong>倍增效应</strong>。当反向电压增大到某一数值后，载流子的倍增情况就像在陡峻的积雪山坡上发生雪崩一样，载流子增加得多而快，使反向电流急剧增大，于是<code>PN</code>结被击穿，这种击穿称为<strong>雪崩击穿</strong>。<br><br>&emsp;&emsp;（2）<code>PN</code>结击穿的另一个原因是，在加有较高的反向电压下，<code>PN</code>结空间电荷区存在一个很强的电场，它能够破坏共价键的束缚，将电子分离出来产生电子—空穴对，在电场作用下，电子移向<code>N</code>区，空穴移向<code>P</code>区，从而形成较大的反向电流，这种击穿现象称为<strong>齐纳击穿</strong>。发生齐纳击穿需要的电场强度约为 $2*10^5V/cm$ ，这只有在杂质浓度特别高的<code>PN</code>结中才能达到，因为杂质浓度大，空间电荷区内电荷（即杂质离子）密度也大，因而空间电荷区很窄，电场强度就可能很高。<br><br>&emsp;&emsp;齐纳击穿的物理过程和雪崩击穿完全不同。一般整流二极管掺杂浓度没有这么高，它在电击穿中多数是雪崩击穿造成的。齐纳击穿多数出现在特殊的二极管中，如齐纳二极管（稳压管）。<br><br>&emsp;&emsp;上述两种电击穿过程是可逆的，当加在稳压管两端的反向电压降低后，管子仍可以恢复原来的状态。但它有一个前提条件，就是反向电流和反向电压的<strong>乘积不超过<code>PN</code>结容许的耗散功率</strong>，超过了就会因为热量散不出去而使<code>PN</code>结温度上升，直到过热而烧毁，这种现象就是热击穿。所以热击穿和电击穿的概念是不同的，但往往电击穿与热击穿共存。电击穿可为人们所利用（如稳压管），而热击穿则是必须尽量避免的。</p><h2 id="2-5PN结的电容效应"><a href="#2-5PN结的电容效应" class="headerlink" title="2.5PN结的电容效应"></a><font size=3>2.5<code>PN</code>结的电容效应</font></h2><p>&emsp;&emsp;<code>PN</code>结的电容效应直接影响半导体器件（二极管、三极管、场效应管等）的高频开关和性能，<code>PN</code>结有2种电容效应，即扩散电容和势垒电容。</p><ul><li>扩散电容</li></ul><p>&emsp;&emsp;<code>PN</code>结的空间电荷区又称为耗尽区或势垒区,当<code>PN</code>结处于正向偏置时，<code>P</code>区的空穴将向<code>N</code>区扩散，其结果导致在<code>N</code>区靠近结的边缘有高于正常情况时的空穴浓度，这种超量的空穴浓度可视为电荷存储到<code>PN</code>结的邻域。存储电荷量的大小，取决于<code>PN</code>结上所加正向电压值的大小。离结愈远，空穴浓度将随之减小，这是因为空穴在<code>N</code>区与多数载流子——电子产生复合所致。<code>N</code>区的电子向<code>P</code>区扩散的情况与上述情况类似。<code>PN</code>结两侧的载流子浓度分布如图11所示。这是针对P、N两侧的掺杂程度相等而言的，即 $N_A = N_D$。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Analog/001Analog11.png" width=50%  height=50%>  <p align="center">图 11 PN结的扩散电容</p></div><p>&emsp;&emsp;若外加电场有一增量 $\Delta V$，相应的空穴（电子）在结的附近产生一电荷增量 $\Delta Q$，两者之比 $\Delta V / \Delta Q$ 为扩散电容 $C_D$ 。如果取微增量，则有</p><p>$$\begin{aligned}<br>C_D = \frac{dQ}{dv_D}\Big|_Q = \frac{\tau_t I_D}{V_T} F(法)<br>\end{aligned}<br>$$</p><p>式中 $\tau_t$ 为载流子的渡越时间或寿命，用来度量超量的少子的复合时间。$I_D$ 为结型二极管的工作点上的电流。$V_T$为温度电压当量。<br><br>&emsp;&emsp;<code>PN</code>结在正向偏置时，积累在<code>P</code>区的电子和<code>N</code>区的空穴随正向电压的增加而很快增加，扩散电容较大。反向偏置时，载流子数目很少，因此反向偏置时扩散电容数值很小，一般可以忽略。</p><ul><li>势垒电容</li></ul><p>&emsp;&emsp;接下来考虑<code>PN</code>结处于反向偏置的情况。当外加电压 $V_R$ 增加时，势垒电位增至 $V_0 + V_R$（见图 8），结电场增强，多数载流子被拉出而远离<code>PN</code>结，势垒区将增宽；反之，当外加电压减小时，势垒区变窄。势垒区的变化，意味着区内存储的正、负离子电荷数的增减，类似于平行板电容器两极板上电荷的变化。此时<code>PN</code>结呈现出的电容效应称为<strong>势垒电容</strong>$C_B$，所不同的是，势垒电容是非线性的。<br><br>&emsp;&emsp;对于非线性的势垒电容，可用微增量电容的概念来定义，即</p><p>$$\begin{aligned}<br>C_B = \Big| \frac{dQ}{dv_D} \Big|<br>\end{aligned}<br>$$</p><p>式中 $dQ$ 为势垒区每侧存储电荷的微增量，$dv_D$ 为作用于结型二极管上的电压微增量。<br><br>&emsp;&emsp;经理论推导，势垒电容可表示为</p><p>$$\begin{aligned}<br>C_B = \frac{C_{BO}}{(1-V_D/V_0)^m}<br>\end{aligned}<br>$$</p><p>式中 $C_{BO}$ 为零偏置情况下的势垒电容，$V_D$ 为结型二极管工作点上的电压（在反偏情况下为负值）。$V_0$为建立势垒电位（典型值为1V），<code>m</code>为结的梯度系数，其值取决于<code>PN</code>结两侧的掺杂情况，对于线性掺杂来说，$m = \frac{1}{3}$ ；而在突变结，如 $N_A &gt;&gt; N_D$ 或反之，$m = \frac{1}{2}$。<br><br>&emsp;&emsp;综上所述，<code>PN</code>结的电容效应是扩散电容 $C_D$ 和势垒电容 $C_B$ 的综合反映，在高频运用时，必须考虑<code>PN</code>结电容的影响。<code>PN</code>结电容的大小除了与本身结构和工艺有关外，还与外加电压有关。当<code>PN</code>结处于正向偏置时，结电容较大（主要决定于扩散电容 $C_D$ ）；当<code>PN</code>结处于反向偏置时，结电容较小（主要决定于势垒电容 $C_B$ ）。</p>]]></content>
      
      
      <categories>
          
          <category> HardwareDesign </category>
          
          <category> Analog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Analog </tag>
            
            <tag> Diode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】Hexo的两种插件</title>
      <link href="post/15b7fc24.html"/>
      <url>post/15b7fc24.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;在看<code>Hexo</code>文档的时候发现了关于<code>Hexo</code>中的插件的相关知识，于是就去找了一些插件的源码，了解了一下大概的插件编写的格式，本文是记录一下自己开始尝试<code>Hexo</code>插件的第一步。</p><span id="more"></span><h1 id="1-Hexo的插件"><a href="#1-Hexo的插件" class="headerlink" title="1.Hexo的插件"></a><font size=3>1.<code>Hexo</code>的插件</font></h1><p>&emsp;&emsp;在<code>Hexo</code>中，有强大的插件系统，使开发者能偶轻松扩展功能而不用修改核心模块的源码。它的插件分为两种：脚本（<code>Scripts</code>）和插件（<code>Packages</code>）。<br><br>&emsp;&emsp;如果自己的代码很简单，可以编写脚本，这个时候只需要把自己编写的<code>JavaScript</code>文件放到<code>[blogRoot]/scripts</code>文件夹，整个文件夹一般默认是没有的，所以需要自己在站点根目录下创建，整个文件夹中的脚本文件在启动时就会自动载入。<br><br>&emsp;&emsp;另一种则适合自己的代码较为复杂的情况，或是自己想要发布到<code>npm</code>上，首先，在<code>node_modules</code>文件夹中建立文件夹，文件夹名称开头必须为<code>hexo-</code>，如此一来<code>Hexo</code>才会在启动时载入，否则<code>Hexo</code>将会忽略它。文件夹内至少要包含<code>2</code>个文件：一个是主程序，另一个是 <code>package.json</code>，描述插件的用途和所依赖的插件。</p><div class="note info no-icon 点击查看相关文档 flat"><table>    <tr>        <td align="left">        Hexo说明文档        </td>        <td align="left">        <a href="https://hexo.io/zh-cn/docs/" target="_blank">https://hexo.io/zh-cn/docs/</a>        </td>    </tr>    <tr>        <td align="left">        Hexo API文档        </td>        <td align="left">        <a href="https://hexo.io/zh-cn/api/" target="_blank">https://hexo.io/zh-cn/api/</a>        </td>    </tr></table></div><h1 id="2-Hexo插件的加载流程"><a href="#2-Hexo插件的加载流程" class="headerlink" title="2.Hexo插件的加载流程"></a><font size=3>2.<code>Hexo</code>插件的加载流程</font></h1><p>&emsp;&emsp;这里列出的相关内容，是在自己还未掌握<code>JavaScript</code>的情况下，后边对<code>JavaScript</code>有了更深入的了解后，会将此部分错误或者不合适的地方进行更新。</p><h2 id="2-1脚本（Scripts）的加载"><a href="#2-1脚本（Scripts）的加载" class="headerlink" title="2.1脚本（Scripts）的加载"></a><font size=3>2.1脚本（<code>Scripts</code>）的加载</font></h2><p>&emsp;&emsp;在阅读源码的过程中，有这么一部分代码，大致理解一下，就是使用此函数完成了根目录下<code>scripts</code>文件夹和主题文件目录下的<code>scripts</code>文件夹中的各个脚本文件的加载。</p><figure class="highlight javascript"><figcaption><span>JavaScript [blogRoot]/node_modules/hexo/lib/hexo/load_plugins.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScripts</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> baseDirLength = ctx.base_dir.length;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">displayPath</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> magenta(path.substring(baseDirLength));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.filter([</span><br><span class="line">    ctx.theme_script_dir,</span><br><span class="line">    ctx.script_dir</span><br><span class="line">  ], <span class="function"><span class="params">scriptDir</span> =&gt;</span> &#123; <span class="comment">// Ignore the directory if it does not exist</span></span><br><span class="line">    <span class="keyword">return</span> scriptDir ? exists(scriptDir) : <span class="literal">false</span>;</span><br><span class="line">  &#125;).map(<span class="function"><span class="params">scriptDir</span> =&gt;</span> listDir(scriptDir).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> path = join(scriptDir, name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ctx.loadPlugin(path).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ctx.log.debug(<span class="string">&#x27;Script loaded: %s&#x27;</span>, displayPath(path));</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      ctx.log.error(&#123;err&#125;, <span class="string">&#x27;Script load failed: %s&#x27;</span>, displayPath(path));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1插件（Packages）的加载"><a href="#2-1插件（Packages）的加载" class="headerlink" title="2.1插件（Packages）的加载"></a><font size=3>2.1插件（<code>Packages</code>）的加载</font></h2><p>&emsp;&emsp;<code>plugins</code>的加载是通过以下函数完成的。</p><figure class="highlight javascript"><figcaption><span>JavaScript [blogRoot]/node_modules/hexo/lib/hexo/load_plugins.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadModules</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> loadModuleList(ctx).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> path = ctx.resolvePlugin(name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load plugins</span></span><br><span class="line">    <span class="keyword">return</span> ctx.loadPlugin(path).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ctx.log.debug(<span class="string">&#x27;Plugin loaded: %s&#x27;</span>, magenta(name));</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      ctx.log.error(&#123;err&#125;, <span class="string">&#x27;Plugin load failed: %s&#x27;</span>, magenta(name));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Hexo相关函数"><a href="#3-Hexo相关函数" class="headerlink" title="3.Hexo相关函数"></a><font size=3>3.<code>Hexo</code>相关函数</font></h1><p>&emsp;&emsp;在使用插件之前，肯定要先了解一下基本的函数啦，这一节的内容大部分来自于<code>Hexo</code>官方文档。</p><h2 id="3-1过滤器（Filter）"><a href="#3-1过滤器（Filter）" class="headerlink" title="3.1过滤器（Filter）"></a><font size=3>3.1过滤器（<code>Filter</code>）</font></h2><ul><li>函数原型</li></ul><p>&emsp;&emsp;过滤器用于修改特定文件，<code>Hexo</code>将这些文件依序传给过滤器，而过滤器可以针对文件进行修改。</p><div class="note info no-icon 点击查看函数原型 flat"><figure class="highlight javascript"><figcaption><span>JavaScript [blogRoot]/node_modules/hexo/lib/extend/filter.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.store = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">register</span>(<span class="params">type, fn, priority</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!priority) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> type === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        priority = fn;</span><br><span class="line">        fn = type;</span><br><span class="line">        type = <span class="string">&#x27;after_post_render&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;fn must be a function&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    type = typeAlias[type] || type;</span><br><span class="line">    priority = priority == <span class="literal">null</span> ? <span class="number">10</span> : priority;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> store = <span class="built_in">this</span>.store[type] || [];</span><br><span class="line">    <span class="built_in">this</span>.store[type] = store;</span><br><span class="line"></span><br><span class="line">    fn.priority = priority;</span><br><span class="line">    store.push(fn);</span><br><span class="line"></span><br><span class="line">    store.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.priority - b.priority);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>函数使用及说明</li></ul><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.filter.register(type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// User configuration</span></span><br><span class="line">  <span class="keyword">const</span> &#123; config &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (config.external_link.enable) <span class="comment">// do something...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Theme configuration</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">config</span>: themeCfg &#125; = <span class="built_in">this</span>.theme;</span><br><span class="line">  <span class="keyword">if</span> (themeCfg.fancybox) <span class="comment">// do something...</span></span><br><span class="line"></span><br><span class="line">&#125;, priority);</span><br></pre></td></tr></table></figure><p><strong>type</strong>：为过滤器列表，它应该是一个字符串数据，使用的时候要加上<code>&#39;&#39;</code>，可以是以下值:</p><table>  <tr>    <td align="center">    type的值    </td>    <td align="center">    说明    </td>  </tr>  <tr>    <td align="center">    before_post_render    </td>    <td align="left">    在文章开始渲染前执行。    </td>  </tr>  <tr>    <td align="center">    after_post_render    </td>    <td align="left">    在文章渲染完成后执行。    </td>  </tr>  <tr>    <td align="center">    before_exit    </td>    <td align="left">    在 Hexo 即将结束时执行，也就是在 hexo.exit 被调用后执行。    </td>  </tr>  <tr>    <td align="center">    before_generate    </td>    <td align="left">    在生成器解析前执行。    </td>  </tr>  <tr>    <td align="center">    after_generate    </td>    <td align="left">    在生成器解析后执行。    </td>  </tr>  <tr>    <td align="center">    template_locals    </td>    <td align="left">    修改模板的<a href="https://hexo.io/zh-cn/docs/variables" target="_blank">局部变量</a>。    </td>  </tr>  <tr>    <td align="center">    after_init    </td>    <td align="left">    在 Hexo 初始化完成后执行，也就是在 hexo.init 执行完成后执行。    </td>  </tr>  <tr>    <td align="center">    new_post_path    </td>    <td align="left">    用来决定新建文章的路径，在建立文章时执行。    </td>  </tr>  <tr>    <td align="center">    post_permalink    </td>    <td align="left">    用来决定文章的永久链接。    </td>  </tr>  <tr>    <td align="center">    after_render    </td>    <td align="left">    在<a href="https://hexo.io/zh-cn/api/rendering" target="_blank">渲染</a>后执行。    </td>  </tr>  <tr>    <td align="center">    server_middleware    </td>    <td align="left">    新增服务器的 Middleware。app 是一个<a href="https://github.com/senchalabs/connect" target="_blank">Connect</a>实例。    </td>  </tr></table><p><strong>priority</strong>：是过滤器的优先级，<code>priority</code> 值越低，过滤器会越早执行，默认的 <code>priority</code> 是 10。建议提供配置选项如 <code>hexo.config.your_plugin.priority</code>，让用户自行决定过滤器的优先级。</p><h2 id="3-2注入器（Injector）"><a href="#3-2注入器（Injector）" class="headerlink" title="3.2注入器（Injector）"></a><font size=3>3.2注入器（<code>Injector</code>）</font></h2><ul><li>函数原型</li></ul><p>&emsp;&emsp;注入器被用于将静态代码片段注入生成的<code>HTML </code>的<code>&lt;head&gt;&lt;/head&gt;</code>或<code>&lt;body&gt;&lt;/body&gt;</code>中。<code>Hexo</code>将在 <code>after_render:html</code>过滤器 <strong>之前</strong> 完成注入。</p><div class="note info no-icon 点击查看函数原型 flat"><figure class="highlight javascript"><figcaption><span>JavaScript [blogRoot]/node_modules/hexo/lib/extend/injector.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Injector</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.store = &#123;</span><br><span class="line">      head_begin: &#123;&#125;,</span><br><span class="line">      head_end: &#123;&#125;,</span><br><span class="line">      body_begin: &#123;&#125;,</span><br><span class="line">      body_end: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">register</span>(<span class="params">entry, value, to = <span class="string">&#x27;default&#x27;</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!entry) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;entry is required&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span>) value = value();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entryMap = <span class="built_in">this</span>.store[entry] || <span class="built_in">this</span>.store.head_end;</span><br><span class="line">    <span class="keyword">const</span> valueSet = entryMap[to] || <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    valueSet.add(value);</span><br><span class="line">    entryMap[to] = valueSet;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>函数使用及说明</li></ul><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.injector.register(entry, value, to)</span><br></pre></td></tr></table></figure><p><strong>entry</strong>:字符串类型数据，表示代码片段注入的位置，接受以下值：<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>head_begin</code>: 注入在 <code>&lt;head&gt;</code> 之后（默认）<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>head_end</code>: 注入在 <code>&lt;/head&gt;</code> 之前<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>body_begin</code>: 注入在 <code>&lt;body&gt;</code> 之后<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>body_end</code>: 注入在 <code>&lt;/body&gt;</code> 之前</p><p><strong>value</strong>:字符串，或者支持返回值为字符串的函数，表示需要注入的代码片段。<br><strong>to</strong>:字符串类型数据，需要注入代码片段的页面类型，接受以下值：<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>default</code>: 注入到每个页面（默认值）<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>home</code>: 只注入到主页（<code>is_home() </code>为 <code>true</code> 的页面）<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>post</code>: 只注入到文章页面（<code>is_post()</code> 为 <code>true</code> 的页面）<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>page</code>: 只注入到独立页面（<code>is_page()</code> 为 <code>true</code> 的页面）<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>archive</code>: 只注入到归档页面（<code>is_archive()</code> 为 <code>true</code> 的页面）<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>category</code>: 只注入到分类页面（<code>is_category()</code> 为 <code>true</code> 的页面）<br><i class="iconfont icon-shoujizhuti_15bianqian"></i><code>tag</code>: 只注入到标签页面（<code>is_tag()</code> 为 <code>true</code> 的页面）<br><i class="iconfont icon-shoujizhuti_15bianqian"></i>其他自定义 <code>layout</code> 名称，自定义 <code>layout</code> 参考<a href="https://hexo.io/zh-cn/docs/writing" target="_blank">写作 - 布局（<code>Layout</code>）</a>实例。 </p><ul><li>示例程序</li></ul><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> css = hexo.extend.helper.get(<span class="string">&#x27;css&#x27;</span>).bind(hexo);</span><br><span class="line"><span class="keyword">const</span> js = hexo.extend.helper.get(<span class="string">&#x27;js&#x27;</span>).bind(hexo);</span><br><span class="line"></span><br><span class="line">hexo.extend.injector.register(<span class="string">&#x27;head_end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> css(<span class="string">&#x27;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&#x27;</span>);</span><br><span class="line">&#125;, <span class="string">&#x27;music&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hexo.extend.injector.register(<span class="string">&#x27;body_end&#x27;</span>, <span class="string">&#x27;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;&gt;&#x27;</span>, <span class="string">&#x27;music&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hexo.extend.injector.register(<span class="string">&#x27;body_end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> js(<span class="string">&#x27;/js/jquery.js&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-3辅助函数（Helper）"><a href="#3-3辅助函数（Helper）" class="headerlink" title="3.3辅助函数（Helper）"></a><font size=3>3.3辅助函数（<code>Helper</code>）</font></h2><ul><li>函数原型</li></ul><p>&emsp;&emsp;辅助函数帮助我们在模板中快速插入内容，我们可以把复杂的代码放在辅助函数而非模板中。</p><div class="note info no-icon 点击查看函数原型 flat"><figure class="highlight javascript"><figcaption><span>JavaScript [blogRoot]/node_modules/hexo/lib/extend/helper.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.store = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Register a helper plugin</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;String&#125;</span> <span class="variable">name</span></span> - The name of the helper plugin</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> <span class="variable">fn</span></span> - The helper plugin function</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">register</span>(<span class="params">name, fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!name) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;name is required&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;fn must be a function&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.store[name] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>函数使用及说明</li></ul><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.helper.register(name, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;示例如下，此示例的作用是将<code>js</code>封装成一个函数，只需要自己填写要调用的脚本文件名称，就可以调用特定路径下的相应文件。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.helper.register(<span class="string">&#x27;js&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;script src=&quot;&#x27;</span> + path + <span class="string">&#x27;&quot;&gt;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;函数注册通过辅助函数注册后，可以通过以下格式调用。</p><figure class="highlight plain"><figcaption><span>nunjuck</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在nunjuck模板中使用格式</span><br><span class="line">&#123;&#123;- js(&#39;script.js&#39;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;渲染之后为以下语句</span><br><span class="line">&lt;script src&#x3D;&quot;script.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="4-尝试Hexo中最基本的插件"><a href="#4-尝试Hexo中最基本的插件" class="headerlink" title="4.尝试Hexo中最基本的插件"></a><font size=3>4.尝试<code>Hexo</code>中最基本的插件</font></h1><p>&emsp;&emsp;首先呢需要初始化一个新的站点目录，不做任何修改，以便于测试自己的写的基本插件是否生效。然后就可以开始编写插件啦😄。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化一个新文件夹作为站点</span></span><br><span class="line">hexo init npm-test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入该站点文件夹，</span></span><br><span class="line">cd npm-test</span><br></pre></td></tr></table></figure><h2 id="4-1脚本（Scripts）测试"><a href="#4-1脚本（Scripts）测试" class="headerlink" title="4.1脚本（Scripts）测试"></a><font size=3>4.1脚本（<code>Scripts</code>）测试</font></h2><ul><li>过滤器（<code>Filter</code>）测试</li></ul><p>&emsp;&emsp;在站点根目录下新建<code>scripts</code>文件夹，并新建一个<code>test.js</code>文件，添加以下内容，在编写环境控制台输出一段提示字符。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before_exit表示在 Hexo 即将结束时执行，也就是在 hexo.exit 被调用后执行</span></span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;before_exit&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`测试程序加载成功(ฅ&gt;ω&lt;*ฅ)`</span>)</span><br><span class="line">&#125;, priority);</span><br></pre></td></tr></table></figure><ul><li>注入器（<code>Injector</code>）测试</li></ul><p>&emsp;&emsp;在<code>scripts/test.js</code>文件中添加以下内容，由于要实现的效果程序较长，还请点击折叠部分查看。该测试程序实现的效果是在所有页面加载一个点击产生礼花炸开效果的脚本，并且在渲染后页面的控制台输出一段提示字符。该段程序可以也可以放在过滤器中。</p><div class="note info no-icon 点击查看完整测试程序 flat"><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user_info_js = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  class Circle &#123;</span></span><br><span class="line"><span class="string">    constructor(&#123; origin, speed, color, angle, context &#125;) &#123;</span></span><br><span class="line"><span class="string">      this.origin = origin</span></span><br><span class="line"><span class="string">      this.position = &#123; ...this.origin &#125;</span></span><br><span class="line"><span class="string">      this.color = color</span></span><br><span class="line"><span class="string">      this.speed = speed</span></span><br><span class="line"><span class="string">      this.angle = angle</span></span><br><span class="line"><span class="string">      this.context = context</span></span><br><span class="line"><span class="string">      this.renderCount = 0</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    draw() &#123;</span></span><br><span class="line"><span class="string">      this.context.fillStyle = this.color</span></span><br><span class="line"><span class="string">      this.context.beginPath()</span></span><br><span class="line"><span class="string">      this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)</span></span><br><span class="line"><span class="string">      this.context.fill()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    move() &#123;</span></span><br><span class="line"><span class="string">      this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x</span></span><br><span class="line"><span class="string">      this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)</span></span><br><span class="line"><span class="string">      this.renderCount++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  class Boom &#123;</span></span><br><span class="line"><span class="string">    constructor (&#123; origin, context, circleCount = 16, area &#125;) &#123;</span></span><br><span class="line"><span class="string">      this.origin = origin</span></span><br><span class="line"><span class="string">      this.context = context</span></span><br><span class="line"><span class="string">      this.circleCount = circleCount</span></span><br><span class="line"><span class="string">      this.area = area</span></span><br><span class="line"><span class="string">      this.stop = false</span></span><br><span class="line"><span class="string">      this.circles = []</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    randomArray(range) &#123;</span></span><br><span class="line"><span class="string">      const length = range.length</span></span><br><span class="line"><span class="string">      const randomIndex = Math.floor(length * Math.random())</span></span><br><span class="line"><span class="string">      return range[randomIndex]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    randomColor() &#123;</span></span><br><span class="line"><span class="string">      const range = [&#x27;8&#x27;, &#x27;9&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;]</span></span><br><span class="line"><span class="string">      return &#x27;#&#x27; + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    randomRange(start, end) &#123;</span></span><br><span class="line"><span class="string">      return (end - start) * Math.random() + start</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    init() &#123;</span></span><br><span class="line"><span class="string">      for(let i = 0; i &lt; this.circleCount; i++) &#123;</span></span><br><span class="line"><span class="string">        const circle = new Circle(&#123;</span></span><br><span class="line"><span class="string">          context: this.context,</span></span><br><span class="line"><span class="string">          origin: this.origin,</span></span><br><span class="line"><span class="string">          color: this.randomColor(),</span></span><br><span class="line"><span class="string">          angle: this.randomRange(Math.PI - 1, Math.PI + 1),</span></span><br><span class="line"><span class="string">          speed: this.randomRange(1, 6)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        this.circles.push(circle)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    move() &#123;</span></span><br><span class="line"><span class="string">      this.circles.forEach((circle, index) =&gt; &#123;</span></span><br><span class="line"><span class="string">        if (circle.position.x &gt; this.area.width || circle.position.y &gt; this.area.height) &#123;</span></span><br><span class="line"><span class="string">          return this.circles.splice(index, 1)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        circle.move()</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">      if (this.circles.length == 0) &#123;</span></span><br><span class="line"><span class="string">        this.stop = true</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    draw() &#123;</span></span><br><span class="line"><span class="string">      this.circles.forEach(circle =&gt; circle.draw())</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  class CursorSpecialEffects &#123;</span></span><br><span class="line"><span class="string">    constructor() &#123;</span></span><br><span class="line"><span class="string">      this.computerCanvas = document.createElement(&#x27;canvas&#x27;)</span></span><br><span class="line"><span class="string">      this.renderCanvas = document.createElement(&#x27;canvas&#x27;)</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">      this.computerContext = this.computerCanvas.getContext(&#x27;2d&#x27;)</span></span><br><span class="line"><span class="string">      this.renderContext = this.renderCanvas.getContext(&#x27;2d&#x27;)</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">      this.globalWidth = window.innerWidth</span></span><br><span class="line"><span class="string">      this.globalHeight = window.innerHeight</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">      this.booms = []</span></span><br><span class="line"><span class="string">      this.running = false</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    handleMouseDown(e) &#123;</span></span><br><span class="line"><span class="string">      const boom = new Boom(&#123;</span></span><br><span class="line"><span class="string">        origin: &#123; x: e.clientX, y: e.clientY &#125;,</span></span><br><span class="line"><span class="string">        context: this.computerContext,</span></span><br><span class="line"><span class="string">        area: &#123;</span></span><br><span class="line"><span class="string">          width: this.globalWidth,</span></span><br><span class="line"><span class="string">          height: this.globalHeight</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">      boom.init()</span></span><br><span class="line"><span class="string">      this.booms.push(boom)</span></span><br><span class="line"><span class="string">      this.running || this.run()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    handlePageHide() &#123;</span></span><br><span class="line"><span class="string">      this.booms = []</span></span><br><span class="line"><span class="string">      this.running = false</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    init() &#123;</span></span><br><span class="line"><span class="string">      const style = this.renderCanvas.style</span></span><br><span class="line"><span class="string">      style.position = &#x27;fixed&#x27;</span></span><br><span class="line"><span class="string">      style.top = style.left = 0</span></span><br><span class="line"><span class="string">      style.zIndex = &#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class="line"><span class="string">      style.pointerEvents = &#x27;none&#x27;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">      style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth</span></span><br><span class="line"><span class="string">      style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">      document.body.append(this.renderCanvas)</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">      window.addEventListener(&#x27;mousedown&#x27;, this.handleMouseDown.bind(this))</span></span><br><span class="line"><span class="string">      window.addEventListener(&#x27;pagehide&#x27;, this.handlePageHide.bind(this))</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    run() &#123;</span></span><br><span class="line"><span class="string">      this.running = true</span></span><br><span class="line"><span class="string">      if (this.booms.length == 0) &#123;</span></span><br><span class="line"><span class="string">        return this.running = false</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">      requestAnimationFrame(this.run.bind(this))</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">      this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span></span><br><span class="line"><span class="string">      this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">      this.booms.forEach((boom, index) =&gt; &#123;</span></span><br><span class="line"><span class="string">        if (boom.stop) &#123;</span></span><br><span class="line"><span class="string">          return this.booms.splice(index, 1)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        boom.move()</span></span><br><span class="line"><span class="string">        boom.draw()</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">      this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  const cursorSpecialEffects = new CursorSpecialEffects()</span></span><br><span class="line"><span class="string">  cursorSpecialEffects.init()</span></span><br><span class="line"><span class="string">  console.log(&#x27;点击效果程序加载成功(ฅ&gt;ω&lt;*ฅ)&#x27;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">hexo.extend.injector.register(<span class="string">&#x27;body_end&#x27;</span>, user_info_js, <span class="string">&quot;default&quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="4-2插件（Packages）测试"><a href="#4-2插件（Packages）测试" class="headerlink" title="4.2插件（Packages）测试"></a><font size=3>4.2插件（<code>Packages</code>）测试</font></h2><p>&emsp;&emsp;上边介绍了脚本（<code>Scripts</code>）的测试程序，准备写插件的测试程序的时候发现，插件的测试程序其实和上边的测试程序是一模一样的，只不过是一个直接建立脚本文件，一个是另外生成一个插件，那这里就梳理一下从编写测试插件到安装插件然后运运行的过程吧。</p><ul><li>创建插件文件夹并进行初始化</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建文件夹</span></span><br><span class="line">mkdir hexo-plugins-test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入插件文件夹并初始化</span></span><br><span class="line">cd hexo-plugins-test/ &amp;&amp; npm init</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;创建并初始化相应文件夹后，会生成<code>package.json</code>文件，文件内容如下，基本都是默认的，这个<code>main</code>要注意，这里的<code>index.js</code>为<code>Hexo</code>使用该插件的时候入口脚本，所以插件中的主程序要写在该文件中。</p><figure class="highlight json"><figcaption><span>json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-plugins-test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;我的插件测试程序&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;qidaink&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建<code>index.js</code>主程序文件并添加测试程序</li></ul><p>&emsp;&emsp;由于是使用的<code>Vscode</code>软件作为编程环境，所以直接创建该文件，并添加以下程序。</p><p>&emsp;&emsp;此测试程序是将鼠标点击效果脚本添加到了过滤器中，在生成器解析后执行该脚本文件，出现的效果应该为在生成器解析后在编程环境的控制台输出一段测试程序加载成功的提示，随后通过启动本地预览，在那个页面点击都会有礼花炸开的效果，并且页面的控制台也会输出一个效果加载成功的提示。</p><div class="note info no-icon 点击查看完整测试程序 flat"><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_generate&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`测试程序加载成功(ฅ&gt;ω&lt;*ฅ)`</span>)</span><br><span class="line">  <span class="keyword">var</span> user_info_js = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    class Circle &#123;</span></span><br><span class="line"><span class="string">      constructor(&#123; origin, speed, color, angle, context &#125;) &#123;</span></span><br><span class="line"><span class="string">        this.origin = origin</span></span><br><span class="line"><span class="string">        this.position = &#123; ...this.origin &#125;</span></span><br><span class="line"><span class="string">        this.color = color</span></span><br><span class="line"><span class="string">        this.speed = speed</span></span><br><span class="line"><span class="string">        this.angle = angle</span></span><br><span class="line"><span class="string">        this.context = context</span></span><br><span class="line"><span class="string">        this.renderCount = 0</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      draw() &#123;</span></span><br><span class="line"><span class="string">        this.context.fillStyle = this.color</span></span><br><span class="line"><span class="string">        this.context.beginPath()</span></span><br><span class="line"><span class="string">        this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)</span></span><br><span class="line"><span class="string">        this.context.fill()</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      move() &#123;</span></span><br><span class="line"><span class="string">        this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x</span></span><br><span class="line"><span class="string">        this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)</span></span><br><span class="line"><span class="string">        this.renderCount++</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    class Boom &#123;</span></span><br><span class="line"><span class="string">      constructor (&#123; origin, context, circleCount = 16, area &#125;) &#123;</span></span><br><span class="line"><span class="string">        this.origin = origin</span></span><br><span class="line"><span class="string">        this.context = context</span></span><br><span class="line"><span class="string">        this.circleCount = circleCount</span></span><br><span class="line"><span class="string">        this.area = area</span></span><br><span class="line"><span class="string">        this.stop = false</span></span><br><span class="line"><span class="string">        this.circles = []</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      randomArray(range) &#123;</span></span><br><span class="line"><span class="string">        const length = range.length</span></span><br><span class="line"><span class="string">        const randomIndex = Math.floor(length * Math.random())</span></span><br><span class="line"><span class="string">        return range[randomIndex]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      randomColor() &#123;</span></span><br><span class="line"><span class="string">        const range = [&#x27;8&#x27;, &#x27;9&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;]</span></span><br><span class="line"><span class="string">        return &#x27;#&#x27; + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      randomRange(start, end) &#123;</span></span><br><span class="line"><span class="string">        return (end - start) * Math.random() + start</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      init() &#123;</span></span><br><span class="line"><span class="string">        for(let i = 0; i &lt; this.circleCount; i++) &#123;</span></span><br><span class="line"><span class="string">          const circle = new Circle(&#123;</span></span><br><span class="line"><span class="string">            context: this.context,</span></span><br><span class="line"><span class="string">            origin: this.origin,</span></span><br><span class="line"><span class="string">            color: this.randomColor(),</span></span><br><span class="line"><span class="string">            angle: this.randomRange(Math.PI - 1, Math.PI + 1),</span></span><br><span class="line"><span class="string">            speed: this.randomRange(1, 6)</span></span><br><span class="line"><span class="string">          &#125;)</span></span><br><span class="line"><span class="string">          this.circles.push(circle)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      move() &#123;</span></span><br><span class="line"><span class="string">        this.circles.forEach((circle, index) =&gt; &#123;</span></span><br><span class="line"><span class="string">          if (circle.position.x &gt; this.area.width || circle.position.y &gt; this.area.height) &#123;</span></span><br><span class="line"><span class="string">            return this.circles.splice(index, 1)</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          circle.move()</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        if (this.circles.length == 0) &#123;</span></span><br><span class="line"><span class="string">          this.stop = true</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      draw() &#123;</span></span><br><span class="line"><span class="string">        this.circles.forEach(circle =&gt; circle.draw())</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    class CursorSpecialEffects &#123;</span></span><br><span class="line"><span class="string">      constructor() &#123;</span></span><br><span class="line"><span class="string">        this.computerCanvas = document.createElement(&#x27;canvas&#x27;)</span></span><br><span class="line"><span class="string">        this.renderCanvas = document.createElement(&#x27;canvas&#x27;)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        this.computerContext = this.computerCanvas.getContext(&#x27;2d&#x27;)</span></span><br><span class="line"><span class="string">        this.renderContext = this.renderCanvas.getContext(&#x27;2d&#x27;)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        this.globalWidth = window.innerWidth</span></span><br><span class="line"><span class="string">        this.globalHeight = window.innerHeight</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        this.booms = []</span></span><br><span class="line"><span class="string">        this.running = false</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      handleMouseDown(e) &#123;</span></span><br><span class="line"><span class="string">        const boom = new Boom(&#123;</span></span><br><span class="line"><span class="string">          origin: &#123; x: e.clientX, y: e.clientY &#125;,</span></span><br><span class="line"><span class="string">          context: this.computerContext,</span></span><br><span class="line"><span class="string">          area: &#123;</span></span><br><span class="line"><span class="string">            width: this.globalWidth,</span></span><br><span class="line"><span class="string">            height: this.globalHeight</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        boom.init()</span></span><br><span class="line"><span class="string">        this.booms.push(boom)</span></span><br><span class="line"><span class="string">        this.running || this.run()</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      handlePageHide() &#123;</span></span><br><span class="line"><span class="string">        this.booms = []</span></span><br><span class="line"><span class="string">        this.running = false</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      init() &#123;</span></span><br><span class="line"><span class="string">        const style = this.renderCanvas.style</span></span><br><span class="line"><span class="string">        style.position = &#x27;fixed&#x27;</span></span><br><span class="line"><span class="string">        style.top = style.left = 0</span></span><br><span class="line"><span class="string">        style.zIndex = &#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class="line"><span class="string">        style.pointerEvents = &#x27;none&#x27;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth</span></span><br><span class="line"><span class="string">        style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        document.body.append(this.renderCanvas)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        window.addEventListener(&#x27;mousedown&#x27;, this.handleMouseDown.bind(this))</span></span><br><span class="line"><span class="string">        window.addEventListener(&#x27;pagehide&#x27;, this.handlePageHide.bind(this))</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      run() &#123;</span></span><br><span class="line"><span class="string">        this.running = true</span></span><br><span class="line"><span class="string">        if (this.booms.length == 0) &#123;</span></span><br><span class="line"><span class="string">          return this.running = false</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        requestAnimationFrame(this.run.bind(this))</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span></span><br><span class="line"><span class="string">        this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        this.booms.forEach((boom, index) =&gt; &#123;</span></span><br><span class="line"><span class="string">          if (boom.stop) &#123;</span></span><br><span class="line"><span class="string">            return this.booms.splice(index, 1)</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          boom.move()</span></span><br><span class="line"><span class="string">          boom.draw()</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    const cursorSpecialEffects = new CursorSpecialEffects()</span></span><br><span class="line"><span class="string">    cursorSpecialEffects.init()</span></span><br><span class="line"><span class="string">    console.log(&#x27;点击效果程序加载成功(ฅ&gt;ω&lt;*ฅ)&#x27;)</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  hexo.extend.injector.register(<span class="string">&#x27;body_end&#x27;</span>, user_info_js, <span class="string">&quot;default&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;, <span class="number">98</span>);</span><br></pre></td></tr></table></figure></div><ul><li>打包并发布程序到<code>npm</code></li></ul><p>&emsp;&emsp;由于之前已经登陆过，所以直接执行以下命令。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 发布版本到npm</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;出现以下提示信息代表发布成功。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm notice </span><br><span class="line">npm notice package: hexo-plugins-test@0.0.0</span><br><span class="line">npm notice === Tarball Contents ===</span><br><span class="line">npm notice 5.5kB index.js</span><br><span class="line">npm notice 244B  package.json</span><br><span class="line">npm notice === Tarball Details ===</span><br><span class="line">npm notice name:          hexo-plugins-test</span><br><span class="line">npm notice version:       0.0.0</span><br><span class="line">npm notice package size:  1.8 kB</span><br><span class="line">npm notice unpacked size: 5.8 kB</span><br><span class="line">npm notice shasum:        50ce71a91babf482f12b0f54a05a7ad48c3d8298</span><br><span class="line">npm notice integrity:     sha512-EZwg7y6/fCmv/[...]oUQJ/Y0pKTR9g==</span><br><span class="line">npm notice total files:   2</span><br><span class="line">npm notice</span><br><span class="line">+ hexo-plugins-test@0.0.0</span><br></pre></td></tr></table></figure><ul><li>进入测试站点并安装插件</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入自己的站点根目录（blogRoot代表站点根目录）</span></span><br><span class="line">cd [blogRoot]/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装插件</span></span><br><span class="line">npm install hexo-plugins-test</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;若无报错，即可进行下一步，启动本地预览，查看效果。</p><ul><li>启动本地预览</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NPM】NPM包的发布与管理</title>
      <link href="post/bb311290.html"/>
      <url>post/bb311290.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;在使用<code>Hexo</code>的过程中，会需要优化主题的显示，来达到自己想要的一个效果，<code>Hexo</code>有强大的插件系统，开发者能轻松扩展功能而不用修改核心模块的源码。在<code>Hexo</code>中有两种形式的插件：脚本（Scripts）和插件（Packages），我可能更倾向于使用插件，这种方式对源码的改动方式应该是最小的了，而本文主要就是先介绍最基础的<code>npm</code>包的发布和管理。</p><span id="more"></span><h1 id="1-npm介绍"><a href="#1-npm介绍" class="headerlink" title="1.npm介绍"></a><font size=3>1.<code>npm</code>介绍</font></h1><p>&emsp;&emsp;<code>npm is the world&#39;s largest software registry. Open source developers from every continent use npm to share and borrow packages, and many organizations use npm to manage private development as well.</code><br><br>&emsp;&emsp;官网是这样介绍<code>npm</code>的，翻译过来就是，<code>npm</code>是世界上最大的软件注册中心。来自各个大洲的开源开发者都使用<code>npm</code>来共享和借用包，许多组织也使用<code>npm</code>来管理私人开发。简单来说，<code>npm</code>就是<code>javascript</code>的包管理工具，类似<code>python</code>的<code>pip</code>。<code>npm</code>是和<code>Node.js</code>一起发布的，只要安装了<code>Node.js</code>，<code>npm</code>也默认会被安装。<br><br>&emsp;&emsp;那么<code>npm</code>可以用用来干什么呢？</p><div class="note default flat"><ul><li>为你的应用调整代码包，或者合并它们。</li><li>下载可以立即使用的独立工具。</li><li>运行包而不使用<a href="https://www.npmjs.com/package/npx" target="_blank"><code>npx</code></a>下载。</li><li>与任何地方的任何<code>npm</code>用户共享代码。</li><li>将代码限制给特定的开发人员。</li><li>创建组织来协调包维护、编码和开发人员。</li><li>使用组织形式组建虚拟团队。</li><li>管理多个版本的代码和代码依赖关系。</li><li>当底层代码更新时，可以轻松地更新应用程序。</li><li>发现解决同一难题的多种方法。</li><li>找到其他正在处理类似问题和项目的开发人员。</li></ul></div><div class="note info no-icon 点击查看相关文档 flat"><p>相关文档：</p><table>    <tr>        <td align="left">        npm主页        </td>        <td align="left">        <a href="https://www.npmjs.com/" target="_blank">https://www.npmjs.com/</a>        </td>    </tr>    <tr>        <td align="left">        npm说明文档(英文)        </td>        <td align="left">        <a href="https://docs.npmjs.com/" target="_blank">https://docs.npmjs.com/</a>        </td>    </tr>    <tr>        <td align="left">        npm说明文档(中文)        </td>        <td align="left">        <a href="https://www.npmjs.cn/" target="_blank">https://www.npmjs.cn/</a>        </td>    </tr>    <tr>        <td align="left">        node主页        </td>        <td align="left">        <a href="https://nodejs.dev/" target="_blank">https://nodejs.dev/</a>        </td>    </tr>    <tr>        <td align="left">        node说明文档(英文)        </td>        <td align="left">        <a href="https://nodejs.dev/learn" target="_blank">https://nodejs.dev/learn</a>        </td>    </tr>    <tr>        <td align="left">        node说明文档（中文）        </td>        <td align="left">        <a href="http://nodejs.cn/learn" target="_blank">http://nodejs.cn/learn</a>        </td>    </tr></table></div><h1 id="2-npm的基本使用"><a href="#2-npm的基本使用" class="headerlink" title="2.npm的基本使用"></a><font size=3>2.<code>npm</code>的基本使用</font></h1><h2 id="2-1注册账号"><a href="#2-1注册账号" class="headerlink" title="2.1注册账号"></a><font size=3>2.1注册账号</font></h2><p>&emsp;&emsp;这个没什么可写的，进入官网，点击<code>Sign Up</code>按照提示进行注册即可，注册还是很简单的，注册完毕之后要记得会提示验证邮箱，这个时候注意验证就好了，不验证的话可能会有问题。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/004NPM01.png"></div><h2 id="2-2npm安装与更新"><a href="#2-2npm安装与更新" class="headerlink" title="2.2npm安装与更新"></a><font size=3>2.2<code>npm</code>安装与更新</font></h2><p>&emsp;&emsp;上边已经有所提及，<code>npm</code>和<code>Node.js</code>是一起发布的，只要安装了<code>Node.js</code>，<code>npm</code>也是自动安装了的。</p><ul><li>查看<code>npm</code>和<code>Node.js</code>版本</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v  # 查看node版本</span><br><span class="line">npm -v   # 查看npm版本</span><br></pre></td></tr></table></figure><ul><li>更新<code>npm</code>版本</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm@latest -g</span><br></pre></td></tr></table></figure><h2 id="2-3npm管理插件"><a href="#2-3npm管理插件" class="headerlink" title="2.3npm管理插件"></a><font size=3>2.3<code>npm</code>管理插件</font></h2><ul><li>安装插件</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install packageName            # 本地安装，安装到项目目录下，不在package.json中写入依赖</span><br><span class="line">npm install packageName -g         # 全局安装，安装在Node安装目录下的node_modules下</span><br><span class="line">npm install packageName --save     # 安装到项目目录下，并在package.json文件的dependencies中写入依赖，简写为-S</span><br><span class="line">npm install packageName --save-dev # 安装到项目目录下，并在package.json文件的devDependencies中写入依赖，简写为-D</span><br><span class="line">npm install packageName@version --save # 安装指定版本</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以通过以上命令来对插件进行安装，还有一种就是自己按照相应的语法写一个<code>package.json</code>文件，然后在该文件所在目录执行<code>npm install</code>即可安装<code>package.json</code>文件中的所有插件。<br></p><p>&emsp;&emsp;我一般还是只在<code>Hexo</code>中使用该命令，所以<code>npm install packageName --save</code>命令使用的较多，另外就是<code>npm 5</code>之后版本默认会修改<code>package.json</code>，不再需要<code>--save</code>参数，也就是说，就算现在去掉该参数，再通过<code>npm install</code>命令依然可以安装相应插件。更多内容可以这里：<a href="https://docs.npmjs.com/cli/v7/commands/npm-install" target="_blank"><code>npm-install</code><i class="fa fa-external-link-alt"></i></a></p><ul><li>卸载插件</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall packageName      # 删除packageName模块</span><br><span class="line">npm uninstall -g packageName   # 删除全局模块packageName</span><br></pre></td></tr></table></figure><ul><li>更新插件</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新一个或多个模块，加上-g参数，表示更新全局的模块</span></span><br><span class="line">npm update packageName</span><br><span class="line">npm update packageName -g</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新时同时修改package.json文件,不要--save也没有问题</span></span><br><span class="line">npm update packageName --save-dev  # 在package.json文件的devDependencies中写入依赖</span><br><span class="line">npm update packageName --save</span><br></pre></td></tr></table></figure><h2 id="2-4npm项目初始化"><a href="#2-4npm项目初始化" class="headerlink" title="2.4npm项目初始化"></a><font size=3>2.4<code>npm</code>项目初始化</font></h2><p>&emsp;&emsp;由于我是针对<code>hexo</code>插件来使用<code>npm</code>，所以文件夹命名按照<code>hexo</code>的插件要求命名，<code>hexo</code>要求插件文件夹名称开头必须为 <code>hexo-</code>，如此一来<code> hexo</code>才会在启动时载入否则 <code>hexo</code>将会忽略它。</p><ul><li>创建文件夹</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入自己相应的文件夹，并创建npm项目文件夹</span></span><br><span class="line">mkdir hexo-npm-test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入创建的文件夹</span></span><br><span class="line">cd hexo-npm-test</span><br></pre></td></tr></table></figure><ul><li>初始化文件夹</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;使用该命令初始化时，会打开项目初始化向导，在命令行窗口会提示让自己输入各个参数，所有显示信息如下所示：</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init</span></span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm help init` for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (hexo-npm-test)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description:</span><br><span class="line">entry point: (index.js)</span><br><span class="line">test command:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to E:\MyStudy\VScode\hexofiles\hexo-npm-test\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-npm-test&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this OK? (yes) yes</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该命令有一个参数<code>--yes</code>，若使用以下命令，则创建默认<code>package.json</code>文件，不需要自己在命令行输入，后续直接修改该文件即可。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;创建的文件信息如下，内容与不带参数创建的一致，看个人喜好选择要不要带参数吧。</p><figure class="highlight json"><figcaption><span>json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-npm-test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>package.json</code>参数解读</li></ul><div class="note info no-icon 点击查看参考文档 flat"><table>    <tr>        <td align="center">            参考文档        </td>        <td align="center">            名称链接        </td>    </tr>    <tr>        <td align="center">            阮一峰        </td>        <td align="left">            <a href="https://javascript.ruanyifeng.com/nodejs/packagejson.html" target="_blank">《JavaScript 标准参考教程（alpha）》——package.json文件<a>        </td>    </tr>    <tr>        <td align="center">            官方文档        </td>        <td align="left">            <a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json" target="_blank">《npm Docs》——package.json<a>        </td>    </tr></table></div><table>    <tr>        <td align="center">            参数        </td>        <td align="center">            说明        </td>    </tr>    <tr>        <td align="center">            name        </td>        <td align="left">            项目的名称。        </td>    </tr>    <tr>        <td align="center">            version        </td>        <td align="left">            项目的版本，默认是从V1.0.0开始，可以自己修改，遵守“大版本.次要版本.小版本”的格式。        </td>    </tr>    <tr>        <td align="center">            scripts        </td>        <td align="left">            指定了运行脚本命令的npm命令行缩写；<br>            例如："test": "tap test/*.js" 就表示执行npm run test的时候所要执行的命令为 tap test/*.js 。        </td>    </tr>    <tr>        <td align="center">            bin        </td>        <td align="left">            指定各个内部命令对应的可执行文件的位置。<br>        </td>    </tr>    <tr>        <td align="center">            main        </td>        <td align="left">            指定加载的入口文件，require('moduleName')就会加载这个文件。这个字段的默认值是模块根目录下面的index.js。        </td>    </tr>    <tr>        <td align="center">            author        </td>        <td align="left">            项目的作者。        </td>    </tr>    <tr>        <td align="center">            repository        </td>        <td align="left">            项目代码存放地方类型，如：git或svn。        </td>    </tr>    <tr>        <td align="center">            keywords        </td>        <td align="left">            项目关键字。        </td>    </tr>    <tr>        <td align="center">            description        </td>        <td align="left">            项目简介，字符串，方便在npm search中搜索。        </td>    </tr>    <tr>        <td align="center">            license        </td>        <td align="left">            许可证。        </td>    </tr>    <tr>        <td align="center">            dependencies        </td>        <td align="left" rowspan="2">            dependencies字段指定了项目运行所依赖的模块;devDependencies指定项目开发所需要的模块。<br>            它们都指向一个对象,该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。<br>        </td>        </tr>        <tr>            <td align="center">                devDependencies            </td>        </tr></table><p>&emsp;&emsp;<code>dependencies</code>和<code>devDependencies</code>对应的版本可以加上各种限定，主要有以下几种：</p><p> <strong>指定版本</strong>：比如<code>1.2.2</code>，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。<br> <strong>波浪号（tilde）+指定版本</strong>：比如<code>~1.2.2</code>，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。<br> <strong>插入号（caret）+指定版本</strong>：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。<br><strong>latest</strong>：安装最新版本。</p><h2 id="2-5npm项目发布与管理"><a href="#2-5npm项目发布与管理" class="headerlink" title="2.5npm项目发布与管理"></a><font size=3>2.5<code>npm</code>项目发布与管理</font></h2><h3 id="2-5-1检查npm源"><a href="#2-5-1检查npm源" class="headerlink" title="2.5.1检查npm源"></a><font size=3>2.5.1检查<code>npm</code>源</font></h3><p>&emsp;&emsp;这里为什么需要这一步呢，是因为有的时候自己可能为了让下载速度更快，就把源给换成了<code>taobao</code>，这个源在首次登录的时候可能会有问题，需要处理一下。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查npm源</span></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置npm源</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 原始下载源：https://registry.npmjs.org/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更换下载源：https://registry.npm.taobao.org</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="2-5-2本地登录npm"><a href="#2-5-2本地登录npm" class="headerlink" title="2.5.2本地登录npm"></a><font size=3>2.5.2本地登录<code>npm</code></font></h3><p>&emsp;&emsp;首次发布项目，需要登陆<code>npm</code>，使用以下命令登录，输入命令之后，填写自己的用户名，密码和注册的邮箱即可，这里要注意淘宝镜像只是提供下载，如果要登陆发布自己的项目， 必须要切换到官方<code>npm</code>源。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更换npm源为官方源</span></span><br><span class="line">npm config set registry https://registry.npmjs.org/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地登录npm</span></span><br><span class="line">npm login</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果不换回官方<code>npm</code>源的话，登陆的时候就会一直卡死，更换后我出现过因为网络问题导致报错了的，这种的问题不大，出现以下提示说明登陆成功。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logged in as qidaink on https://registry.npmjs.org/.</span><br></pre></td></tr></table></figure><h3 id="2-5-3发布项目"><a href="#2-5-3发布项目" class="headerlink" title="2.5.3发布项目"></a><font size=3>2.5.3发布项目</font></h3><p>&emsp;&emsp;若项目已经编写完成，那我们就可以发布自己的项目啦，版本发布命令如下。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;出现以下提示内容代表发布成功，之前验证完邮箱，这里还会有发布成功的邮件提醒。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">npm notice </span><br><span class="line">npm notice package: hexo-npm-test@1.0.0</span><br><span class="line">npm notice === Tarball Contents ===</span><br><span class="line">npm notice 288B package.json</span><br><span class="line">npm notice === Tarball Details ===</span><br><span class="line">npm notice name:          hexo-npm-test</span><br><span class="line">npm notice version:       1.0.0</span><br><span class="line">npm notice package size:  285 B</span><br><span class="line">npm notice unpacked size: 288 B</span><br><span class="line">npm notice shasum:        6ec63a53a3c7461ab49dd287e01fa04127cca207</span><br><span class="line">npm notice integrity:     sha512-a46dY8gsp1b2h[...]yf9NfS5tmr7dg==</span><br><span class="line">npm notice total files:   1</span><br><span class="line">npm notice</span><br><span class="line">+ hexo-npm-test@1.0.0</span><br></pre></td></tr></table></figure><h3 id="2-5-4更新本地项目版本并发布"><a href="#2-5-4更新本地项目版本并发布" class="headerlink" title="2.5.4更新本地项目版本并发布"></a><font size=3>2.5.4更新本地项目版本并发布</font></h3><ul><li>手动修改</li></ul><p>&emsp;&emsp;手动修改<code>package.json</code>文件中的版本号。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;version&quot;: &quot;1.0.0&quot;</span><br></pre></td></tr></table></figure><ul><li>命令修改</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm version patch</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以上命令可以在之前的版本上自动加<code>1</code>，运行完毕后，会出现更新版本的版本号。</p><ul><li>发布新版本</li></ul><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过该命令就可以发布新的版本到自己的<code>npm</code>仓库中去，而且之前的版本也存在，也可以通过<code>npm</code>进行安装。</p><h3 id="2-5-5撤销版本的发布"><a href="#2-5-5撤销版本的发布" class="headerlink" title="2.5.5撤销版本的发布"></a><font size=3>2.5.5撤销版本的发布</font></h3><p>&emsp;&emsp;若是我们版本发布错误，我们应该如何撤回已经发布的版本呢？可以通过以下命令进行项目的删除或者某一版本的删除。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish packageName --force   # 强制撤销,可以删除整个项目</span><br><span class="line">npm unpublish packageName@version   # 可以撤销发布自己发布过的某个版本</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如下例子，输入版本撤销命令后，会显示撤销的版本，前边会有一个<code>-</code>，说明撤销成功，此时查看<code>npm</code>会发现，该版本已经消失。不过这样的话，若撤销的版本是新版本，通过命令更新版本的时候，会跳过撤销的版本直接进入下一个版本。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm unpublish hexo-npm-test@1.0.1</span> </span><br><span class="line">- hexo-npm-test@1.0.1</span><br></pre></td></tr></table></figure><h3 id="2-5-6查看版本信息"><a href="#2-5-6查看版本信息" class="headerlink" title="2.5.6查看版本信息"></a><font size=3>2.5.6查看版本信息</font></h3><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm view packageName versions         # 查看历史版本信息(最多只能显示100条)        </span><br><span class="line">npm view packageName versions --json  # 查看所有版本信息</span><br><span class="line">npm view packageName version          # 查看最新版本信息</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】Github Actions自动部署</title>
      <link href="post/2ee2604b.html"/>
      <url>post/2ee2604b.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;在刚开始使用<code>Hexo</code>的时候安装的脚本、插件、引用的样式和文章等都比较少，编译部署起来就还好，时间也不长，但是当哪些越来越多的时候，编译时间也越来越久，而且<code>Gitee Pages</code>在仓库部署完毕后，还需要手动点击更新，才能完成页面的部署，不免就有些麻烦了，本文将介绍<code>Github</code>自带的自动部署工具<code>Github Actions</code>来实现静态网站的自动部署。</p><span id="more"></span><h1 id="1-Github-Actions介绍"><a href="#1-Github-Actions介绍" class="headerlink" title="1.Github Actions介绍"></a><font size=3>1.<code>Github Actions</code>介绍</font></h1><p>&emsp;&emsp;<code>Github Actions</code>是<code>GitHub</code>于 2018 年 10 月推出的一个<code>CI/CD</code>服务。那什么是<code>CI/CD</code>呢？<code>CI/CD</code>其实说的是三件事情：</p><ul><li>持续集成（Continuous Integration）</li><li>持续交付（Continuous Delivery）</li><li>持续部署（Continuous Deployment）</li></ul><p>&emsp;&emsp;按照自己的理解，就是一个可以在<code>Github</code>仓库中自动执行一些命令的工具，它的配置文件为<code>yaml</code>格式。本文不是主要详细介绍它的语法，而是介绍如何使用这个工具来完成自动部署，所以这里就不写更多关于语法的啦（主要原因还是自己也不是特别了解😭），更多详细介绍可以查看官方介绍文档：<a href="https://docs.github.com/en/actions" target="_blank">Github Actions<i class="fa fa-external-link-alt"></i></a></p><h1 id="2-Github-Actions使用"><a href="#2-Github-Actions使用" class="headerlink" title="2.Github Actions使用"></a><font size=3>2.<code>Github Actions</code>使用</font></h1><div class="note info no-icon 点击查看参考教程和相关Github项目 flat"><p>&emsp;&emsp;参考教程</p><table>  <tr>    <td align="center">博客名称</td>    <td align="center">教程原帖</td>  </tr>  <tr>    <td align="center">Akilar の糖果屋</td>    <td align="left"><a href="https://akilar.top/posts/f752c86d/" target="_blank">使用 Github Action 实现全自动部署</a> </td>  </tr>  <tr>    <td align="center">卓越科技的 Blog</td>    <td align="left"><a href="https://blog.zykjofficial.top/posts/ea8e8e59/" target="_blank">使用 Github Actions 自动部署博客</a> </td>  </tr></table><p>&emsp;&emsp;相关<code>Github</code>项目</p><table>  <tr>    <td align="center">项目说明</td>    <td align="center">项目地址</td>  </tr>  <tr>    <td align="center">镜像仓库</td>    <td align="left"><a href="https://github.com/wearerequired/git-mirror-action" target="_blank">Git Mirror Action</a> </td>  </tr>  <tr>    <td align="center">自动部署Gitee Pages</td>    <td align="left"><a href="https://github.com/yanglbme/gitee-pages-action" target="_blank">Gitee Pages Action</a> </td>  </tr></table></div><div class="note warning flat"><p>注意：若是直接复制以下代码，还请替换<code>[UserName]</code>为自己的<code>Github</code>或者<code>Gitee</code>名字，另外就是那些环境变量一定要在自己站点源码的<code>Secrets</code>中配置好。</p></div><h2 id="2-1创建仓库"><a href="#2-1创建仓库" class="headerlink" title="2.1创建仓库"></a><font size=3>2.1创建仓库</font></h2><p>&emsp;&emsp;在一切的一切开始之前肯定是需要一个仓库啦😄，我这里存放源码的是创建的私人仓库，这里就不写如何创建仓库、建立远程连接和上传源码了。</p><h2 id="2-2获取Token"><a href="#2-2获取Token" class="headerlink" title="2.2获取Token"></a><font size=3>2.2获取<code>Token</code></font></h2><p>&emsp;&emsp;<code>Token</code>就是<code>Personal access tokens</code>，即私人访问令牌，看自己的源码仓库是放在<code>Github</code>还是其他平台了，我的是在<code>Github</code>上，<code>Gitee</code>作为镜像站，所以我只需要在<code>Github</code>上进行操作，这里简单记录一下如何在这两个平台获取<code>Token</code>的方式。</p><div class="note info no-icon 点击查看获取Token的步骤 flat"><div class="tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#first-unique-name-1">Github</button></li><li class="tab"><button type="button" data-href="#first-unique-name-2">Gitee</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="first-unique-name-1"><p>&emsp;&emsp;点击这里<a href="https://github.com/settings/tokens" target="_blank">【Github官网】&rarr;【右上角头像】&rarr;【Settings】&rarr;【Developer Settings】&rarr;【Personal access tokens】<i class="fa fa-external-link-alt"></i></a>打开<code>Personal access tokens</code>设置项。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/003GithubActions01.png"></div><p>&emsp;&emsp;选择<code>generate new token</code>创建自己的私人访问令牌。<code>Note</code>也就是私人令牌的名称，随意命名就可以，不过要符合<code>Github</code>的要求，<code>Select scopes</code>中是选择私人访问令牌的权限，至少要勾选<code>repo</code>选项。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/003GithubActions02.png"></div><p>&emsp;&emsp;最后点击最下方的创建就可以生成自己的私人访问令牌啦，不过这个私人访问令牌只有创建的时候才会显示一次，后边是查看不了的，所以要注意记录下来。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/003GithubActions03.png"></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="first-unique-name-2"><p>&emsp;&emsp;点击这里<a href="https://gitee.com/profile/personal_access_tokens" target="_blank">【Gitee官网】&rarr;【右上角头像】&rarr;【设置】&rarr;【私人令牌】<i class="fa fa-external-link-alt"></i></a>，打开设置后下拉就可以找到【私人令牌】选项了，打开该设置项。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/003GithubActions04.png"></div><p>&emsp;&emsp;点击生成新令牌即可转到私人令牌创建界面，接下来是填写描述、勾选权限，由于是自己用的，所以我全部都勾选了。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/003GithubActions05.png"></div><p>&emsp;&emsp;最后点击提交，然后输入登录密码进行验证即可生成自己的私人令牌，<code>Gitee</code>的私人访问令牌也是只有创建的时候才会显示一次，后边是查看不了的，所以也要注意记录下来。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/003GithubActions06.png" style="zoom: 50%;"/></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div><h2 id="2-3在源码仓库创建环境变量"><a href="#2-3在源码仓库创建环境变量" class="headerlink" title="2.3在源码仓库创建环境变量"></a><font size=3>2.3在源码仓库创建环境变量</font></h2><p>&emsp;&emsp;不想在文件中直接写私人令牌的话，可以在自己存放源码的仓库中添加环境变量：【Settings】&rarr;【Secrets】&rarr;【New repository secret】，在这里添加完之后，便可以在<code>Github Actions</code>的配置文件中通过<code>$&#123;&#123; secrets.[Environment secrets name] &#125;&#125;</code>来引用，更加的安全一些。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/003GithubActions07.png"/></div><h2 id="2-4创建Github-Actions的配置文件"><a href="#2-4创建Github-Actions的配置文件" class="headerlink" title="2.4创建Github Actions的配置文件"></a><font size=3>2.4创建<code>Github Actions</code>的配置文件</font></h2><p>&emsp;&emsp;在站点<code>[blogRoot]</code>文件夹下也就是根目录下创建<code>.github/workflows</code>工作流程文件夹，一共创建2个文件夹<code>workflows</code>为<code>.github</code>的子文件夹，然后再工作流程文件夹下创建自动部署配置文件<code>autodeploy.yml</code>，名字任取，是<code>yml</code>格式文件即可。</p><div class="note info no-icon 点击查看自动部署配置文件内容 flat"><figure class="highlight yaml"><figcaption><span>yaml [blogRoot]/.github/workflows/autodeploy.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当有改动推送到master分支时，启动Action</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span>             <span class="comment"># 有推送时就触发</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署Github</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">TIME_ZONE:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">        <span class="comment"># 要部署的公共仓库</span></span><br><span class="line">        <span class="attr">DEPLOY_REPO:</span> [<span class="string">UserName</span>]<span class="string">/[UserName].github.io</span></span><br><span class="line">        <span class="comment"># 要部署的分支</span></span><br><span class="line">        <span class="attr">DEPLOY_BRANCH:</span> <span class="string">master</span></span><br><span class="line">        <span class="comment"># 在私人源码仓库的设置中设置私钥：[SourceRepo]--&gt;Settings--&gt;Setrets--&gt;Actions secrets</span></span><br><span class="line">        <span class="attr">GITHUB_PERSONAL_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUBPERSONALTOKEN</span> <span class="string">&#125;&#125;</span>  </span><br><span class="line">        <span class="attr">GITHUB_USER_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUBUSERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">GITHUB_USER_EMAIL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUBUSEREMAIL</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">./public</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;$GITHUB_USER_NAME&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;$GITHUB_USER_EMAIL&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">        <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Automated Deployment By GitHub Actions @ $(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;) $&#123;TIME_ZONE&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --quiet: Suppress all output, including the listing of updated refs, unless an error occurs. Progress is not reported to the standard error stream.</span></span><br><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$GITHUB_PERSONAL_TOKEN@github.com/$DEPLOY_REPO&quot;</span> <span class="string">master:$DEPLOY_BRANCH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="2-5添加gulp压缩功能"><a href="#2-5添加gulp压缩功能" class="headerlink" title="2.5添加gulp压缩功能"></a><font size=3>2.5添加<code>gulp</code>压缩功能</font></h2><p>&emsp;&emsp;本地的时候有<code>gulp</code>压缩代码功能，自然也是可以实现<code>Github Actions</code>自动部署的时候进行静态压缩啦，在<code>autodeploy.yml</code>配置文件的<code>job</code>中<code>部署Github</code>之前添加以下内容，若是有报错之类的，可以将<code>安装gulp</code>相关内容移动到<code>安装依赖</code>之前。</p><figure class="highlight yaml"><figcaption><span>yaml [blogRoot]/.github/workflows/autodeploy.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装gulp</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span> <span class="string">gulp</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gulp压缩站点文件</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">gulp</span></span><br></pre></td></tr></table></figure><h2 id="2-6同步自动部署Gitee-Pages"><a href="#2-6同步自动部署Gitee-Pages" class="headerlink" title="2.6同步自动部署Gitee Pages"></a><font size=3>2.6同步自动部署<code>Gitee Pages</code></font></h2><p>&emsp;&emsp;有大神编写了插件以便于实现<code>Gitee Pages</code>的自动部署，相关文章和相关的<code>Github</code>项目在文章开头已经说过，可以参考，另外仓库的说明文档中也写了具体的使用方法。</p><ul><li>第一步：添加个人私钥和Gtiee的登陆密码到站点私有仓库的环境变量中</li></ul><p>&emsp;&emsp;个人私钥和公钥都在<code>.ssh</code>文件夹内，私钥为<code>~/.ssh/id_rsa</code> 文件内，使用时将文件内所内容，包括<code>-----BEGIN RSA PRIVATE KEY-----</code>和<code>-----END RSA PRIVATE KEY-----</code>在内的全部内容都存放到变量值里。<br><br>&emsp;&emsp;<code>Gitee</code>密码就是自己的登录密码。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/003GithubActions08.png"/></div><ul><li>第二步：修改自动部署配置文件</li></ul><p>&emsp;&emsp;在结尾添加以下内容：</p><figure class="highlight yaml"><figcaption><span>yaml [blogRoot]/.github/workflows/autodeploy.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">同步到</span> <span class="string">Gitee</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">      <span class="comment"># 注意在私人源码仓库的设置中：[SourceRepo]--&gt;Settings--&gt;SetretsSettings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span></span><br><span class="line">      <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">      <span class="comment"># 注意替换为自己的 GitHub 源仓库地址</span></span><br><span class="line">      <span class="attr">source-repo:</span> <span class="string">&quot;git@github.com:[UserName]/[UserName].github.io.git&quot;</span></span><br><span class="line">      <span class="comment"># 注意替换为自己的 Gitee 目标仓库地址</span></span><br><span class="line">      <span class="attr">destination-repo:</span> <span class="string">&quot;git@gitee.com:[UserName]/[UserName].git&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第一次需要手动部署Gitee Pages,而且登录地点会变成美国，将有一条警告邮件</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">构建</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@master</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">      <span class="comment"># 注意替换为自己的 Gitee 用户名</span></span><br><span class="line">      <span class="attr">gitee-username:</span> [<span class="string">UserName</span>]</span><br><span class="line">      <span class="comment"># 注意在私人源码仓库的设置中：[SourceRepo]--&gt;Settings--&gt;SetretsSettings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">      <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="comment"># 注意替换为自己的 Gitee 仓库</span></span><br><span class="line">      <span class="attr">gitee-repo:</span> [<span class="string">UserName</span>]<span class="string">/[UserName]</span></span><br><span class="line">      <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><div class="note info no-icon 点击查看注意事项 flat"><ul><li><code>Gitee</code>部署失败</li></ul><p>&emsp;&emsp;脚本的原理是用程序代替人工去点击<code>Gitee Pages</code>的更新按钮。所以需要先手动做一次页面部署，确保有那个更新按钮在，脚本才有生效的前提。</p><ul><li><code>Gitee</code>用<code>Github Actions</code>自动部署更新收到短信，提示异地登录需要验证码。</li></ul><p>&emsp;&emsp;因为<code>Github Actions</code>使用的是美国的服务器，所以，使用 <code>Github Actions</code>来远程更新<code>Gitee</code>的站点部署时，会收到异地登陆的短信，提示需要验证码。这个在脚本作者的<code>issues</code> 里有相应的解决方案:<a href="https://github.com/yanglbme/gitee-pages-action/issues/6" target="_blank">登陆失败 #6<i class="fa fa-external-link-alt"></i></a><br>&emsp;&emsp;我是直接之前绑定过微信的，所以每次只有异地登陆提醒，还没有收过验证码，如果之前没有绑定过的话，在微信上搜索<code>Gitee</code>微信公众号，可以在微信公众号内绑定自己的<code>Gitee</code>账号，这样虽然还是会有异地登录提示，但是发过来的消息不再需要填写验证码。</p></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【AD】AD基础01-PCB设计中的概念</title>
      <link href="post/75d3913c.html"/>
      <url>post/75d3913c.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是记录自己学习<code>Altium Designer</code>过程中的一些基础知识，后面若是有一些基础性的内容，也会更新在此篇文章。</p><span id="more"></span><h1 id="1-PCB的一些概念"><a href="#1-PCB的一些概念" class="headerlink" title="1.PCB的一些概念"></a><font size=3>1.PCB的一些概念</font></h1><h2 id="1-1PCB"><a href="#1-1PCB" class="headerlink" title="1.1PCB"></a><font size=3>1.1PCB</font></h2><p>&emsp;&emsp;印刷电路板（Printed circuit board PCB）。根据电路层数分类：分为单面板、双面板和多层板，常见的多层板一般为4层板或6层板，复杂的多层板可达几十层。根据软硬分类：分为刚性电路板和柔性电路板、软硬结合板。</p><h2 id="1-2PCBA"><a href="#1-2PCBA" class="headerlink" title="1.2PCBA"></a><font size=3>1.2PCBA</font></h2><p>&emsp;&emsp;PCBA有两种理解，一是PCB空板经过SMT贴片加工和DIP插件的加工过程，这个过程就是PCBA，二是经过了这些加工过程的成品电路板可以说是PCBA。<br>&emsp;&emsp;PCBA是成品板，PCB是裸板。</p><h2 id="1-3焊盘（Pad）"><a href="#1-3焊盘（Pad）" class="headerlink" title="1.3焊盘（Pad）"></a><font size=3>1.3焊盘（Pad）</font></h2><p>&emsp;&emsp;元件通过PCB上的引线孔，用焊锡焊接固定在PCB上，印制导线把焊盘连接起来，实现元件在电路中的电气连接。引线孔及周围的铜箔称为焊盘。焊盘用于实现元件与PCB板的电气连接。焊盘的通孔用于焊接直插型元件的管脚。</p><h2 id="1-4过孔（Via）"><a href="#1-4过孔（Via）" class="headerlink" title="1.4过孔（Via）"></a><font size=3>1.4过孔（Via）</font></h2><p>&emsp;&emsp;过孔也称金属化孔，在双面板和多层板中，为连通各层之间的印制导线，在各层需要连通的导线的交汇处钻上一个公共孔，即过孔。过孔用于布线过程中的层切换，以便实现所需的电气连通性。在工艺上，过孔的孔壁圆柱面上用化学沉积的方法镀上一层金属，用以连通中间各层需要连通的铜箔，而过孔的上下两面做成圆形焊盘形状，过孔的参数主要有孔的外径和钻孔尺寸。</p></font><table> <!-- 表格 -->    <tr><!--第一行-->        <td width=100px>名称</td><!--第一列-->        <td width=200px>英文</td><!--第二列-->        <td>含义</td><!--第三列-->    </tr>    <tr><!--第二行-->        <td width=100px>通孔</td><!--第一列-->        <td width=200px>Plating Through Hole</td><!--第二列-->        <td align="left">简称PTH，是一种用于内层连接的金属化孔，这种孔穿过整个线路板，可用于实现内部互连或作为元件的安装定位孔。</td><!--第三列-->    </tr>    <tr><!--第三行-->        <td width=100px>盲孔</td><!--第一列-->        <td width=200px>Blind Via Hole</td><!--第二列-->        <td align="left">简称BVH，位于印刷线路板的顶层和底层表面，具有一定深度，用于表层线路和下面的内层线路的连接，孔的深度通常不超过一定的比率（孔径）。</td><!--第三列-->    </tr>    <tr><!--第四行-->        <td width=100px>埋孔</td><!--第一列-->        <td width=200px>Buried Via Hole</td><!--第二列-->        <td align="left">PCB内部任意电路层间的连接但未导通至外层，也是未延伸到电路板表面的导通孔</td><!--第三列-->    </tr></table><h2 id="1-5扇孔"><a href="#1-5扇孔" class="headerlink" title="1.5扇孔"></a><font size=3>1.5扇孔</font></h2><ul><li>PCB设计中为什么要先进行扇孔？</li></ul><p>&emsp;&emsp;扇孔的目的有两个，一是打孔占位，减少回流路径！比如GND孔，就近扇孔可以做到缩短路径的目的！预先打孔是为了防止PCB不打孔后面走线的时候很密集的时候无法打孔下去，绕很远连接GND线，这种就很长的回流路径了。</p><p>&emsp;&emsp;这种做高速PCB设计及多层PCB设计的时候会经常遇到，预先打孔后面可以方便删除，反之等走线完了再想去加一个过孔，这样操作就很难，这时候通常的想法是随便找根线连上便是，不能考虑到信号的SI，不太符合规范做法。</p><ul><li>怎么判断那些该扇孔的？<br>&emsp;&emsp;都可以进行扇孔短线可以直接表层链接上，长线都可以进行统一扇孔，这对PCB设计师规划走线有很大的帮助，走出来的线也整齐美观。<br>&emsp;&emsp;PCB layout 布线之前先全局扇孔<br>&emsp;&emsp;（1）逆时针或者顺时针扇孔，短线直接连接。<br>&emsp;&emsp;（2）可左下角开始，短线直接连接，电源线直接加粗处理，VIA-8-16mil，shift+e抓取中心。<br>&emsp;&emsp;（3）为了美观，Via上下或者左右对其。<br>&emsp;&emsp;（4）晶振，&pi;形滤波，晶振线路不要有过孔处理，对信号不好，然后对晶振电路包地处理。<br>&emsp;&emsp;（5）电源类：VCC和GND过孔数量要一样。<br>&emsp;&emsp;（6）过孔的时候要注意地平面的完整性。两个过孔之间要有地可以过。</li></ul><h2 id="1-6覆铜"><a href="#1-6覆铜" class="headerlink" title="1.6覆铜"></a><font size=3>1.6覆铜</font></h2><p>&emsp;&emsp;所谓覆铜，就是将PCB上闲置的空间作为基准面，然后用固体铜填充，这些铜区又称为灌铜。覆铜的意义在于，减小地线阻抗，提高抗干扰能力；降低压降，提高电源效率；与地线相连，还可以减小环路面积。</p><h1 id="2-层的分类与含义"><a href="#2-层的分类与含义" class="headerlink" title="2.层的分类与含义"></a>2.层的分类与含义</h1><h2 id="2-1AD中的层"><a href="#2-1AD中的层" class="headerlink" title="2.1AD中的层"></a><font size=3>2.1AD中的层</font></h2><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/AltiumDesigner/001Layer1.png">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/AltiumDesigner/001Layer2.png"></div><h2 id="2-2AD中层的含义"><a href="#2-2AD中层的含义" class="headerlink" title="2.2AD中层的含义"></a><font size=3>2.2AD中层的含义</font></h2><table> <!-- 表格 -->    <tr> <!-- 第一行 -->        <td colspan="3" width=300px>Layer</td><!-- 第一列， 跨三列 -->        <!-- 第二列， 与该行第一列合并 -->        <!-- 第三列， 与该行第一列合并 -->        <td align="left">Layer为正面，在这一层，画一根线就是画一条导线，即凡是走线的地方就表示有铜皮连接。</td><!-- 第四列-->    </tr>    <tr> <!-- 第二行 -->        <td bgcolor=#FF0000 width=100px><font color=#FFFFFF>Top Layer </font></td><!-- 第一列 -->        <td  rowspan="2" width=100px>Signal layer<br>(信号层)</td><!-- 第二列,跨两行 -->        <td width=100px> 顶层信号层</td><!-- 第三列 -->        <td rowspan="2"  align="left"> 布线和放置元器件，如为单层板，则无Top层。</td><!-- 第四列，跨两行-->    </tr>    <tr> <!-- 第三行 -->        <td bgcolor=#0000FF width=100px><font color=#FFFFFF>Bottom Layer</font></td><!-- 第一列 -->        <!-- 第二列，与上一行第二列合并-->        <td width=100px>底层信号层 </td><!-- 第三列 -->        <!-- 第四列，与上一行第四列合并-->    </tr>    <tr> <!-- 第四行 -->        <td bgcolor=#FFFF00 width=100px><font color=#FFFFFF>Top Overlay </font></td><!-- 第一列 -->        <td  rowspan="2" width=100px>Silkscreen layer<br> (丝印层)</td><!-- 第二列,跨两行 -->        <td > 顶层丝印层</td><!-- 第三列 -->        <td rowspan="2"  align="left"> 标注各种丝印标识。</td><!-- 第四列，跨两行-->    </tr>    <tr> <!-- 第五行 -->        <td bgcolor=#808000 width=100px><font color=#FFFFFF>Bottom Overlay</font></td> <!-- 第一列 -->        <!-- 第二列，与上一行第二列合并-->        <td width=100px>底层丝印层 </td><!-- 第三列 -->        <!-- 第四列，与上一行第四列合并-->    </tr>    <tr> <!-- 第六行 -->        <td bgcolor=#800080 width=100px><font color=#FFFFFF>Top Solder</font></td><!-- 第一列 -->        <td rowspan="2" width=100px>Solder mask layer<br>(阻焊层)</td><!-- 第二列，跨两行 -->        <td width=100px>顶层阻焊层</td><!-- 第三列 -->        <td rowspan="2" align="left">又叫绿油层，是电路板的非布线层，控制做板的时候不覆盖绿油（白油）的区域。比如焊盘的位置，一些关键信号的测试点，不覆盖绿油，才能漏出焊盘。可以理解为在整片阻焊的绿油(白油)上开窗，目的是允许焊接！</td><!-- 第四列，跨两行-->    </tr>    <tr> <!-- 第七行 -->        <td bgcolor=#FF00FF width=100px><font color=#FFFFFF>Boottom Solder</font></td><!-- 第一列 -->        <!-- 第二列，与上一行第二列合并-->        <td width=100px>底层阻焊层</td><!-- 第三列 -->        <!-- 第四列，与上一行第四列合并-->    </tr>    <tr> <!-- 第八行 -->        <td bgcolor=808080 width=100px><font color=#FFFFFF>Top Paste</font></td><!-- 第一列 -->        <td rowspan="2" width=100px>Paste mask layer<br>(助焊层)</td><!-- 第二列，跨两行 -->        <td width=100px>顶层助焊层</td><!-- 第三列 -->        <td rowspan="2" align="left">指我们可以看到的露在外面的铜箔，表示不覆盖绿油（白油）的区域，提供给制版厂，用于制作钢网，凡是Top Paste层出现的地方，钢网上均开孔，这些开孔用来刷锡膏，而钢网上的孔就对应着电路板上的SMD 器件的焊点。</td><!-- 第四列，跨两行-->    </tr>    <tr> <!-- 第九行 -->        <td bgcolor=800000 width=100px><font color=#FFFFFF>Bottom Paste</font></td><!-- 第一列 -->        <!-- 第二列，与上一行第二列合并-->        <td width=100px>底层助焊层</td><!-- 第三列 -->        <!-- 第四列，与上一行第四列合并-->    </tr>    <tr> <!-- 第十行 -->        <td bgcolor=FF00FF width=100px><font color=#FFFFFF>Mechanical1</font></td><!-- 第一列 -->        <td colspan="2" width=200px>机械1层</td><!-- 第二列，跨两列 -->        <!-- 第三列，与该行第二列合并-->        <td align="left">一般用来绘制PCB的边框，作为机械外形，来定义PCB物理边框大小，故也称为外形层</td><!-- 第四列 -->    </tr>    <tr> <!-- 第十一行 -->        <td bgcolor=FF00FF width=100px><font color=#FFFFFF>Mechanical13</font></td><!-- 第一列 -->        <td colspan="2" width=200px>机械13层 </td><!-- 第二列，跨两列-->        <!-- 第三列，与该行第二列合并-->        <td align="left" rowspan="2">一般用于放置封装库中元器件封装的各种本体信息，一般在机械13层放置3D模型，在机械15层放置中心点及整个元器件的占位面积。</td><!-- 第四列，跨两行-->    </tr>    <tr> <!-- 第十二行 -->        <td bgcolor=008000 width=100px><font color=#FFFFFF>Mechanical15</font></td><!-- 第一列 -->        <td colspan="2" width=200px>机械15层</td><!-- 第二列，跨两列-->        <!-- 第三列，与该行第二列合并-->        <!-- 第四列 ，与上一行第四列合并-->    </tr>    <tr> <!-- 第十三行 -->        <td bgcolor=C0C0C0 width=100px><font color=#FFFFFF>Multi-Layer</font></td><!-- 第一列 -->        <td colspan="2" width=200px>多层</td><!-- 第二列，跨两列 -->        <!-- 第三列，与该行第二列合并-->        <td align="left">电路板上焊盘和穿透式过孔要穿透整个电路板，与不同的导电图形层建立电气连接关系，因此系统专门设置了一个抽象的层—多层。一般，焊盘与过孔都要设置在多层上，如果关闭此层，焊盘与过孔就无法显示出来。</td><!-- 第四列 -->    </tr>    <tr> <!-- 第十四行 -->        <td bgcolor=800000 width=100px><font color=#FFFFFF>Drill Guide</font></td><!-- 第一列 -->        <td width=100px rowspan="2">Drill layer<br>(钻孔层)</td><!-- 第二列，跨两行 -->        <td width=100px>钻孔指示图</td><!-- 第三列 -->        <td align="left" rowspan="2">钻孔层提供电路板制造过程中的钻孔信息(如焊盘，过孔就需要钻孔)。</td><!-- 第四列，跨两行 -->    </tr>    <tr> <!-- 第十五行 -->        <td bgcolor=FF002A width=100px><font color=#FFFFFF>Drill Drawing</font></td><!-- 第一列 -->        <!-- 第二列,与上一行第二列合并 -->        <td width=100px>钻孔图</td><!-- 第三列 -->        <!-- 第四列，与上一行第四列合并 -->    </tr>    <tr> <!-- 第十六行 -->        <td bgcolor=FF00FF width=100px><font color=#FFFFFF>Keep-Out Layer</font></td><!-- 第一列 -->        <td colspan="2" width=200px>禁止布线层 </td><!-- 第二列，跨两列 -->        <!-- 第三列,与该行第二列合并 -->        <td align="left">用于定义在电路板上能够有效放置元件和布线的区域。在该层绘制一个封闭区域作为布线有效区，在该区域外是不能自动布局和布线的。</td><!-- 第四列 -->    </tr>            <tr> <!-- 第十七行 -->        <td width=100px>Mid Layer</td><!-- 第一列 -->        <td colspan="2" width=200px>中间信号层 </td><!-- 第二列 -->        <td align="left">最多可有30层,在多层板中用于布信号线。</td><!-- 第四列 -->    </tr>        <tr> <!-- 第十八行 -->        <td colspan="3" width=300px>Plane</td><!-- 第一列， 跨三列 -->        <!-- 第二列， 与该行第一列合并 -->        <!-- 第三列， 与该行第一列合并 -->        <td align="left">Plane为负面，即所谓的“负片法”，这一层本身就是一片铜皮，画一根线，就是将铜皮分开，即凡是走线的地方就是将铜皮去掉，与该层连通的过孔会有一个十字的交叉线。</td><!-- 第四列-->    </tr>    <tr> <!-- 第十九行 -->        <td colspan="3" width=300px>Prepreg</td><!-- 第一列， 跨三列 -->        <!-- 第二列， 与该行第一列合并 -->        <!-- 第三列， 与该行第一列合并 -->        <td align="left">半固化片，又称预浸材料，是PCB的薄片绝缘材料，是用树脂浸渍并固化到中间程度（B阶）的薄片材料。半固化片可用作多层印制板的内层导电图形的黏结材料和层间绝缘。Prepreg类似于粘合剂+绝缘体，并且可以卷曲。</td><!-- 第四列-->    </tr>    <tr> <!-- 第二十行 -->        <td colspan="3" width=300px>Core</td><!-- 第一列， 跨三列 -->        <!-- 第二列， 与该行第一列合并 -->        <!-- 第三列， 与该行第一列合并 -->        <td align="left">Core又称之为芯板，是制作印制板的基础材料。具有一定的硬度及厚度，并且双面包铜。</td><!-- 第四列-->    </tr></table><p>&emsp;&emsp;<i class="fas fa-fan fa-spin" style="color: #FF1493; font-size: 1.3rem"></i>未完，待续。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> HardwareDesign </category>
          
          <category> AltiumDesigner </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD基础 </tag>
            
            <tag> PCB基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NexT】icon-图标库的使用</title>
      <link href="post/12dbbafd.html"/>
      <url>post/12dbbafd.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;在<code>NexT</code>主题中，默认是使用<code>Font Awesome</code>图标库的，它已经包含了大部分的图标，可以自定义显示的颜色，而且有些图标也支持动态效果，但是有一些需要用到的图标就不在可用之列了，这个时候就可以引入阿里矢量图标库(<code>iconfont</code>)来添加自己所需要的图标，本文将介绍如何使用<code>Font Awesome</code>图标库，以及如何引入和使用阿里矢量图标库(iconfont)。</p><span id="more"></span><h1 id="1-Font-Awesome图标库"><a href="#1-Font-Awesome图标库" class="headerlink" title="1.Font Awesome图标库"></a><font size=3>1.<code>Font Awesome</code>图标库</font></h1><h2 id="1-1Font-Awesome图标库的介绍"><a href="#1-1Font-Awesome图标库的介绍" class="headerlink" title="1.1Font Awesome图标库的介绍"></a><font size=3>1.1<code>Font Awesome</code>图标库的介绍</font></h2><p>&emsp;&emsp;<code>Font Awesome</code>其实是一种字体，它提供可缩放矢量图标，不需要<code>JavaScript</code>支持，可以被定制大小、颜色、阴影以及任何可以用CSS的样式。它有两种版本，一种是<code>Free</code>的免费版本，一种是<code>Pro</code>的收费版本，收费版本的图标图标自然是比免费版本的要多喽，不过免费版的大部分就够用了，实在不行，还可以使用另一种图标库。<br></p><div class="note info flat"><table>  <tr>    <td align="center">名称</td>    <td align="center">网址</td>  </tr>    <tr>    <td align="center">开源项目仓库</td>    <td align="left" style="color:#0593d3">https://github.com/FortAwesome/Font-Awesome</td>  </tr>    <tr>    <td align="center">官网网址</td>    <td align="left" style="color:#0593d3">https://fontawesome.com/</td>  </tr></table></div><p>&emsp;&emsp;在<code>NexT</code>主题中已经自动安装并引用了相关的文件，这里便不再重复说明如何安装该图标库。</p><div class="note info no-icon 若有需求，可点此查看主题中引用该图标库的相关部分 flat"><figure class="highlight yaml"><figcaption><span>yaml [blogRoot]/themes/next/_vendors.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fontawesome:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#x27;@fortawesome/fontawesome-free&#x27;</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">5.15</span><span class="number">.3</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">css/all.min.css</span></span><br><span class="line">  <span class="attr">alias:</span> <span class="string">font-awesome</span></span><br><span class="line">  <span class="attr">integrity:</span> <span class="string">sha256-2H3fkXt6FEmrReK448mDVGKb3WW2ZZw35gI7vqHOE4Y=</span></span><br></pre></td></tr></table></figure></div><h2 id="1-2Font-Awesome图标库的使用"><a href="#1-2Font-Awesome图标库的使用" class="headerlink" title="1.2Font Awesome图标库的使用"></a><font size=3>1.2<code>Font Awesome</code>图标库的使用</font></h2><h3 id="1-2-1基础应用"><a href="#1-2-1基础应用" class="headerlink" title="1.2.1基础应用"></a><font size=3>1.2.1基础应用</font></h3><ul><li>基础引用格式</li></ul><div class="tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#first-unique-name-1">i 标签</button></li><li class="tab"><button type="button" data-href="#first-unique-name-2">span 标签</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="first-unique-name-1"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- this icon&#x27;s (1) style prefix == fas and (2) icon name == camera --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例：<i class="fas fa-camera"></i></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="first-unique-name-2"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- using a &lt;span&gt; element to reference the icon --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>示例：<i class="fas fa-camera"></i></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>图标添加样式</li></ul><div class="tabs" id="second-unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#second-unique-name-1">添加span标签修改样式</button></li><li class="tab"><button type="button" data-href="#second-unique-name-2">直接修改样式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="second-unique-name-1"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 1em; color: #DA70D6;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px; color: #8A2BE2;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 1rem;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:#00BFFF;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><div align="left">  示例：<span style="font-size: 1em; color: #DA70D6;"><i class="fas fa-camera"></i></span>  <span style="font-size: 16px; color: #8A2BE2;"><i class="fas fa-camera"></i></span>  <span style="font-size: 1rem;">    <span style="color:    #00BFFF;"><i class="fas fa-camera"></i></span>  </span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="second-unique-name-2"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 1em; color: #DA70D6;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px; color: #8A2BE2;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 1rem; color:#00BFFF;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><div align="left">  示例：<i class="fas fa-camera" style="font-size: 1em; color: #DA70D6;"></i>  <i class="fas fa-camera" style="font-size: 16px; color: #8A2BE2;"></i>  <i class="fas fa-camera" style="font-size: 1rem; color:    #00BFFF;"></i></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>图标大小</li></ul><p>&emsp;&emsp;图标的大小除了可以直接添加样式来改变之外，还可以在引用的时候改变，这就方便了在不修改主题源码的情况下改变主题中显示的图标的大小，这中样式下，可以指定基准字体的大小，来确定图标的相对大小，当然也可以不指定，这样将采取默认的方式。</p><div class="note info no-icon 点击查看图标大小对应关系 flat"><table>    <tr><td align="center">Class</td><td align="center">Size</td><tr>    <tr><td align="center">fa-xs</td><td align="center">.75em</td><tr>    <tr><td align="center">fa-sm</td><td align="center">.875em</td><tr>    <tr><td align="center">fa-lg</td><td align="center">1.33em</td><tr>    <tr><td align="center">fa-2x</td><td align="center">2em</td><tr>    <tr><td align="center">fa-3x</td><td align="center">3em</td><tr>    <tr><td align="center">fa-4x</td><td align="center">4em</td><tr>    <tr><td align="center">fa-5x</td><td align="center">5em</td><tr>    <tr><td align="center">fa-6x</td><td align="center">6em</td><tr>    <tr><td align="center">fa-7x</td><td align="center">7em</td><tr>    <tr><td align="center">fa-8x</td><td align="center">8em</td><tr>    <tr><td align="center">fa-9x</td><td align="center">9em</td><tr>    <tr><td align="center">fa-10x</td><td align="center">10em</td><tr></table></div><div class="tabs" id="third-unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#third-unique-name-1">不指定基准字体大小</button></li><li class="tab"><button type="button" data-href="#third-unique-name-2">rem为单位</button></li><li class="tab"><button type="button" data-href="#third-unique-name-3">px为单位</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="third-unique-name-1"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-xs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-2x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-3x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-5x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-7x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-10x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><div align="left">  示例：  <div>    <i class="fas fa-camera fa-xs"></i>    <i class="fas fa-camera fa-sm"></i>    <i class="fas fa-camera fa-lg"></i>    <i class="fas fa-camera fa-2x"></i>    <i class="fas fa-camera fa-3x"></i>    <i class="fas fa-camera fa-5x"></i>    <i class="fas fa-camera fa-7x"></i>    <i class="fas fa-camera fa-10x"></i>  </div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="third-unique-name-2"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 0.5rem;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-xs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-2x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-3x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-5x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-7x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-10x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div align="left">  示例：  <div style="font-size: 0.5rem;">    <i class="fas fa-camera fa-xs"></i>    <i class="fas fa-camera fa-sm"></i>    <i class="fas fa-camera fa-lg"></i>    <i class="fas fa-camera fa-2x"></i>    <i class="fas fa-camera fa-3x"></i>    <i class="fas fa-camera fa-5x"></i>    <i class="fas fa-camera fa-7x"></i>    <i class="fas fa-camera fa-10x"></i></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="third-unique-name-3"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-xs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-2x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-3x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-5x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-7x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-10x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div align="left">  示例：  <div style="font-size: 20px;">    <i class="fas fa-camera fa-xs"></i>    <i class="fas fa-camera fa-sm"></i>    <i class="fas fa-camera fa-lg"></i>    <i class="fas fa-camera fa-2x"></i>    <i class="fas fa-camera fa-3x"></i>    <i class="fas fa-camera fa-5x"></i>    <i class="fas fa-camera fa-7x"></i>    <i class="fas fa-camera fa-10x"></i>  </div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-2-1进阶应用"><a href="#1-2-1进阶应用" class="headerlink" title="1.2.1进阶应用"></a><font size=3>1.2.1进阶应用</font></h3><p>&emsp;&emsp;这里的进阶应用中不写基础应用中可用样式，但是可以在基础应用的条件下增加进阶应用的这些样式，两者可以并存。</p><div class="note info flat"><p><i class="fas fa-fan fa-spin" style="color: #FF1493;font-size: 1.3rem"></i>官方参考文档：<a href="https://fontawesome.com/how-to-use/on-the-web/styling/sizing-icons" target="_blank">fontawesome官方帮助文档<i class="fa fa-external-link-alt"></i></a></p></div><ul><li>旋转图标</li></ul><div class="note info no-icon 点击查看旋转变量对应关系 flat"><table>    <tr><td align="center">Class</td><td align="left">Rotation Amount</td></tr>    <tr><td align="center">fa-rotate-90</td><td align="left">90°</td></tr>    <tr><td align="center">fa-rotate-180</td><td align="left">180°</td></tr>    <tr><td align="center">fa-rotate-270</td><td align="left">270°</td></tr>    <tr><td align="center">fa-flip-horizontal</td><td align="left">mirrors icon horizontally</td></tr>    <tr><td align="center">fa-flip-vertical</td><td align="left">mirrors icon vertically</td></tr>    <tr><td align="center">fa-flip-both</td><td align="left">mirrors icon vertically and horizontally (requires 5.7.0 or greater)</td></tr></table></div><div class="tabs" id="fourth-unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#fourth-unique-name-1">Rotating Icons</button></li><li class="tab"><button type="button" data-href="#fourth-unique-name-2">Rotating+Flipping</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="fourth-unique-name-1"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fa-3x&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-rotate-90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-rotate-180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-rotate-270&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-flip-horizontal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-flip-vertical&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-flip-both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div align="left">  示例：  <div class="fa-3x">    <i class="fas fa-snowboarding"></i>    <i class="fas fa-snowboarding fa-rotate-90"></i>    <i class="fas fa-snowboarding fa-rotate-180"></i>    <i class="fas fa-snowboarding fa-rotate-270"></i>    <i class="fas fa-snowboarding fa-flip-horizontal"></i>    <i class="fas fa-snowboarding fa-flip-vertical"></i>    <i class="fas fa-snowboarding fa-flip-both"></i>  </div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fourth-unique-name-2"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fa-3x&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- A icon that&#x27;s rotated 90 degress and flipped horizontally --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-rotate-90&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-flip-horizontal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- A icon that&#x27;s flipped horizontally and rotated 90 degrees  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-flip-horizontal&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-rotate-90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- A icon that&#x27;s flipped vertically and rotated 270 degress  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-flip-vertical&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-rotate-270&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- A icon that&#x27;s rotated 270 degress and flipped vertically --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-rotate-270&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-flip-vertical&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- A icon that&#x27;s flipped on both axes and arbitrarily rotated 45 degress  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-flip-both&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-rotate-by&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--fa-rotate-angle: 45deg;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- A icon that&#x27;s arbitrarily rotated 45 degres and flipped on both axes  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-rotate-by&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block; --fa-rotate-angle: 45deg;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-snowboarding fa-flip-both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div align="left">  示例：  <div class="fa-3x">    <!-- A icon that's rotated 90 degress and flipped horizontally -->    <span class="fa-rotate-90" style="display: inline-block;">      <i class="fas fa-snowboarding fa-flip-horizontal"></i>    </span>    <!-- A icon that's flipped horizontally and rotated 90 degrees  -->    <span class="fa-flip-horizontal" style="display: inline-block;">      <i class="fas fa-snowboarding fa-rotate-90"></i>    </span>    <!-- A icon that's flipped vertically and rotated 270 degress  -->    <span class="fa-flip-vertical" style="display: inline-block;">      <i class="fas fa-snowboarding fa-rotate-270"></i>    </span>    <!-- A icon that's rotated 270 degress and flipped vertically -->    <span class="fa-rotate-270" style="display: inline-block;">      <i class="fas fa-snowboarding fa-flip-vertical"></i>    </span>    <!-- A icon that's flipped on both axes and arbitrarily rotated 45 degress  -->    <span class="fa-flip-both" style="display: inline-block;">      <i class="fas fa-snowboarding fa-rotate-by" style="--fa-rotate-angle: 45deg;"></i>    </span>    <!-- A icon that's arbitrarily rotated 45 degres and flipped on both axes  -->    <span class="fa-rotate-by" style="display: inline-block; --fa-rotate-angle: 45deg;">      <i class="fas fa-snowboarding fa-flip-both"></i>    </span>  </div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>动态图标</li></ul><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bullhorn fa-spin&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #FF1493;font-size: 1.3rem&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-fan fa-spin&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #FF1493;font-size: 1.3rem&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><div align="left">  示例：  <i class="fas fa-bullhorn fa-spin" style="color: #FF1493;font-size: 1.3rem"></i>  <i class="fas fa-fan fa-spin" style="color: #FF1493;font-size: 1.3rem"></i></div><h1 id="2-iconfont阿里矢量图标库"><a href="#2-iconfont阿里矢量图标库" class="headerlink" title="2.iconfont阿里矢量图标库"></a><font size=3>2.<code>iconfont</code>阿里矢量图标库</font></h1><p>&emsp;&emsp;阿里矢量图标库中的图标较为丰富，有许多<code>Font Awesome</code>没有的图标，也含有许多的多色图标，下边就介绍如何在<code>NexT</code>中使用该图标库。</p><ul><li>登录注册</li></ul><p>&emsp;&emsp;首先去官网进行注册：<a href="https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2" traget="_blank">阿里巴巴矢量图标库<i class="fa fa-external-link-alt"></i></a>，也可以使用自己的<code>Github</code>账号直接登录。</p><ul><li>挑选图标</li></ul><p>&emsp;&emsp;进入首页之后选择菜单栏的【图标库】，然后按下图箭头所指进行自己想要图标的添加，这样会把自己的这些图标添加到购物车。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/007iconfont1.png"></div><ul><li>添加到项目</li></ul><p>&emsp;&emsp;挑选完图标后，点击界面右上角的购物车图标，此时会在右侧弹出如下界面，然后按箭头添加到项目即可，若还未创建项目，则可按照提示进行项目创建，或者自己提前创建好项目，此处不再提示如何创建项目。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/007iconfont2.png"/></div><ul><li>生成代码</li></ul><p>&emsp;&emsp;添加自己选择的图标到项目之后，可以到【我的项目】界面，如下图所示，该图标库有三种引用方式，分别是<code>Unicode</code>、<code>Font class</code>和<code>Symbol</code>，选择自己想用的引用方式，点击下方的【<strong>点此生成</strong>】即可生成相应的引用方式，另外要注意的是，不管哪种引用方式，在新增或者删除图标的时候，引用代码都需要进行<strong>更新</strong>，相应的站点中的相应文件内容也需要更新。</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/007iconfont3.png"></div><ul><li>图标引用</li></ul><div class="note info flat"><p><i class="fas fa-fan fa-spin" style="color: #FF1493;font-size: 1.3rem"></i>官方参考文档：<a href="https://www.iconfont.cn/help/detail?helptype=code" target="_blank">阿里巴巴矢量图标库使用帮助文档<i class="fa fa-external-link-alt"></i></a></p></div><div class="tabs" id="fifth-unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#fifth-unique-name-1">Unicode</button></li><li class="tab"><button type="button" data-href="#fifth-unique-name-2">Font class</button></li><li class="tab"><button type="button" data-href="#fifth-unique-name-3">Symbol</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="fifth-unique-name-1"><p>&emsp;&emsp;<code>unicode</code>是字体在网页端最原始的应用方式，特点是：</p><ul><li>兼容性最好，支持<code>ie6+</code>，及所有现代浏览器。</li><li>支持按字体的方式去动态调整图标大小，颜色等等。</li><li>但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。</li></ul><div class="note warning flat"><p>&emsp;&emsp;注意：新版<code>iconfont</code>支持多色图标，这些多色图标在<code>unicode</code>模式下将不能使用，如果有需求建议使用<code>symbol</code>的引用方式</p></div><div class="note info no-icon 点击查看使用步骤 flat"><p>&emsp;&emsp;<code>unicode</code>使用步骤如下：</p><ul><li>第一步：拷贝自己项目下面生成的<code>font-face</code>，并添加到样式文件</li></ul><p>&emsp;&emsp;我这里是自己新建了一个单独的<code>iconfont.styl</code>文件来存放阿里矢量图标库的样式代码，并在<code>[blogRoot]/source/_data/styles.styl</code>进行引用。</p><figure class="highlight stylus"><figcaption><span>stylus [blogRoot]/source/_data/iconfont.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: <span class="string">&#x27;iconfont&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: url(<span class="string">&#x27;iconfont.eot&#x27;</span>);</span><br><span class="line">    <span class="attribute">src</span>: url(<span class="string">&#x27;iconfont.eot?#iefix&#x27;</span>) format(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    url(<span class="string">&#x27;iconfont.woff&#x27;</span>) format(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    url(<span class="string">&#x27;iconfont.ttf&#x27;</span>) format(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    url(&#x27;iconfont.svg#iconfont&#x27;) format(&#x27;svg&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二步：在<code>iconfont.styl</code>文件中定义使用iconfont的样式</li></ul><figure class="highlight stylus"><figcaption><span>stylus [blogRoot]/source/_data/iconfont.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.iconfont&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">16px</span>;<span class="attribute">font-style</span>:normal;</span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">    -webkit-text-stroke-<span class="attribute">width</span>: <span class="number">0.2px</span>;</span><br><span class="line">    -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三步：挑选相应图标并获取字体编码，应用于页面</li></ul><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#x33;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;效果如下图：</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/007iconfont4.png"></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fifth-unique-name-2"><p>&emsp;&emsp;<code>font-class</code>是<code>unicode</code>使用方式的一种变种，主要是解决<code>unicode</code>书写不直观，语意不明确的问题。</p><p>&emsp;&emsp;与<code>unicode</code>使用方式相比，具有如下特点：</p><ul><li>兼容性良好，支持<code>ie8+</code>，及所有现代浏览器。</li><li>相比于<code>unicode</code>语意明确，书写更直观。可以很容易分辨这个icon是什么。</li><li>因为使用<code>class</code>来定义图标，所以当要替换图标时，只需要修改<code>class</code>里面的<code>unicode</code>引用。</li><li>不过因为本质上还是使用的字体，所以多色图标还是不支持的。</li></ul><div class="note info no-icon 点击查看使用步骤 flat"><p>&emsp;&emsp;<code>font-class</code>使用步骤如下：</p><ul><li>第一步：拷贝自己项目下面生成的<code>font-face</code>，并添加到样式文件</li></ul><p>&emsp;&emsp;项目中的该种引用方式生成的代码是一个<code>css</code>链接格式，这样的话在<code>styl</code>文件中怎么引用都没有成功，所以就按下边的方法在模板渲染文件中直接加载这个样式文件啦。</p><figure class="highlight plain"><figcaption><span>nunjuck [blogRoot]/source/_data/head.njk</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href&#x3D;&quot;http:&#x2F;&#x2F;at.alicdn.com&#x2F;t&#x2F;font_8d5l8fzk5b87iudi.css&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;不过呢，我这里是自己新建了一个单独的<code>iconfont.styl</code>文件来存放阿里矢量图标库的样式代码，所以我就将链接中的样式文件给复制下来，并在<code>[blogRoot]/source/_data/styles.styl</code>进行引用，具体代码可以查看自己项目中相应链接中的内容。</p><ul><li>第二步：挑选相应图标并获取类名，应用于页面<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><div align="left">  示例：<i class="iconfont icon-shoujizhuti_15bianqian"></i></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fifth-unique-name-3"><p>&emsp;&emsp;<code>Symbol</code>是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章 这种用法其实是做了一个<code>svg</code>的集合，与前面两种相比具有如下特点：</p><ul><li>支持多色图标了，不再受单色限制。</li><li>通过一些技巧，支持像字体那样，通过<code>font-size</code>,<code>color</code>来调整样式。</li><li>兼容性较差，支持 <code>ie9+</code>,及现代浏览器。</li><li>浏览器渲染<code>svg</code>的性能一般，还不如<code>png</code>。</li></ul><div class="note info no-icon 点击查看使用步骤 flat"><p>&emsp;&emsp;<code>Symbol</code>使用步骤如下：</p><ul><li>第一步：拷贝项目下面生成的<code>symbol</code>代码并在相应文件引用</li></ul><p>&emsp;&emsp;由于该种方式生成的是一种脚本文件，所以可以在布局模板文件的注入文件<code>custom-Scripts.njk</code>进行引用使用。</p><figure class="highlight plain"><figcaption><span>nunjuck [blogRoot]/source/_data/custom-Scripts.njk</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;&#x2F;&#x2F;at.alicdn.com&#x2F;t&#x2F;font_8d5l8fzk5b87iudi.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li>第二步：加入通用css代码（引入一次就行）</li></ul><p>&emsp;&emsp;我这里是自己新建了一个单独的<code>iconfont.styl</code>文件来存放阿里矢量图标库的样式代码，并在<code>[blogRoot]/source/_data/styles.styl</code>进行引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.icon &#123;</span><br><span class="line">    width: 1em; height: 1em;</span><br><span class="line">    vertical-align: -0.15em;</span><br><span class="line">    fill: currentColor;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三步：挑选相应图标并获取类名，应用于页面</li></ul><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下图，可以发现该种引用方式可以直接显示多色图标：</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/007iconfont5.png"></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><br><p>&emsp;&emsp;对于我来说，还是选择了<code>font-class</code>这种方式，因为这种方式跟<code>Font Awesome</code>是兼容的，不想修改源码的话，这个应该是最方便替换<code>Font Awesome</code>图标的，但是有些地方替换后大小可能与之前不符，在样式里对相应的地方进行修改就可以啦，似乎黑白配色跟<code>NexT</code>才更加相符，我不是很追求图标的颜色多样，方便使用就可以啦，哈哈(ฅ&gt;ω&lt;*ฅ)。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】Python基础3-文件读写</title>
      <link href="post/a28891a0.html"/>
      <url>post/a28891a0.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是介绍<code>python</code>的文件读写操作。</p><span id="more"></span><h1 id="一-文件打开与关闭"><a href="#一-文件打开与关闭" class="headerlink" title=" 一.文件打开与关闭"></a><font size=3> 一.文件打开与关闭</font></h1><h2 id="1-文件读写的步骤"><a href="#1-文件读写的步骤" class="headerlink" title="1.文件读写的步骤"></a><font size=3>1.文件读写的步骤</font></h2><ul><li>打开文件，或者新建立一个文件，获取文件描述符</li><li>读/写数据，操作文件描述符</li><li>关闭文件</li></ul><p>&emsp;&emsp;文件读写操作完成后，应该及时关闭。一方面，文件对象会占用操作系统的资源；另外一方面，操作系统对同一时间能打开的文件描述符的数量是有限制的，在<code>Linux</code>操作系统上可以通过<code>ulimit -n </code>来查看这个显示数量。如果不及时关闭文件，还可能会造成数据丢失。</p><h2 id="2-打开文件-open-函数"><a href="#2-打开文件-open-函数" class="headerlink" title="2.打开文件-open()函数"></a><font size=3>2.打开文件-open()函数</font></h2><h3 id="2-1-函数在库中的原型"><a href="#2-1-函数在库中的原型" class="headerlink" title="2.1 函数在库中的原型"></a><font size=3>2.1 函数在库中的原型</font></h3><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span>(<span class="params">file: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">bytes</span>, <span class="built_in">int</span>], mode: <span class="built_in">str</span>=..., buffering: <span class="built_in">int</span>=..., encoding: <span class="type">Optional</span>[<span class="built_in">str</span>]=..., errors: <span class="type">Optional</span>[<span class="built_in">str</span>]=..., newline: <span class="type">Optional</span>[<span class="built_in">str</span>]=..., closefd: <span class="built_in">bool</span>=..., opener: <span class="type">Optional</span>[<span class="type">Callable</span>[[<span class="built_in">str</span>, <span class="built_in">int</span>], <span class="built_in">int</span>]]=...</span>)</span></span><br><span class="line"><span class="function">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="title">Open</span> <span class="title">file</span> <span class="title">and</span> <span class="title">return</span> <span class="title">a</span> <span class="title">stream</span>. <span class="title">Raise</span> <span class="title">OSError</span> <span class="title">upon</span> <span class="title">failure</span>.</span></span><br><span class="line"><span class="function"><span class="title">file</span> <span class="title">is</span> <span class="title">either</span> <span class="title">a</span> <span class="title">text</span> <span class="title">or</span> <span class="title">byte</span> <span class="title">string</span> <span class="title">giving</span> <span class="title">the</span> <span class="title">name</span> (<span class="params"><span class="keyword">and</span> the path <span class="keyword">if</span> the file isn<span class="string">&#x27;t in the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given, it is closed when the returned I/O object is closed, unless closefd is set to False.)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">mode is an optional string that specifies the mode in which the file is opened. It defaults to &#x27;</span><span class="string">r&#x27; which means open for reading in text mode. Other common values are &#x27;</span>w<span class="string">&#x27; for writing (truncating the file if it</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span></span></span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>参数</th><th align="left">含义</th></tr></thead><tbody><tr><td>file</td><td align="left">要创建或打开文件的文件名称，该名称要用引号（单引号或双引号都可以）括起来。如果要打开的文件和当前执行的代码文件位于同一目录，则使用文件名即可；否则，此参数需要指定打开文件所在的完整路径。</td></tr><tr><td>mode</td><td align="left">可选参数，用于指定文件的打开模式。如果不写，则默认以只读（r）的模式打开文件。</td></tr><tr><td>buffering</td><td align="left">可选参数，用于指定对文件做读写操作时，是否使用缓冲区。</td></tr><tr><td>encoding</td><td align="left">设定打开文件时所使用的编码格式，不同平台的 <code>ecoding </code>参数值也不同，以 <code>windows </code>为例，其默认为 <code>cp936</code>（实际上就是<code>GBK</code>编码）。</td></tr></tbody></table><ul><li>使用格式如下<figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件，注意windows下文件路径要用转义符号保留 \ </span></span><br><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># file1：表示要创建的文件对象，它将包含文件的各种信息</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-文件打开时访问模式（mode参数）"><a href="#2-2-文件打开时访问模式（mode参数）" class="headerlink" title="2.2 文件打开时访问模式（mode参数）"></a><font size=3>2.2 文件打开时访问模式（mode参数）</font></h3><ul><li>访问模式及其说明</li></ul><table><!-- 表格开始 -->    <tr><!-- 第1行 -->        <td width=200px><!-- 第1列 -->        访问模式        </td>        <td align="center"><!-- 第2列 -->        说明        </td>    </tr>    <tr><!-- 第2行 -->        <td width=200px><!-- 第1列 -->        r        </td>        <td align="left"><!-- 第2列 -->以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。如果文件不存在会报错        </td>    </tr>    <tr><!-- 第3行 -->        <td width=200px><!-- 第1列 -->w</td>        <td  align="left"><!-- 第2列 -->打开一个文件只用于写入。如果文件存在则将其内容清空，如果文件不存在则创建新文件。</td>    </tr>    <tr><!-- 第4行 -->        <td width=200px><!-- 第1列 -->        a        </td>        <td  align="left"><!-- 第2列 -->打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。        </td>    </tr>    <tr><!-- 第5行 -->        <td width=200px><!-- 第1列 -->        rb        </td>        <td  align="left"><!-- 第2列 -->        以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。        </td>    </tr>    <tr><!-- 第6行 -->        <td width=200px><!-- 第1列 -->        wb        </td>        <td  align="left"><!-- 第2列 -->以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。        </td>    </tr>    <tr><!-- 第7行 -->        <td width=200px><!-- 第1列 -->        ab        </td>        <td  align="left"><!-- 第2列 -->以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。        </td>    </tr>    <tr><!-- 第8行 -->        <td width=200px><!-- 第1列 -->        r+        </td>        <td  align="left"><!-- 第2列 -->        在r的基础上增加了可写功能。文件指针将会放在文件的开头。        如原来文件内容是"hello"，打开文件后写入"abcd"则文件内容会变成"abcdo"。        </td>    </tr>    <tr><!-- 第9行 -->        <td width=200px><!-- 第1列 -->        w+        </td>        <td  align="left"><!-- 第2列 -->        在w的基础上增加了可读功能。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。在打开文件时就会先将文件内容清空。        </td>.    </tr>    <tr><!-- 第10行 -->        <td width=200px><!-- 第1列 -->        a+        </td>        <td  align="left"><!-- 第2列 -->        在a的基础上增加了可读功能。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。a+只能写到文件末尾（无论当前文件指针在哪里）        </td>    </tr>    <tr><!-- 第11行 -->        <td width=200px><!-- 第1列 -->        rb+        </td>        <td  align="left"><!-- 第2列 -->        以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。        </td>    </tr>    <tr><!-- 第12行 -->        <td width=200px><!-- 第1列 -->        wb+        </td>        <td  align="left"><!-- 第2列 -->        以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。        </td>    <tr><!-- 第13行 -->        <td width=200px><!-- 第1列 -->        ab+        </td>        <td  align="left"><!-- 第2列 -->        以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。        </td>    </tr></table><h2 id="3-关闭文件-close-函数"><a href="#3-关闭文件-close-函数" class="headerlink" title="3.关闭文件-close()函数"></a><font size=3>3.关闭文件-close()函数</font></h2><ul><li>函数原型</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>说明<br>&emsp;&emsp;<code>close() </code>方法用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作， 否则会触发<code>ValueError</code>错误。</li><li>使用格式</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上边以file1作为文件对象打开了一个文件</span></span><br><span class="line">flie1.close()  <span class="comment"># 关闭刚才打开的文件</span></span><br></pre></td></tr></table></figure><h1 id="二-文件相关的函数"><a href="#二-文件相关的函数" class="headerlink" title="二.文件相关的函数"></a><font size=3>二.文件相关的函数</font></h1><p>&emsp;&emsp;以下出现的指针，都表示文件读取位置，因为在C语言中叫习惯了，而且这个个人感觉比较形象，所以下边就这样用了。</p><h2 id="1-写数据write"><a href="#1-写数据write" class="headerlink" title="1.写数据write()"></a><font size=3>1.写数据write()</font></h2><h3 id="1-1-函数说明"><a href="#1-1-函数说明" class="headerlink" title="1.1 函数说明"></a><font size=3>1.1 函数说明</font></h3><ul><li>函数原型</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">self, s: AnyStr</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>使用格式</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file1.write(<span class="string">&quot;string&quot;</span>)  <span class="comment"># 打开文件之后，将字符串写入文件。</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意，在使用该函数的时候，打开的文件必须具有写的权限。</p><h3 id="1-2-函数使用实例"><a href="#1-2-函数使用实例" class="headerlink" title="1.2 函数使用实例"></a><font size=3>1.2 函数使用实例</font></h3><p>&emsp;&emsp;提前创建文件，并写入数据，以区分不同写入模式的时候，对文件的影响，由于以<code>w</code>模式打开文件，会直接清除所有数据，所以将其作为最后一个实例。</p><ul><li>初始文件内容如下</li></ul><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file1.png" height="100%" width="100%"></div><ul><li><p><code>r+</code>打开文件后写入</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)  <span class="comment"># r+格式打开文件</span></span><br><span class="line">file1.write(<span class="string">&quot;Hello World&quot;</span>)  <span class="comment"># 写入数据</span></span><br><span class="line">file1.close()  <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file2.png" height="100%" width="100%"></div></li><li><p><code>a+</code>打开文件后写入</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>)  <span class="comment"># a+格式打开文件</span></span><br><span class="line">file1.write(<span class="string">&quot;Hello World&quot;</span>)  <span class="comment"># 写入数据</span></span><br><span class="line">file1.close()  <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file3.png" height="100%" width="100%"></div></li><li><p><code>w+</code>打开文件后写入</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>)  <span class="comment"># w+格式打开文件</span></span><br><span class="line">file1.write(<span class="string">&quot;Hello World&quot;</span>)  <span class="comment"># 写入数据</span></span><br><span class="line">file1.close()  <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file4.png" height="100%" width="100%"></div></li><li><p>总结<br>&emsp;&emsp;由上述三个例子可以看出三者区别，<code>r+</code>打开，会将指针放在开头，向后覆盖数据，<code>a+</code>会将指针放在末尾，从末尾添加数据，而<code>w+</code>打开，直接先清除所有数据，再从开头写入数据。</p></li></ul><h2 id="2-读文件函数read"><a href="#2-读文件函数read" class="headerlink" title="2.读文件函数read()"></a><font size=3>2.读文件函数read()</font></h2><h3 id="2-1-函数说明"><a href="#2-1-函数说明" class="headerlink" title="2.1 函数说明"></a><font size=3>2.1 函数说明</font></h3><ul><li>函数原型</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self, n: <span class="built_in">int</span> = -<span class="number">1</span></span>) -&gt; AnyStr:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>使用格式</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file1.read(num)  <span class="comment"># 以读的权限打开文件后，对文件读取，num为整型数字，意义为读取字节数</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;函数的参数为整型，若不写，则默认读取文件中所有数据，返回值为读取到的数据，为字符串类型。</p><h3 id="2-2-函数使用实例"><a href="#2-2-函数使用实例" class="headerlink" title="2.2 函数使用实例"></a><font size=3>2.2 函数使用实例</font></h3><ul><li>文件中原始数据如下</li></ul><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file5.png" height="100%" width="100%"></div><ul><li>读取全部数据</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># r格式打开文件</span></span><br><span class="line">data = file1.read()  <span class="comment"># 读取数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))    <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(data)          <span class="comment"># 打印读取的数据</span></span><br><span class="line">file1.close()        <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file6.png" height="100%" width="100%"></div><ul><li>读取固定字节数据</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># r格式打开文件</span></span><br><span class="line">data = file1.read(<span class="number">15</span>)  <span class="comment"># 读取15字节数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data))       <span class="comment"># 打印读取数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(data)            <span class="comment"># 打印读取的数据</span></span><br><span class="line">file1.close()          <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file7.png" height="100%" width="100%"></div><p>&emsp;&emsp;由打印数据可得，一共读取了12个字符，但是实际长度有15，原因在于读取了3个换行符号。</p><h2 id="3-读文件函数readline"><a href="#3-读文件函数readline" class="headerlink" title="3.读文件函数readline()"></a><font size=3>3.读文件函数readline()</font></h2><h3 id="3-1-函数说明"><a href="#3-1-函数说明" class="headerlink" title="3.1 函数说明"></a><font size=3>3.1 函数说明</font></h3><ul><li>函数原型</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readline</span>(<span class="params">self, limit: <span class="built_in">int</span> = -<span class="number">1</span></span>) -&gt; AnyStr:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>函数使用格式</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = file1.readline(num)  <span class="comment"># 读取一行数据</span></span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><p><code>num</code>：函数参数，该参数不写，表示读取整行数据，并把文件指针移到下一行开头，若指定了数字，则该数字必须为整数，且把<code>num</code>个字节数据当作一行，把指针移到<code>num</code>后面的位置，下一次便从这里开始读取，这样就会出现一行当作多行使用。<br><code>data</code>：读取到的数据存放的变量名，该数据会是一个字符串类型的数据。</p><h3 id="3-2-函数使用实例"><a href="#3-2-函数使用实例" class="headerlink" title="3.2 函数使用实例"></a><font size=3>3.2 函数使用实例</font></h3><ul><li>文件中原始数据如下</li></ul><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file8.png" height="100%" width="100%"></div><ul><li>无参数，直接读取一整行</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># r格式打开文件</span></span><br><span class="line">data1 = file1.readline()  <span class="comment"># 读取第一行</span></span><br><span class="line">data2 = file1.readline()  <span class="comment"># 读取第二行</span></span><br><span class="line">data3 = file1.readline()  <span class="comment"># 读取第三行</span></span><br><span class="line">data4 = file1.readline()  <span class="comment"># 读取第四行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data1))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data1))       <span class="comment"># 打印读取数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(data1)            <span class="comment"># 打印读取的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data2))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data2))       <span class="comment"># 打印读取数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(data2)            <span class="comment"># 打印读取的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data3))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data3))       <span class="comment"># 打印读取数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(data3)            <span class="comment"># 打印读取的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data4))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data4))       <span class="comment"># 打印读取数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(data4)            <span class="comment"># 打印读取的数据</span></span><br><span class="line">file1.close()           <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file9.png" height="100%" width="100%"></div><ul><li>有参数读取</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># r格式打开文件</span></span><br><span class="line">data1 = file1.readline(<span class="number">10</span>)  <span class="comment"># 读取第一行</span></span><br><span class="line">data2 = file1.readline(<span class="number">8</span>)   <span class="comment"># 读取第二行</span></span><br><span class="line">data3 = file1.readline()    <span class="comment"># 读取第三行</span></span><br><span class="line">data4 = file1.readline()    <span class="comment"># 读取第四行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data1))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data1))       <span class="comment"># 打印读取数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(data1)            <span class="comment"># 打印读取的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data2))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data2))       <span class="comment"># 打印读取数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(data2)            <span class="comment"># 打印读取的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data3))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data3))       <span class="comment"># 打印读取数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(data3)            <span class="comment"># 打印读取的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data4))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data4))       <span class="comment"># 打印读取数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(data4)            <span class="comment"># 打印读取的数据</span></span><br><span class="line">file1.close()           <span class="comment"># 关闭文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file10.png" height="100%" width="100%"></div>&emsp;&emsp;由打印数据可知，最后第一行数据被进行了拆分，只读取了相应字节数据。<h2 id="4-读文件函数readlines"><a href="#4-读文件函数readlines" class="headerlink" title="4.读文件函数readlines()"></a><font size=3>4.读文件函数readlines()</font></h2><h3 id="4-1-函数说明"><a href="#4-1-函数说明" class="headerlink" title="4.1 函数说明"></a><font size=3>4.1 函数说明</font></h3><ul><li>函数原型</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readlines</span>(<span class="params">self, hint: <span class="built_in">int</span> = -<span class="number">1</span></span>) -&gt; <span class="type">List</span>[AnyStr]:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>函数使用格式</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = file1.readlines(num)  <span class="comment"># 读取文件中所有数据，返回值为列表，num一般不写，写了也没太大用处</span></span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><p><code>data</code>：读取到的数据存放的变量名，该数据会是一个列表类型的数据，该函数读取文件中的所有行，每行的数据都是字符串，这些字符串又被组成一个列表。<br><code>num</code>：函数参数，该参数不写或者<code>num=0</code>，表示按行读取文件中所有数据，包含换行符，最后再将所有数据整合成列表，当<code>num</code>写了，且不为0时，该函数功能与<code>readline</code>一致，只读取一行，且将指针移到下一行开头，但是不同的是，该函数输出的是列表类型数据。</p><h3 id="4-2-函数使用实例"><a href="#4-2-函数使用实例" class="headerlink" title="4.2 函数使用实例"></a><font size=3>4.2 函数使用实例</font></h3><ul><li>文件中原始数据如下</li></ul><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file11.png" height="100%" width="100%"></div><ul><li>无参数，读取所有数据</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># r格式打开文件</span></span><br><span class="line">data1 = file1.readlines()  <span class="comment"># 第一次读取</span></span><br><span class="line">data2 = file1.readlines()  <span class="comment"># 第二次读取</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data1))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(data1)            <span class="comment"># 打印读取的数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data2))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(data2)            <span class="comment"># 打印读取的数据</span></span><br><span class="line">file1.close()           <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file12.png" height="100%" width="100%"></div><p>&emsp;&emsp;第二次读取输出列表为空，说明第一次读取完毕后，函数将文件指针移到了结尾。</p><ul><li>有参数，0与非0的区别</li></ul><p>&emsp;&emsp;为节省空间，不做重复工作，这里只做了一个。</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># r格式打开文件</span></span><br><span class="line">data1 = file1.readlines(<span class="number">3</span>)  <span class="comment"># 第一次读取</span></span><br><span class="line">data2 = file1.readlines(<span class="number">0</span>)  <span class="comment"># 第二次读取</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data1))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(data1)            <span class="comment"># 打印读取的数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data2))      <span class="comment"># 打印读取的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(data2)            <span class="comment"># 打印读取的数据</span></span><br><span class="line">file1.close()           <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file13.png" height="100%" width="100%"></div>&emsp;&emsp;第一次参数为3，只读取了一行，第二次参数为0，读取了剩下所有数据。<h2 id="5-文件读取位置函数tell"><a href="#5-文件读取位置函数tell" class="headerlink" title="5.文件读取位置函数tell()"></a><font size=3>5.文件读取位置函数tell()</font></h2><h3 id="5-1-函数说明"><a href="#5-1-函数说明" class="headerlink" title="5.1 函数说明"></a><font size=3>5.1 函数说明</font></h3><ul><li>函数原型</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>函数使用格式</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file1.tell() <span class="comment"># 读取文件当前读写位置，返回值为int型</span></span><br></pre></td></tr></table></figure><ul><li>注意：该函数用于<code>readlines()</code>函数后的时候，<code>readlines()</code>不能有参数，参数最多只能是0，否则出错。</li></ul><h3 id="5-2-函数使用实例"><a href="#5-2-函数使用实例" class="headerlink" title="5.2 函数使用实例"></a><font size=3>5.2 函数使用实例</font></h3><ul><li>文件中原始数据如下</li></ul><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file14.png" height="100%" width="100%"></div><ul><li>无参数，读取所有数据</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># r格式打开文件</span></span><br><span class="line">data1 = file1.read(<span class="number">3</span>)  <span class="comment"># 第一次读取3个字节数据</span></span><br><span class="line"><span class="built_in">print</span>(file1.tell())    <span class="comment"># 打印文件读写位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(file1.tell()))  <span class="comment"># 打印返回值类型</span></span><br><span class="line"><span class="built_in">print</span>(data1)               <span class="comment"># 打印读取的数据</span></span><br><span class="line"></span><br><span class="line">data2 = file1.readline()  <span class="comment"># 第二次读取一行</span></span><br><span class="line"><span class="built_in">print</span>(file1.tell())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(file1.tell()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data2))         <span class="comment"># 打印读取的数据长度</span></span><br><span class="line"><span class="built_in">print</span>(data2)              <span class="comment"># 打印读取的数据</span></span><br><span class="line"></span><br><span class="line">file1.close()             <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file15.png" height="100%" width="100%"></div><h2 id="6-设置文件读取位置函数seek"><a href="#6-设置文件读取位置函数seek" class="headerlink" title="6.设置文件读取位置函数seek()"></a><font size=3>6.设置文件读取位置函数seek()</font></h2><h3 id="6-1-函数说明"><a href="#6-1-函数说明" class="headerlink" title="6.1 函数说明"></a><font size=3>6.1 函数说明</font></h3><ul><li>函数原型</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seek</span>(<span class="params">self, offset: <span class="built_in">int</span>, whence: <span class="built_in">int</span> = <span class="number">0</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>函数使用格式</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file1.seek(offset, <span class="keyword">from</span>) <span class="comment"># 设置文件指针的读取位置</span></span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>offset</td><td>偏移量</td></tr><tr><td>from</td><td>方向:<br>0:表示文件开头；1:表示当前位置;2:表示文件末尾<br>(注意次参数为2的时候，偏移量只能为负数或者0，在python3中该函数不支持复数，要注意)</td></tr></tbody></table><h3 id="6-2-函数使用实例"><a href="#6-2-函数使用实例" class="headerlink" title="6.2 函数使用实例"></a><font size=3>6.2 函数使用实例</font></h3><ul><li>文件中原始数据如下</li></ul><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file16.png" height="100%" width="100%"></div><ul><li>设定位置读取</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># r格式打开文件</span></span><br><span class="line">file1.seek(<span class="number">5</span>, <span class="number">0</span>)      <span class="comment"># 设置位置为开头偏移5字节</span></span><br><span class="line"><span class="built_in">print</span>(file1.tell())   <span class="comment"># 打印当前文件读写位置</span></span><br><span class="line">data = file1.read(<span class="number">3</span>)  <span class="comment"># 读取三个字节数据</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(file1.tell())   <span class="comment"># 打印当前文件读写位置</span></span><br><span class="line">file1.close()         <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file17.png" height="100%" width="100%"></div><ul><li>负数参数</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\MyStudy\\VScode\\Python\\files.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># r格式打开文件</span></span><br><span class="line">file1.seek(-<span class="number">5</span>, <span class="number">2</span>)     <span class="comment"># 设置位置为结尾向左5字节</span></span><br><span class="line"><span class="built_in">print</span>(file1.tell())   <span class="comment"># 打印当前文件读写位置</span></span><br><span class="line">data = file1.read(<span class="number">3</span>)  <span class="comment"># 读取三个字节数据</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(file1.tell())   <span class="comment"># 打印当前文件读写位置</span></span><br><span class="line">file1.close()         <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/019file18.png" height="100%" width="100%"></div><p>&emsp;&emsp;<i class="fas fa-fan fa-spin" style="color: #FF1493; font-size: 1.3rem"></i>未完，待续。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】Python基础2-输入输出</title>
      <link href="post/96dc4647.html"/>
      <url>post/96dc4647.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是记录自己在学习<code>python</code>过程中使用到的<code>input</code>与<code>ptrint</code>函数。</p><span id="more"></span><h1 id="一-input-函数"><a href="#一-input-函数" class="headerlink" title=" 一.input()函数"></a><font size=3> 一.<code>input()</code>函数</font></h1><h2 id="1-函数说明"><a href="#1-函数说明" class="headerlink" title="1.函数说明"></a><font size=3>1.函数说明</font></h2><ul><li>函数在库中的原型及解释说明如下</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input</span>(<span class="params">prompt: <span class="type">Any</span>=...</span>)</span></span><br><span class="line"><span class="function">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="title">Read</span> <span class="title">a</span> <span class="title">string</span> <span class="title">from</span> <span class="title">standard</span> <span class="title">input</span>. <span class="title">The</span> <span class="title">trailing</span> <span class="title">newline</span> <span class="title">is</span> <span class="title">stripped</span>.</span></span><br><span class="line">The prompt string, if given, is printed to standard output without a trailing newline before reading input.</span><br><span class="line">If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), <span class="keyword">raise</span> EOFError. On *nix systems, readline <span class="keyword">is</span> used <span class="keyword">if</span> available.</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>函数接受一个标准输入数据，返回为 string 类型。</li><li>函数的参数可选，如果填写，则在接收字符串的时候会打印提示。</li><li>回车标志着输入结束，但是回车不会被输入到接收数据的变量中</li><li>函数使用格式</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">input</span>()  <span class="comment"># 从键盘获取字符，以回车结束</span></span><br></pre></td></tr></table></figure><h2 id="2-函数使用"><a href="#2-函数使用" class="headerlink" title="2.函数使用"></a><font size=3>2.函数使用</font></h2><h3 id="2-1-数据输入"><a href="#2-1-数据输入" class="headerlink" title="2.1 数据输入"></a><font size=3>2.1 数据输入</font></h3><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">input</span>()  <span class="comment"># 输入数据</span></span><br><span class="line"><span class="built_in">print</span>(data)     <span class="comment"># 打印输入的数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))  <span class="comment"># 打印输入的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data))   <span class="comment"># 打印输入字符串的长度</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/007input1.png"  height="100%" width="100%"></div><h3 id="2-2-带提示的数据输入"><a href="#2-2-带提示的数据输入" class="headerlink" title="2.2 带提示的数据输入"></a><font size=3>2.2 带提示的数据输入</font></h3><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">input</span>(<span class="string">&quot;Please enter your data:&quot;</span>)  <span class="comment"># 输入数据</span></span><br><span class="line"><span class="built_in">print</span>(data)     <span class="comment"># 打印输入的数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))  <span class="comment"># 打印输入的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data))   <span class="comment"># 打印输入字符串的长度</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/008input2.png"  height="100%" width="100%"></div># <font size=3> 二.`print()`函数</font><h2 id="1-函数说明-1"><a href="#1-函数说明-1" class="headerlink" title="1.函数说明"></a><font size=3>1.函数说明</font></h2><ul><li>函数在库中的原型及解释说明如下</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print</span>(<span class="params">*values: <span class="built_in">object</span>, sep: <span class="type">Optional</span>[Text]=..., end: <span class="type">Optional</span>[Text]=..., file: <span class="type">Optional</span>[_Writer]=..., flush: <span class="built_in">bool</span>=...</span>)</span></span><br><span class="line"><span class="function">&#x27;&#x27;&#x27;</span></span><br><span class="line">Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: </span><br><span class="line">file: a file-like <span class="built_in">object</span> (stream); defaults to the current sys.stdout. </span><br><span class="line">sep: string inserted between values, default a space. </span><br><span class="line">end: string appended after the last value, default a newline. </span><br><span class="line">flush: whether to forcibly flush the stream.</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-函数使用-1"><a href="#2-函数使用-1" class="headerlink" title="2.函数使用"></a><font size=3>2.函数使用</font></h2><h3 id="2-1-多种变量类型输出"><a href="#2-1-多种变量类型输出" class="headerlink" title="2.1 多种变量类型输出"></a><font size=3>2.1 多种变量类型输出</font></h3><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data1 = <span class="string">&quot;hello word!&quot;</span>    <span class="comment"># 字符串类型数据</span></span><br><span class="line"><span class="built_in">print</span>(data1)</span><br><span class="line">data2 = <span class="number">999</span>              <span class="comment"># 整型数据</span></span><br><span class="line"><span class="built_in">print</span>(data2)</span><br><span class="line">data3 = <span class="number">3.14</span>             <span class="comment"># 浮点型数据</span></span><br><span class="line"><span class="built_in">print</span>(data3)</span><br><span class="line">data4 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)        <span class="comment"># 元组数据</span></span><br><span class="line"><span class="built_in">print</span>(data4)</span><br><span class="line">data5 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]  <span class="comment"># 列表类型数据</span></span><br><span class="line"><span class="built_in">print</span>(data5)</span><br><span class="line">data6 = &#123;<span class="string">&quot;key1&quot;</span>: <span class="number">123</span>, <span class="string">&quot;key2&quot;</span>: <span class="string">&quot;abc&quot;</span>&#125;  <span class="comment"># 字典类型数据</span></span><br><span class="line"><span class="built_in">print</span>(data6)</span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/009print1.png" height="100%" width="100%"></div><h3 id="2-2-格式化输出"><a href="#2-2-格式化输出" class="headerlink" title="2.2 格式化输出"></a><font size=3>2.2 格式化输出</font></h3><ul><li>格式化输出格式</li></ul><table><thead><tr><th>格式符号</th><th>转换</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%s</td><td>通过str() 字符串转换来格式化</td></tr><tr><td>%i</td><td>有符号十进制整数</td></tr><tr><td>%d</td><td>有符号十进制整数</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%o</td><td>无符号八进制整数</td></tr><tr><td>%x</td><td>无符号十六进制整数（小写字母）</td></tr><tr><td>%X</td><td>无符号十六进制整数（大写字母）</td></tr><tr><td>%e</td><td>用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td>作用同%e，用科学计数法格式化浮点数</td></tr><tr><td>%f</td><td>浮点数字，可指定小数点后的精度</td></tr><tr><td>%g</td><td>％f和％e 的简写</td></tr><tr><td>%G</td><td>％f和％E的简写</td></tr><tr><td>%p</td><td>用十六进制数格式化变量的地址</td></tr></tbody></table><ul><li>辅助功能</li></ul><table><thead><tr><th>格式符号</th><th align="left">功能</th></tr></thead><tbody><tr><td>*</td><td align="left">宽度或者小数点精度</td></tr><tr><td>-</td><td align="left">左对齐</td></tr><tr><td>+</td><td align="left">在正数前面显示加号( + )</td></tr><tr><td>#</td><td align="left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td>0</td><td align="left">显示的数字前面填充’0’而不是默认的空格</td></tr></tbody></table><ul><li>输出实例1</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印字符串长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The length of [%s] is %d bytes&quot;</span> % (<span class="string">&quot;hello world!&quot;</span>, <span class="built_in">len</span>(<span class="string">&quot;hello world!&quot;</span>)))</span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/010print2.png" height="100%" width="100%"></div><ul><li>输出实例2</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.141592653</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pi = %-10.4f&quot;</span> % (pi))  <span class="comment"># 宽10字节，精度3位小数，左对齐</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pi = %+10.4f&quot;</span> % (pi))  <span class="comment"># 宽10字节，精度3位小数，默认右对齐，显示&quot;±&quot;号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pi = %08.4f&quot;</span> % (pi))   <span class="comment"># 宽10字节，精度3位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pi = %.*f&quot;</span> % (<span class="number">3</span>, pi))  <span class="comment"># 用*从后面的元组中读取字段宽度或精度</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/011print3.png" height="100%" width="100%"></div><h3 id="2-3-format格式化输出"><a href="#2-3-format格式化输出" class="headerlink" title="2.3 format格式化输出"></a><font size=3>2.3 format格式化输出</font></h3><p>&emsp;&emsp;format把字符串当成一个模板，通过传入的参数进行格式化，并且使用大括号”{}”作为特殊字符代替”%”，功能相对于%格式化输出更为强大。</p><ul><li>函数原型如下</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format</span>(<span class="params">*args: <span class="built_in">object</span>, **kwargs: <span class="built_in">object</span></span>)</span></span><br><span class="line"><span class="function">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="title">Return</span> <span class="title">value</span>.<span class="title">format</span>(<span class="params">format_spec</span>)</span></span><br><span class="line"><span class="function"><span class="title">format_spec</span> <span class="title">defaults</span> <span class="title">to</span> <span class="title">the</span> <span class="title">empty</span> <span class="title">string</span>. </span></span><br><span class="line"><span class="function"><span class="title">See</span> <span class="title">the</span> <span class="title">Format</span> <span class="title">Specification</span> <span class="title">Mini</span>-<span class="title">Language</span> <span class="title">section</span> <span class="title">of</span> <span class="title">help</span>(<span class="params"><span class="string">&#x27;FORMATTING&#x27;</span></span>) <span class="title">for</span> <span class="title">details</span>.</span></span><br><span class="line"><span class="function">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>2.3.1 基本输出方式</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))    <span class="comment"># 不带任何参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 带数字编号，数字编号指定顺序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; &#123;1&#125; &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 打乱顺序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;2&#125; &#123;1&#125; &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;hk&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;a&#125; &#123;b&#125; &#123;a&#125;&quot;</span>.<span class="built_in">format</span>(b=<span class="string">&quot;hello&quot;</span>, a=<span class="string">&quot;world&quot;</span>))  <span class="comment"># 带关键字指定相应的字符串</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/012print4.png" height="100%" width="100%"></div><ul><li>2.3.1 对齐与小数取位数操作</li></ul><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>&lt;</td><td>（默认）左对齐</td></tr><tr><td>&gt;</td><td>右对齐</td></tr><tr><td>^</td><td>中间对齐</td></tr><tr><td>{:4s}</td><td>输出占4个字节</td></tr><tr><td>{:.2f}</td><td>输出两位小数</td></tr></tbody></table><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &amp;&amp; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 默认左对齐</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:15s&#125; &amp;&amp; &#123;:&gt;15s&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 15字节输出，第一个默认左对齐，第二个右对齐</span></span><br><span class="line"><span class="comment"># 注意这里要想在前边加补齐符号，不能省略默认的左对齐符号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:=&lt;15s&#125; &amp;&amp; &#123;:=&gt;15s&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 15字节输出，第一个默认左对齐，第二个右对齐，不足的用=补齐</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:=^10s&#125; &amp;&amp; &#123;:=^10s&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 10字节中间对齐输出，不足的字节补=</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; is &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>, <span class="number">3.1415926</span>))  <span class="comment"># 保留2位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; is &#123;0:&gt;10.3f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))  <span class="comment"># 保留3位小数，10字节右对齐输出</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/013print5.png" height="100%" width="100%"></div><ul><li>2.3.2 格式化输出</li></ul><table><thead><tr><th>格式符号</th><th align="left">功能</th></tr></thead><tbody><tr><td>d</td><td align="left">十进制整数输出</td></tr><tr><td>b</td><td align="left">二进制输出</td></tr><tr><td>x</td><td align="left">十六进制输出，9-15以用小写字母a-f</td></tr><tr><td>o</td><td align="left">八进制输出</td></tr><tr><td>c</td><td align="left">字符，整数的话会转化为ASCII码</td></tr><tr><td>s</td><td align="left">字符串输出</td></tr><tr><td>e</td><td align="left">幂符号，用科学计数法打印数字</td></tr><tr><td>g</td><td align="left">一般格式，将数值以fixed-point number输出，数值很大的时候，用幂形式打印</td></tr><tr><td>n</td><td align="left">数字，当值为整数时和’d’相同，值为浮点数时和’g’相同,不同的是它会根据区域设置插入数字分隔符</td></tr><tr><td>%</td><td align="left">百分数，将数值乘以100然后以fixed-point number(‘f’)格式打印，会在后边加上%</td></tr></tbody></table><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d:&#123;:d&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">33</span>))  <span class="comment"># 十进制整数输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b:&#123;:b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">33</span>))  <span class="comment"># 二进制输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x:&#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">33</span>))  <span class="comment"># 十六进制输出，9-15以用小写字母a-f</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;o:&#123;:o&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">33</span>))  <span class="comment"># 八进制输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c:&#123;:c&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">33</span>))  <span class="comment"># 字符，整数的话会转化为ASCII码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s:&#123;:s&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>))  <span class="comment"># 字符串输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e:&#123;:.13e&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">33</span>))  <span class="comment"># 幂符号，用科学计数法打印数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;g:&#123;:g&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">33</span>))  <span class="comment"># 一般格式，将数值以fixed-point number输出，数值很大的时候，用幂形式打印</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n:&#123;:n&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">33</span>))  <span class="comment"># 数字，当值为整数时和&#x27;d&#x27;相同，值为浮点数时和&#x27;g&#x27;相同,不同的是它会根据区域设置插入数字分隔符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%:&#123;:.3%&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">33</span>))  <span class="comment"># 百分数输出，保留三位小数</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/014print6.png" height="100%" width="100%"></div><ul><li>2.3.3 汉字与字母输出对齐以及format参数嵌套</li></ul><p>&emsp;&emsp;在汉字与字母输出的过程中，汉字在utf8编码中被视为3个字节，在GBK编码中是2个字节，在uicode编码中是1个字节。</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;字节数&quot;</span>))                 <span class="comment"># 默认编码格式下汉字长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;字节数&quot;</span>.encode(<span class="string">&quot;utf8&quot;</span>)))  <span class="comment"># utf8下汉字长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;字节数&quot;</span>.encode(<span class="string">&quot;GBK&quot;</span>)))   <span class="comment"># GBK下汉字长度</span></span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/015print7.png" height="100%" width="100%"></div><p>&emsp;&emsp;在控制台进行汉字显示的时候，程序将其当作一个字节处理，但是显示的时候却是占用了两个字节的位置，这就导致了汉字与字母不能对齐的问题。如下例，打印表头及一些信息的时候，字母与汉字夹杂在一起，以同样的字节数打印，但是所占长度却不同。</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Infos = [</span><br><span class="line">        &#123;<span class="string">&quot;ID&quot;</span>: <span class="string">&quot;101&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;唐昊&quot;</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;55&quot;</span>, <span class="string">&quot;phonenum&quot;</span>: <span class="string">&quot;11111111111&quot;</span>&#125;,  <span class="comment"># 0</span></span><br><span class="line">        &#123;<span class="string">&quot;ID&quot;</span>: <span class="string">&quot;102&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Ayin&quot;</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;女&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;50&quot;</span>, <span class="string">&quot;phonenum&quot;</span>: <span class="string">&quot;22222222222&quot;</span>&#125;,  <span class="comment"># 1</span></span><br><span class="line">        &#123;<span class="string">&quot;ID&quot;</span>: <span class="string">&quot;103&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;唐三&quot;</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;20&quot;</span>, <span class="string">&quot;phonenum&quot;</span>: <span class="string">&quot;33333333333&quot;</span>&#125;,  <span class="comment"># 2</span></span><br><span class="line">        &#123;<span class="string">&quot;ID&quot;</span>: <span class="string">&quot;104&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;XiaoWu&quot;</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;女&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;16&quot;</span>, <span class="string">&quot;phonenum&quot;</span>: <span class="string">&quot;55555555555&quot;</span>&#125;,  <span class="comment"># 3</span></span><br><span class="line">        ]</span><br><span class="line">TableHeader = [<span class="string">&quot;序号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;手机号&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|&#123;0:^&#123;len0&#125;s&#125;|&#123;1:^&#123;len1&#125;s&#125;|&#123;2:^&#123;len2&#125;s&#125;|&#123;3:^&#123;len3&#125;s&#125;|&#123;4:^&#123;len4&#125;s&#125;|&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">      TableHeader[<span class="number">0</span>], TableHeader[<span class="number">1</span>], TableHeader[<span class="number">2</span>], TableHeader[<span class="number">3</span>], TableHeader[<span class="number">4</span>],</span><br><span class="line">      len0=<span class="number">15</span>, len1=<span class="number">15</span>, len2=<span class="number">15</span>, len3=<span class="number">15</span>, len4=<span class="number">15</span>))</span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> Infos:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;|&#123;0:^&#123;len0&#125;s&#125;|&#123;1:^&#123;len1&#125;s&#125;|&#123;2:^&#123;len2&#125;s&#125;|&#123;3:^&#123;len3&#125;s&#125;|&#123;4:^&#123;len4&#125;s&#125;|&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            temp[<span class="string">&quot;ID&quot;</span>], temp[<span class="string">&quot;name&quot;</span>], temp[<span class="string">&quot;sex&quot;</span>], temp[<span class="string">&quot;age&quot;</span>], temp[<span class="string">&quot;phonenum&quot;</span>],</span><br><span class="line">            len0=<span class="number">15</span>, len1=<span class="number">15</span>, len2=<span class="number">15</span>, len3=<span class="number">15</span>, len4=<span class="number">15</span>))</span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/016print8.png" height="100%" width="100%"></div><p>&emsp;&emsp;解决方法：len = 固定长度 - len(“中文内容”.encode(“GBK”)) + len(“中文内容”)<br><br>&emsp;&emsp;比如“字节数”三个字，默认的字节长度为3，但是却要占用6个字节的位置，所以总的输出长度要减去这三个位置，才可以与其他的同长度的字符串对齐，所以就得到了上述的式子。<br><br>&emsp;&emsp;所以修改程序如下</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|&#123;0:^&#123;len0&#125;s&#125;|&#123;1:^&#123;len1&#125;s&#125;|&#123;2:^&#123;len2&#125;s&#125;|&#123;3:^&#123;len3&#125;s&#125;|&#123;4:^&#123;len4&#125;s&#125;|&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">      TableHeader[<span class="number">0</span>], TableHeader[<span class="number">1</span>], TableHeader[<span class="number">2</span>], TableHeader[<span class="number">3</span>], TableHeader[<span class="number">4</span>],</span><br><span class="line">      len0=<span class="number">15</span> - <span class="built_in">len</span>(TableHeader[<span class="number">0</span>].encode(<span class="string">&quot;GBK&quot;</span>)) + <span class="built_in">len</span>(TableHeader[<span class="number">0</span>]),</span><br><span class="line">      len1=<span class="number">15</span> - <span class="built_in">len</span>(TableHeader[<span class="number">1</span>].encode(<span class="string">&quot;GBK&quot;</span>)) + <span class="built_in">len</span>(TableHeader[<span class="number">1</span>]),</span><br><span class="line">      len2=<span class="number">15</span> - <span class="built_in">len</span>(TableHeader[<span class="number">2</span>].encode(<span class="string">&quot;GBK&quot;</span>)) + <span class="built_in">len</span>(TableHeader[<span class="number">2</span>]),</span><br><span class="line">      len3=<span class="number">15</span> - <span class="built_in">len</span>(TableHeader[<span class="number">3</span>].encode(<span class="string">&quot;GBK&quot;</span>)) + <span class="built_in">len</span>(TableHeader[<span class="number">3</span>]),</span><br><span class="line">      len4=<span class="number">15</span> - <span class="built_in">len</span>(TableHeader[<span class="number">4</span>].encode(<span class="string">&quot;GBK&quot;</span>)) + <span class="built_in">len</span>(TableHeader[<span class="number">4</span>])))</span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> Infos:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;|&#123;0:^&#123;len0&#125;s&#125;|&#123;1:^&#123;len1&#125;s&#125;|&#123;2:^&#123;len2&#125;s&#125;|&#123;3:^&#123;len3&#125;s&#125;|&#123;4:^&#123;len4&#125;s&#125;|&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            temp[<span class="string">&quot;ID&quot;</span>], temp[<span class="string">&quot;name&quot;</span>], temp[<span class="string">&quot;sex&quot;</span>], temp[<span class="string">&quot;age&quot;</span>], temp[<span class="string">&quot;phonenum&quot;</span>],</span><br><span class="line">            len0=<span class="number">15</span> - <span class="built_in">len</span>(temp[<span class="string">&quot;ID&quot;</span>].encode(<span class="string">&quot;GBK&quot;</span>)) + <span class="built_in">len</span>(temp[<span class="string">&quot;ID&quot;</span>]),</span><br><span class="line">            len1=<span class="number">15</span> - <span class="built_in">len</span>(temp[<span class="string">&quot;name&quot;</span>].encode(<span class="string">&quot;GBK&quot;</span>)) + <span class="built_in">len</span>(temp[<span class="string">&quot;name&quot;</span>]),</span><br><span class="line">            len2=<span class="number">15</span> - <span class="built_in">len</span>(temp[<span class="string">&quot;sex&quot;</span>].encode(<span class="string">&quot;GBK&quot;</span>)) + <span class="built_in">len</span>(temp[<span class="string">&quot;sex&quot;</span>]),</span><br><span class="line">            len3=<span class="number">15</span> - <span class="built_in">len</span>(temp[<span class="string">&quot;age&quot;</span>].encode(<span class="string">&quot;GBK&quot;</span>)) + <span class="built_in">len</span>(temp[<span class="string">&quot;age&quot;</span>]),</span><br><span class="line">            len4=<span class="number">15</span> - <span class="built_in">len</span>(temp[<span class="string">&quot;phonenum&quot;</span>].encode(<span class="string">&quot;GBK&quot;</span>)) + <span class="built_in">len</span>(temp[<span class="string">&quot;phonenum&quot;</span>])))</span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/017print9.png" height="100%" width="100%"></div><h3 id="2-4-不换行输出"><a href="#2-4-不换行输出" class="headerlink" title="2.4 不换行输出"></a><font size=3>2.4 不换行输出</font></h3><p>&emsp;&emsp;在python中的print函数在打印内容的时候会自动增加换行符号，但是print函数中有一个可选参数，就是end，使用end可以指定print结尾字符</p><ul><li>使用格式如下</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world!&quot;</span>, end=<span class="string">&quot;char&quot;</span>)  <span class="comment"># char为指定的结尾字符</span></span><br></pre></td></tr></table></figure><ul><li>实例</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world! 1&quot;</span>)  <span class="comment"># 不指定结尾字符，默认换行输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world! 2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world! 3&quot;</span>, end=<span class="string">&quot;&quot;</span>)  <span class="comment"># 指定结尾字符为空格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world! 4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world! 5&quot;</span>, end=<span class="string">&quot;\t&quot;</span>)  <span class="comment"># 指定结尾字符为一个制表符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world! 6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world! 7&quot;</span>, end=<span class="string">&quot;|&quot;</span>)  <span class="comment"># 指定结尾字符为  |</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world! 8&quot;</span>)</span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/018print10.png" height="100%" width="100%"></div><h1 id="三-转义字符"><a href="#三-转义字符" class="headerlink" title=" 三.转义字符"></a><font size=3> 三.转义字符</font></h1><table><thead><tr><th>转义</th><th>意义</th></tr></thead><tbody><tr><td>\</td><td>在行尾的续行符，即一行未完，转到下一行继续写</td></tr><tr><td>\\</td><td>反斜杠（保留   \）</td></tr><tr><td>\&#39;</td><td>反斜杠（保留   ‘）</td></tr><tr><td>\&quot;</td><td>反斜杠（保留   “）</td></tr><tr><td>\b</td><td>退格（Backspace）</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>水平制表符</td></tr><tr><td>\xhh</td><td>十六进制数，hh 代表字符，如 \x0a 代表换行</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】Python基础1-OS模块函数</title>
      <link href="post/e938652.html"/>
      <url>post/e938652.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是介绍自己在学习<code>python</code>的过程中所使用到的一些<code>os</code>模块函数的介绍，后边在遇到该模块函数的其他函数，自己觉得需要记录用法的都会记录在本篇文章。</p><span id="more"></span><h1 id="一-os模块介绍"><a href="#一-os模块介绍" class="headerlink" title="一.os模块介绍"></a><font size=3>一.os模块介绍</font></h1><p>&emsp;&emsp;<code>os</code>就是<code>operating system</code>的缩写，它提供各种<code>Python</code>程序与操作系统进行交互的接口。通过使用<code>os</code>模块，一方面可以方便地与操作系统进行交互，另一方面可以增强代码的可移植性。如果该模块中相关功能出错，会抛出<code>OSError</code>异常或其子类异常。<br></p><p>&emsp;&emsp;<code>os</code>模块文件开头说明如下：</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;OS routines for NT or Posix depending on what system we&#x27;re on.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This exports:</span></span><br><span class="line"><span class="string">  - all functions from posix or nt, e.g. unlink, stat, etc.</span></span><br><span class="line"><span class="string">  - os.path is either posixpath or ntpath</span></span><br><span class="line"><span class="string">  - os.name is either &#x27;posix&#x27; or &#x27;nt&#x27;</span></span><br><span class="line"><span class="string">  - os.curdir is a string representing the current directory (always &#x27;.&#x27;)</span></span><br><span class="line"><span class="string">  - os.pardir is a string representing the parent directory (always &#x27;..&#x27;)</span></span><br><span class="line"><span class="string">  - os.sep is the (or a most common) pathname separator (&#x27;/&#x27; or &#x27;\\&#x27;)</span></span><br><span class="line"><span class="string">  - os.extsep is the extension separator (always &#x27;.&#x27;)</span></span><br><span class="line"><span class="string">  - os.altsep is the alternate pathname separator (None or &#x27;/&#x27;)</span></span><br><span class="line"><span class="string">  - os.pathsep is the component separator used in $PATH etc</span></span><br><span class="line"><span class="string">  - os.linesep is the line separator in text files (&#x27;\r&#x27; or &#x27;\n&#x27; or &#x27;\r\n&#x27;)</span></span><br><span class="line"><span class="string">  - os.defpath is the default search path for executables</span></span><br><span class="line"><span class="string">  - os.devnull is the file path of the null device (&#x27;/dev/null&#x27;, etc.)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Programs that import and use &#x27;os&#x27; stand a better chance of being</span></span><br><span class="line"><span class="string">portable between different platforms.  Of course, they must then</span></span><br><span class="line"><span class="string">only use functions that are defined by all platforms (e.g., unlink</span></span><br><span class="line"><span class="string">and opendir), and leave all pathname manipulation to os.path</span></span><br><span class="line"><span class="string">(e.g., split and join).</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="二-os模块函数介绍"><a href="#二-os模块函数介绍" class="headerlink" title="二.os模块函数介绍"></a><font size=3>二.os模块函数介绍</font></h1><h2 id="2-1-os-system"><a href="#2-1-os-system" class="headerlink" title="2.1 os.system()"></a><font size=3>2.1 os.system()</font></h2><p><font size=3>1.说明</font></p><ul><li>该函数用于将字符串转化为系统命令而执行。</li><li>使用该函数的时候需要在程序中导入<code>os</code>模块。</li><li>该函数执行成功返回0，否则返回其他数字。返回的数字根据出错类型给出（1:  Operation not permitted，2:  No such file or directory …等）。</li></ul><p>使用格式如下：</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  <span class="comment"># 导入os模块，以调用os模块中的函数执行相应的操作，该行一般放在程序开头。</span></span><br><span class="line">os.system(<span class="string">&quot;string&quot;</span>)  <span class="comment"># 参数为字符串类型，返回值是一个数字</span></span><br></pre></td></tr></table></figure><p><font size=3>2.实例</font></p><ul><li><p>（1）清屏</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows中与Linux中清屏指令不同，需要注意</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&quot;cls&quot;</span>)  <span class="comment"># 在Windows中为cls</span></span><br><span class="line">os.system(<span class="string">&quot;clear&quot;</span>)  <span class="comment"># 在Windows中为clear</span></span><br></pre></td></tr></table></figure></li><li><p>（2）暂停</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&quot;pause&quot;</span>)  <span class="comment"># 暂停命令执行,并提示“请按任意键继续”</span></span><br></pre></td></tr></table></figure></li></ul><div align=center>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/001Pause.png"  height="100%" width="100%"  /></div><h2 id="2-2-os-name"><a href="#2-2-os-name" class="headerlink" title="2.2 os.name"></a><font size=3>2.2 os.name</font></h2><p><font size=3>1.说明</font></p><ul><li>该变量返回当前操作系统的类型，当前只有2个值：分别是<code>posix </code>, <code>nt </code>， 对应<code>linux</code>和<code>windows</code></li><li>使用的时候也需要提前导入os模块，格式如下</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  <span class="comment"># 导入os模块，以调用os模块中的函数执行相应的操作，该行一般放在程序开头。</span></span><br><span class="line">os.name  <span class="comment"># 返回值为字符串类型</span></span><br></pre></td></tr></table></figure><p><font size=3>2.实例</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.name)  <span class="comment"># 打印当前系统类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(os.name))  <span class="comment"># 打印返回值类型</span></span><br></pre></td></tr></table></figure><div align=center>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/002OSname.png"  height="100%" width="100%"/></div><h2 id="2-3-os模块获取文件路径"><a href="#2-3-os模块获取文件路径" class="headerlink" title="2.3 os模块获取文件路径"></a><font size=3>2.3 os模块获取文件路径</font></h2><p>&emsp;&emsp;注意：在<code>Windows</code>中和<code>Linux</code>中路径的格式不同，在<code>Windows</code>中是<code>“\”</code>分隔路径，而在<code>Linux</code>中是以<code>“/”</code>分隔路径</p><h3 id="2-3-1-os-path-dirname"><a href="#2-3-1-os-path-dirname" class="headerlink" title="2.3.1 os.path.dirname()"></a><font size=3>2.3.1 os.path.dirname()</font></h3><p><font size=3>1.说明</font></p><ul><li>该函数用于获取某一文件所在目录的绝对路径，不包含文件名。</li><li>函数的返回值为字符串类型数据。</li><li>使用格式如下</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  <span class="comment"># 导入os模块，以调用os模块中的函数执行相应的操作，该行一般放在程序开头。</span></span><br><span class="line">os.path.dirname(<span class="string">&quot;file path&quot;</span>)  <span class="comment"># 参数为文件路径，返回值为字符串类型</span></span><br></pre></td></tr></table></figure><p><font size=3>2.实例</font></p><ul><li>直接输入文件绝对路径作为参考获取文件所在目录</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 注意这里的路径用是 &quot;\\&quot;，原因在于Window下文件路径是以&quot;\&quot;分隔开来</span></span><br><span class="line"><span class="comment"># 但是在python中该字符被视为转义字符的开始，要恢复其字符的特性，需要再加一个&quot;\&quot;</span></span><br><span class="line">path = os.path.dirname(<span class="string">&quot;E:\\MyStudy\\VScode\\VSCode插件.txt&quot;</span>)  <span class="comment"># 获取文件所在目录路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(path))  <span class="comment"># 打印返回值类型</span></span><br><span class="line"><span class="built_in">print</span>(path)  <span class="comment"># 打印路径</span></span><br></pre></td></tr></table></figure><div align=center>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/003OSpath.png"  height="100%" width="100%" /></div><ul><li>以当前文件路径作为参考获取文件所在目录</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 这里使用python的__file__属性</span></span><br><span class="line">path = os.path.dirname(__file__)  <span class="comment"># 获取文件所在目录路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(path))                 <span class="comment"># 打印返回值类型</span></span><br><span class="line"><span class="built_in">print</span>(path)                       <span class="comment"># 打印路径</span></span><br><span class="line"><span class="built_in">print</span>(__file__)                   <span class="comment"># 打印__file__内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(__file__))             <span class="comment"># 打印__file__内容</span></span><br></pre></td></tr></table></figure><div align=center>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/004OSpath-dirname.png"  height="100%" width="100%" /></div><h3 id="2-3-2-os-getcwd"><a href="#2-3-2-os-getcwd" class="headerlink" title="2.3.2 os.getcwd()"></a><font size=3>2.3.2 os.getcwd()</font></h3><p><font size=3>1.说明</font></p><ul><li>该函数用于返回当前的工作目录</li><li>没有参数，返回值为工作目录的字符串类型路径</li><li>使用格式如下</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os    <span class="comment"># 导入os模块，以调用os模块中的函数执行相应的操作，该行一般放在程序开头。</span></span><br><span class="line">os.getcwd()  <span class="comment"># 返回值为字符串类型</span></span><br></pre></td></tr></table></figure><p><font size=3>2.实例</font></p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.getcwd()  <span class="comment"># 获取当前工作目录</span></span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(path))</span><br></pre></td></tr></table></figure><div align=center>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/005OS-getcwd.png"  height="100%" width="100%" /></div><h3 id="2-3-3-os-path-abspath"><a href="#2-3-3-os-path-abspath" class="headerlink" title="2.3.3 os.path.abspath"></a><font size=3>2.3.3 os.path.abspath</font></h3><p><font size=3>1.说明</font></p><ul><li>该函数可以获取文件的绝对地址，包括文件名称在内</li><li>参数为文件路径，返回值为字符串类型，包含了文件名称在内</li><li>使用格式如下</li></ul><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os    <span class="comment"># 导入os模块，以调用os模块中的函数执行相应的操作，该行一般放在程序开头。</span></span><br><span class="line">os.path.abspath(__file__)  <span class="comment"># 获取当前文件目录 ，返回值为字符串类型</span></span><br></pre></td></tr></table></figure><p><font size=3>2.实例</font></p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.path.abspath(__file__)  <span class="comment"># 获取当前文件的路径，包含文件名称</span></span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(path))</span><br></pre></td></tr></table></figure><div align=center>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Python/006OS-abspath.png"  height="100%" width="100%" /></div><p>&emsp;&emsp;<i class="fas fa-fan fa-spin" style="color: #FF1493; font-size: 1.3rem"></i>未完，待续。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> ProgramLanguage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Butterfly】Butterfly自定义1-图片与滚动条</title>
      <link href="post/1030f44e.html"/>
      <url>post/1030f44e.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要是记录自己对<code>Butterfly</code>主题进行的自定义魔改，涉及到<code>butterfly</code>的图片和滚动条，我当时使用的主题是<code>3.7.1</code>版本，后续升级可能会有所不同，但是大都是大同小异。</p><span id="more"></span><h2 id="1-butterfly的介绍和安装"><a href="#1-butterfly的介绍和安装" class="headerlink" title="1.butterfly的介绍和安装"></a><font size=3>1.<code>butterfly</code>的介绍和安装</font></h2><ul><li><code>butterfly</code>介绍</li></ul><p>&emsp;&emsp;<code>butterfly</code>主题是一个比较好看的主题，具体情况可以点击此处查看<a href="https://butterfly.js.org/" target="_blank">官方文档</a>。它内置了许多效果和脚本，如果自己要求不是特别多的话，只在主题配置文件中进行配置，就可以得到一个比较不错的博客站点了，这个主题个人感觉比较适合我这样的小白，哈哈。它内部的框架模板都是用的<code>pug</code>模板，对于我一个搞硬件的人来说，这个语法我还是不是很熟悉，可以从这里查看它的<a href="https://pugjs.org/zh-cn/api/getting-started.html" target="_blank">中文官方文档</a>来学习基础的语法，多看一下总没啥坏处，可以大致了解一下内部的模板文件大概都是用来干嘛的，后边魔改涉及源码的，也能自己解决一部分问题。</p><ul><li><code>butterfly</code>安装</li></ul><p>&emsp;&emsp;<code>butterfly</code>官方文档提供了三种安装方式，可以根据自己的需要下载安装，通过<code>git</code>下载的时候可以选<code>master</code>分支或者<code>dev</code>分支，仅以还是使用<code>master</code>吧，这个是稳定版发布的分支。</p><div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#unique-name-1">Git安装(Github)</button></li><li class="tab"><button type="button" data-href="#unique-name-2">Git安装(Gitee)</button></li><li class="tab"><button type="button" data-href="#unique-name-3">npm安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="unique-name-2"><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://gitee.com/iamjerryw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="unique-name-3"><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装命令</span></span><br><span class="line">npm i hexo-theme-butterfly</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级命令</span></span><br><span class="line">npm update hexo-theme-butterfly</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note warning flat"><p>&emsp;&emsp;<code>Hexo</code>本身是不带<code>pug</code>模板渲染器的，安装完主题后一定要安装这两个插件。</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;安装完毕之后，在站点配置文件<code>[blogRoot]/_config.yml</code>中配置<code>theme: butterfly</code>就可以启用butterfly主题了，启用之后，可以按照官方文档进行配置使用，说明文档是中文的，而且非常的详细。</p><h2 id="2-butterfly一图流实现"><a href="#2-butterfly一图流实现" class="headerlink" title="2.butterfly一图流实现"></a><font size=3>2.<code>butterfly</code>一图流实现</font></h2><p>&emsp;&emsp;按照官方的教程进行配置之后，发现已经可以实现大部分的功能了，但是在按照教程配置的时候我们会遇到图片的配置选项部分，这个时候看个人的喜好了，我自己呢是不太喜欢那么多图片的，背景只有一张图似乎更符合我的希望，而且，那么多涨图片，对于懒惰的我来说，一个一个配置真的太难了，在这个时候，看到了一个大佬的博客的一篇文章，所以就按照这样的方式，实现了整个页面共用一张图的效果。</p><div class="note info flat"><p>&emsp;&emsp;参考教程</p><table>  <tr>    <td align="center">博客名称</td>    <td align="center">教程原帖</td>  </tr>  <tr>    <td align="center">Akilar の糖果屋</td>    <td align="left"><a href="https://akilar.top/posts/ebf20e02/" target="_blank" style="color:#0593d3">Custom Beautify</a> </td>  </tr></table></div><ul><li>新建<code>mine.css</code>文件</li></ul><p>&emsp;&emsp;为了尽量小的修改源码，在<code>[blogRoot]/source/</code>文件夹下，自己随便新建一个文件夹放<code>css</code>文件就好啦，注意不要把<code>mine.css</code>文件放在<code>_data</code>文件下，不然在引用的时候会有问题，文件新建完毕之后添加以下代码。</p><div class="note info no-icon 点击查看修改部分 flat"><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------------------------------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* 背景顶图透明，公用一张图样式 */</span></span><br><span class="line"><span class="comment">/* 顶图透明 */</span></span><br><span class="line"><span class="selector-id">#page-header</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* top-img黑色透明玻璃效果移除，我自己是没有加的，毕竟在文章详情页面，这样会更有区分度一点 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#page-header.post-bg:before &#123;</span></span><br><span class="line"><span class="comment">  background-color: transparent!important;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式伪类遮罩层透明 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--------------------------------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* 页脚样式 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;   <span class="comment">/* 页脚设置为透明 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 页脚字体颜色 */</span> </span><br><span class="line"><span class="selector-id">#footer-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3f3f3f</span>;                     <span class="comment">/* 页脚字体颜色设置为灰色 */</span>              </span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span> <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>引用<code>mine.css</code>文件</li></ul><p>&emsp;&emsp;在<code>butterfly</code>主题配置文件中有以下部分，将相应的链接按照教程中的引用格式进行引用，就可以将自己定义的样式和脚本文件引入到模板文件中。</p><figure class="highlight yaml"><figcaption><span>yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Inject</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span>                           <span class="comment"># 插入代码到头部 &lt;/head&gt; 之前</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/custom/mycss/mine.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span>                         <span class="comment"># 插入代码到底部 &lt;/body&gt; 之前</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/custom/myjs/xxx.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><div class="note info no-icon 点击查看注入位置及格式 flat"><div class="tabs" id="inject-unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#inject-unique-name-1">head</button></li><li class="tab"><button type="button" data-href="#inject-unique-name-2">bottom</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="inject-unique-name-1"><figure class="highlight plain"><figcaption><span>pug [blogRoot]/themes/butterfly/layout/includes/head.pug</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!&#x3D;fragment_cache(&#39;injectHead&#39;, function()&#123;return injectHtml(theme.inject.head)&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inject-unique-name-2"><figure class="highlight plain"><figcaption><span>pug [blogRoot]/themes/butterfly/layout/includes/additional-js.pug</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!&#x3D;fragment_cache(&#39;injectBottom&#39;, function()&#123;return injectHtml(theme.inject.bottom)&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div><p>&emsp;&emsp;添加完引用之后，<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code>就可以看到顶部、页脚等已经变成了透明，若是之前设置了背景图，就会发现此时顶部图、背景图、页脚等都是同一张图片，这就达到了我们的目的，在修改页脚透明的时候记得修改一下字体颜色，要与自己的背景图适配一下，否则可能会出现子不清晰的情况。</p><h2 id="3-butterfly中的fancybox"><a href="#3-butterfly中的fancybox" class="headerlink" title="3.butterfly中的fancybox"></a><font size=3>3.<code>butterfly</code>中的<code>fancybox</code></font></h2><p>&emsp;&emsp;与<code>NexT</code>相同，内置了<code>fancybox</code>的脚本，我们只需要设置<code>[blogRoot]/_config.butterfly.yml</code>中的<code>fancybox: true</code>就可以启用了，但是有一个和<code>NexT</code>相同的问题，就是关闭图片预览的时候滚动条出现的时候有问题，但是与<code>NexT</code>不同的是，<code>butterfly</code>的整个页面不会抖动，只有滚动条部分会向左偏移一下，如果有背景图的话，就会有一个背景图缩放的现象出现。<br><br>&emsp;&emsp;那么可不可以像<code>NexT</code>中的处理方式那样写一个脚本不修改源码从而解决整个问题呢？答案是不可以，至少我试了没啥用，所以对于小白的我来说，就只有改源码喽。<br><br>&emsp;&emsp;打开<code>butterfly</code>的源码，找到配置<code>fancybox</code>的脚本文件<code>main.js</code>，找到以下部分代码：</p><figure class="highlight javascript"><figcaption><span>javascript [blogRoot]/themes/butterfly/source/js/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addFancybox = <span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> runFancybox = <span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">    ele.each(<span class="function"><span class="keyword">function</span> (<span class="params">i, o</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> $this = $(o)</span><br><span class="line">      <span class="keyword">const</span> lazyloadSrc = $this.attr(<span class="string">&#x27;data-lazy-src&#x27;</span>) || $this.attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> dataCaption = $this.attr(<span class="string">&#x27;alt&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">      $this.wrap(<span class="string">`&lt;a href=&quot;<span class="subst">$&#123;lazyloadSrc&#125;</span>&quot; data-fancybox=&quot;group&quot; data-caption=&quot;<span class="subst">$&#123;dataCaption&#125;</span>&quot; class=&quot;fancybox&quot;&gt;&lt;/a&gt;`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    $().fancybox(&#123;</span><br><span class="line">      selector: <span class="string">&#x27;[data-fancybox]&#x27;</span>,</span><br><span class="line">      loop: <span class="literal">true</span>,</span><br><span class="line">      transitionEffect: <span class="string">&#x27;slide&#x27;</span>,</span><br><span class="line">      protect: <span class="literal">true</span>,</span><br><span class="line">      buttons: [<span class="string">&#x27;slideShow&#x27;</span>, <span class="string">&#x27;fullScreen&#x27;</span>, <span class="string">&#x27;thumbs&#x27;</span>, <span class="string">&#x27;close&#x27;</span>],</span><br><span class="line">      hash: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中<code>$().fancybox()</code>中的部分配置了<code>fancybox</code>的默认参数部分，所以在此函数中添加<code>hideScrollbar:false  //不隐藏原先自带的滚动条</code>参数，就可以使滚动条一直显示啦，背景图片就不会有缩放的情况产生了，如果需要解决的话，就稍微修改下源码就可以，觉得无所谓的也可以不管它。</p><h2 id="4-滚动条美化"><a href="#4-滚动条美化" class="headerlink" title="4.滚动条美化"></a><font size=3>4.滚动条美化</font></h2><div class="note info flat"><p>&emsp;&emsp;参考教程</p><table>  <tr>    <td align="center">博客名称</td>    <td align="center">教程原帖</td>  </tr>  <tr>    <td align="center">Lete乐特</td>    <td align="left"><a href="https://blog.lete114.top/article/Butterfly-config.html#滚动条" target="_blank" style="color:#0593d3">Butterfly主题美化-无修改源码</a> </td>  </tr></table></div><p>&emsp;&emsp;在<code>mine.css</code>文件中添加以下代码即可实现滚动条的美化</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    width: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    background-color: <span class="number">#e58a8a</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>( <span class="number">45deg</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">25%</span>, transparent <span class="number">25%</span>, transparent <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">75%</span>, transparent <span class="number">75%</span>, transparent);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">    color: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e58a8a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;效果预览：</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/Butterfly/001scroll%20bar.png"></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NexT】NexT中的fancybox</title>
      <link href="post/db25055a.html"/>
      <url>post/db25055a.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要讲述在NexT中使用fancybox的时候的遇到问题及解决办法。</p><span id="more"></span><h2 id="1-fancybox介绍"><a href="#1-fancybox介绍" class="headerlink" title="1.fancybox介绍"></a><font size=3>1.<code>fancybox</code>介绍</font></h2><p>&emsp;&emsp;<a href="https://fancyapps.com/fancybox/3/" target="_blank"><code>fancybox</code></a>是一款基于jquery开发的类Lightbox插件，它可能是世界上最受欢迎的<code>lightbox</code>脚本了。这个脚本它依赖于<a href="https://jquery.com/" target="_blank"><code>jquery</code></a></p><p>，其中<code>jQuery 3+</code>是首选，但<code>fancybox</code>也兼容<code>jQuery 1.9.1+</code>和<code>jQuery 2+</code>。</p><h2 id="2-fancybox基本使用"><a href="#2-fancybox基本使用" class="headerlink" title="2.fancybox基本使用"></a><font size=3>2.<code>fancybox</code>基本使用</font></h2><p>&emsp;&emsp;这里借用<code>fancybox</code>官网首页的快速开始的例子，最基本的使用方式如下所示。</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. Add latest jQuery and fancybox files --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. Create links --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-fancybox</span>=<span class="string">&quot;gallery&quot;</span> <span class="attr">href</span>=<span class="string">&quot;big_1.jpg&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;small_1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-fancybox</span>=<span class="string">&quot;gallery&quot;</span> <span class="attr">href</span>=<span class="string">&quot;big_2.jpg&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;small_2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. Have fun! --&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;示例如下图所示(点击图片可以查看我的博客中fancybox的使用效果)：</p><div align="center">  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png"  width=100  height=60/></div><h2 id="3-fancybox在NexT主题中的问题"><a href="#3-fancybox在NexT主题中的问题" class="headerlink" title="3.fancybox在NexT主题中的问题"></a><font size=3>3.<code>fancybox</code>在<code>NexT</code>主题中的问题</font></h2><ul><li>首先，聊一聊整个问题是怎么发现及产生的<br>&emsp;&emsp;在<code>NexT</code>中，已经加载了<code>fancybox</code>的所需脚本，所以我们直接在主题配置文件中将其打开就可以了。</li></ul><figure class="highlight yaml"><figcaption><span>yaml [blogRoot]/_config.next.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># true表示打开fancybox，fasle为关闭fancybox</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;但是在开启后，我们去放大图片，会发现是没有问题的，但是在关闭图片预览的时候，整个页面会向左抖动一下，具体原因是，<code>fancybox</code>在开启图片预览后，是遮盖了原来的页面，相当于蒙上了一个黑色但是透明的页面，这个时候右侧原来的滚动条是被隐藏了，当关闭图片预览的时候，滚动条重新出现，导致整个页面有一个向左抖动的情况，那么怎么解决整个问题呢？</p><p>&emsp;&emsp;我们去<code>fancybox</code>的<code>github</code>仓库去看源码，会发现有这么一个参数<code>hideScrollbar</code>，就是导致了放大图片的时候滚动条隐藏的原因，将其值设置为<code>true</code>就可以使滚动条一直显示，这样就解决了整个抖动的问题。</p><ul><li>其次。我们来解决<code>NexT</code>中的这个问题</li></ul><p>&emsp;&emsp;新建一个脚本文件<code>myfancybox.js</code>，并添加以下代码：</p><figure class="highlight javascript"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.fancybox.defaults.hideScrollbar = <span class="literal">false</span>; <span class="comment">// 使右侧滚动条一直显示</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在<code>[blogRoot]/themes/next/layout/_layout.njk</code>文件的<code>&lt;body&gt;&lt;/body&gt;</code>中引用该文件即可</p><figure class="highlight plain"><figcaption><span>nunjucks [blogRoot]/themes/next/layout/_layout.njk</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># theme.fancybox_param为上边新建myfancybox.js脚本的路径</span><br><span class="line">&lt;script async src&#x3D;&quot;&#123;&#123; theme.fancybox_param &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后再 <code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code> 就可以发现抖动的问题解决了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Markdown】Markdown基本语法2-图片处理</title>
      <link href="post/536b10b2.html"/>
      <url>post/536b10b2.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要讲述Markdown中图片的基本引用、缩放和对齐。</p><span id="more"></span><h1 id="1-图片的缩放与位置"><a href="#1-图片的缩放与位置" class="headerlink" title="1.图片的缩放与位置"></a><font size=3>1.图片的缩放与位置</font></h1><ul><li>原图</li></ul><div>    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png"/></div><ul><li>直接定义宽和高来缩放图片</li></ul><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png&quot;</span>  <span class="attr">width</span>=<span class="string">100</span>  <span class="attr">height</span>=<span class="string">60/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png"  width=100  height=60/></div><ul><li>用百分比确认缩放大小</li></ul><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png&quot;</span>  <span class="attr">width</span>=<span class="string">40%</span>  <span class="attr">height</span>=<span class="string">40%</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png"  width=20%  height=20% /></div><ul><li>居中</li></ul><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png&quot;</span>  <span class="attr">width</span>=<span class="string">20%</span>  <span class="attr">height</span>=<span class="string">20%</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div align=center>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png"  width=20%  height=20% /></div><ul><li>靠左</li></ul><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">left</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png&quot;</span>  <span class="attr">width</span>=<span class="string">20%</span>  <span class="attr">height</span>=<span class="string">20%</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div align=left>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png"  width=20%  height=20% /></div><ul><li>靠右</li></ul><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">right</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png&quot;</span>  <span class="attr">width</span>=<span class="string">20%</span>  <span class="attr">height</span>=<span class="string">20%</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div align=right>  <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Markdown/001The%20original%20image.png"  width=20%  height=20% /></div><p>&emsp;&emsp;<i class="fas fa-fan fa-spin" style="color: #FF1493; font-size: 1.3rem"></i>未完，待续。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Markdown】Markdown基本语法1-特殊符号与表格</title>
      <link href="post/bf9c10db.html"/>
      <url>post/bf9c10db.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要讲述<code>Markdown</code>中的一些特殊符号与表格的基本使用。</p><span id="more"></span><h2 id="1-特殊符号"><a href="#1-特殊符号" class="headerlink" title="1.特殊符号"></a>1.特殊符号</h2><table><thead><tr><th>符号</th><th>编码</th><th align="left">说明</th><th>符号</th><th>编码</th><th align="left">说明</th><th>符号</th><th>编码</th><th align="left">说明</th></tr></thead><tbody><tr><td>&larr;</td><td>&amp;larr;</td><td align="left">向左箭头</td><td>&lArr;</td><td>&amp;lArr;</td><td align="left">双线向左箭头</td><td>&lt;</td><td>&amp;lt;</td><td align="left">小于号</td></tr><tr><td>&rarr;</td><td>&amp;rarr;</td><td align="left">向右箭头</td><td>&rArr;</td><td>\rlArr;</td><td align="left">双线向右箭头</td><td>&gt;</td><td>&amp;gt;</td><td align="left">大于号</td></tr><tr><td>&uarr;</td><td>&amp;uarr;</td><td align="left">向上箭头</td><td>&uArr;</td><td>&amp;uArr;</td><td align="left">双线向上箭头</td><td>&times;</td><td>&amp;times;</td><td align="left">乘号</td></tr><tr><td>&darr;</td><td>&amp;darr;</td><td align="left">向下箭头</td><td>&dArr;</td><td>&amp;dArr;</td><td align="left">双线向下箭头</td><td>&divide;</td><td>&amp;divide;</td><td align="left">除号</td></tr><tr><td>&harr;</td><td>&amp;harr;</td><td align="left">双向横向箭头</td><td>&hArr;</td><td>&amp;hArr;</td><td align="left">双线双向横向箭头</td><td>&plusmn;</td><td>&amp;plusmn;</td><td align="left">正负号</td></tr><tr><td>&varr;</td><td>&amp;varr;</td><td align="left">双向竖向箭头</td><td>&vArr;</td><td>&amp;vArr;</td><td align="left">双线双向竖向箭头</td><td>&ne;</td><td>&amp;ne;</td><td align="left">不等于符号</td></tr><tr><td>&nbsp;</td><td>&amp;nbsp;</td><td align="left">空格，1/2个字节</td><td>&emsp;</td><td>&amp;emsp;</td><td align="left">空格，2个字节</td><td>&le;</td><td>&amp;le;</td><td align="left">小于等于号</td></tr><tr><td>&sect;</td><td>&amp;sect;</td><td align="left">章节符号</td><td>&para;</td><td>&amp;para;</td><td align="left">段落符号</td><td>&ge;</td><td>&amp;ge;</td><td align="left">大于等于号</td></tr><tr><td>&alpha;</td><td>&amp;alpha;</td><td align="left">α符号</td><td>&beta;</td><td>&amp;beta;</td><td align="left">β符号</td><td>&pi;</td><td>&amp;pi;</td><td align="left">圆周率π</td></tr><tr><td>&gamma;</td><td>&amp;gamma;</td><td align="left">γ：Gamma符号</td><td>&Delta;</td><td>&amp;Delta;</td><td align="left">Δ：Delta符号</td><td>&Sigma;</td><td>&amp;Sigma;</td><td align="left">Σ：Sigma符号</td></tr><tr><td>&theta;</td><td>&amp;theta;</td><td align="left">θ：Theta符号</td><td>&lambda;</td><td>&amp;lambda;</td><td align="left">λ：Lambda符号</td><td>&sigma;</td><td>&amp;sigma;</td><td align="left">σ ：sigma符号</td></tr><tr><td>&deg;</td><td>&amp;deg;</td><td align="left">度数符号</td><td>&int;</td><td>&amp;int;</td><td align="left">积分符号</td><td>&ang;</td><td>&amp;ang;</td><td align="left">角度符号</td></tr><tr><td>&infin;</td><td>&amp;infin;</td><td align="left">无限大符号</td><td>&tau;</td><td>&amp;tau;</td><td align="left">τ：Tau符号</td><td>&fnof;</td><td>&amp;fnof;</td><td align="left">ƒ：function</td></tr><tr><td>&because;</td><td>&amp;because;</td><td align="left">因为符号</td><td>&there4;</td><td>&amp;there4;</td><td align="left">所以符号</td><td>&perp;</td><td>&amp;perp;</td><td align="left">垂直符号</td></tr><tr><td>&copy;</td><td>&amp;copy;</td><td align="left">版权所有符号</td><td></td><td></td><td align="left"></td><td></td><td></td><td align="left"></td></tr></tbody></table><h2 id="2-表格"><a href="#2-表格" class="headerlink" title="2.表格"></a>2.表格</h2><h3 id="2-1基本表格"><a href="#2-1基本表格" class="headerlink" title="2.1基本表格"></a>2.1基本表格</h3><ul><li>语法</li></ul><figure class="highlight markdown"><figcaption><span>markdown</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|表头1|表头2|表头3|表头4|表头5|</span><br><span class="line">|---|---|:---|---:| ---| </span><br><span class="line">| 内容1| 内容2|左对齐|右对齐|换<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>行|</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头1</th><th>表头2</th><th align="left">表头3</th><th align="right">表头4</th><th>表头5</th></tr></thead><tbody><tr><td>内容1</td><td>内容2</td><td align="left">左对齐</td><td align="right">右对齐</td><td>换<br>行</td></tr></tbody></table><h3 id="2-2表格合并与颜色添加"><a href="#2-2表格合并与颜色添加" class="headerlink" title="2.2表格合并与颜色添加"></a>2.2表格合并与颜色添加</h3><ul><li><p>颜色与十六进制数对照参考：<a href="https://tool.oschina.net/commons?type=3" target="_blank"> RGB颜色参考（OSCHINA）</a></p></li><li><p>颜色与十六进制转换器：<a href=" https://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank"> 颜色十六进制在线转换器</a></p></li></ul><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  <span class="comment">&lt;!-- 表格开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>   <span class="comment">&lt;!-- 第一行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#87CEFA</span>&gt;</span>第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="comment">&lt;!-- 第一列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#87CEFA</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第二列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#87CEFA</span>&gt;</span>第三列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第三列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#87CEFA</span>&gt;</span>第四列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第四列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="comment">&lt;!-- 第二行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">bgcolor</span>=<span class="string">#7B68EE</span>&gt;</span>从第一列开始合并2列,并左对齐<span class="tag">&lt;<span class="name">br</span>&gt;</span>后边从第三列开始<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第一列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第三列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第三列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第四列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第四列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="comment">&lt;!-- 第三行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">bgcolor</span>=<span class="string">#FF69B4</span>&gt;</span>从第二行开始合并2行，并居中对齐<span class="tag">&lt;<span class="name">br</span>&gt;</span>创建下一行的时候，下一行不需要再创建第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第一列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第二列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第三列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第三列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第四列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第四列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="comment">&lt;!-- 第四行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第二列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第三列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第三列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第四列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第四列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="comment">&lt;!-- 第五行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#8B1A1A</span>&gt;</span>第一列字体颜色：#8B1A1A<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第一列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#8A2BE2</span>&gt;</span>第二列字体颜色：#8A2BE2<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第二列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第三列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第三列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第四列<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 第四列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table>  <!-- 表格开始 -->    <tr>   <!-- 第一行 -->        <td bgcolor=#87CEFA>第一列</td>  <!-- 第一列 -->        <td bgcolor=#87CEFA>第二列</td> <!-- 第二列 -->        <td bgcolor=#87CEFA>第三列</td> <!-- 第三列 -->        <td bgcolor=#87CEFA>第四列</td> <!-- 第四列 -->    </tr>    <tr> <!-- 第二行 -->        <td colspan="2" align="left" bgcolor=#7B68EE>从第一列开始合并2列,并左对齐<br>后边从第三列开始</td> <!-- 第一列 -->        <td>第三列</td> <!-- 第三列 -->        <td>第四列</td> <!-- 第四列 -->    </tr>    <tr> <!-- 第三行 -->        <td rowspan="2" align="left" bgcolor=#FF69B4>从第二行开始合并2行，并居中对齐<br>创建下一行的时候，下一行不需要再创建第一列</td> <!-- 第一列 -->        <td>第二列</td> <!-- 第二列 -->        <td>第三列</td> <!-- 第三列 -->        <td>第四列</td> <!-- 第四列 -->    </tr>    <tr> <!-- 第四行 -->        <td>第二列</td> <!-- 第二列 -->        <td>第三列</td> <!-- 第三列 -->        <td>第四列</td> <!-- 第四列 -->    </tr>    <tr> <!-- 第五行 -->        <td><font color=#8B1A1A>第一列字体颜色：#8B1A1A</font></td> <!-- 第一列 -->        <td> <font color=#8A2BE2>第二列字体颜色：#8A2BE2</font></td> <!-- 第二列 -->        <td>第三列</td> <!-- 第三列 -->        <td>第四列</td> <!-- 第四列 -->    </tr></table><p>&emsp;&emsp;<i class="fas fa-fan fa-spin" style="color: #FF1493; font-size: 1.3rem"></i>未完，待续。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Windows】Typora上传图片到Gitee</title>
      <link href="post/60058440.html"/>
      <url>post/60058440.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要讲述了windows中Typora及PicGo的安装配置，并介绍了如何与Gitee相结合，上传图片到Gitee。</p><span id="more"></span><h1 id="1-Gitee配置"><a href="#1-Gitee配置" class="headerlink" title="1.Gitee配置"></a><font size=3>1.Gitee配置</font></h1><h2 id="1-1注册账户"><a href="#1-1注册账户" class="headerlink" title="1.1注册账户"></a><font size=3>1.1注册账户</font></h2><ul><li>网址如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gitee.com&#x2F;</span><br></pre></td></tr></table></figure><ul><li>正常注册即可</li></ul><h2 id="1-2-进行配置"><a href="#1-2-进行配置" class="headerlink" title="1.2 进行配置"></a><font size=3>1.2 进行配置</font></h2><ul><li>新建仓库</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/001Creating%20a%20repository.png" style="zoom:50%;" /><p>&emsp;&emsp;这里要注意一下，在Gitee中仓库名称跟路径名称好像有点区别，仓库名称中的大写字母前都被换成了<code>-</code>，这里也不清楚为什么，不过后便发现自己删了这里的<code>-</code>之后，后边的Markdown文章不能加载已经上传成功的图片，所以这里还是只输入仓库名称，<strong>路径保持默认</strong>就可以了，在后边配置PicGo的时候需要注意这一点，另外这个仓库要设置成<strong>公开</strong>的，否则图片是不能被文章访问的。</p><ul><li>生成令牌</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/002Create%20a%20personal%20token.png" style="zoom:50%;" /><p>&emsp;&emsp;这个令牌数字只有生成成功的时候出现一次，后边是不能查看的，这里需要保存一下。</p><h1 id="2-安装node"><a href="#2-安装node" class="headerlink" title="2.安装node"></a><font size=3>2.安装node</font></h1><p>&emsp;&emsp;后边安装gitee插件会用到node，这里需要提前进行安装。</p><h2 id="2-1-下载安装"><a href="#2-1-下载安装" class="headerlink" title="2.1 下载安装"></a><font size=3>2.1 下载安装</font></h2><ul><li>下载地址</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://nodejs.org/en/download/</span><br></pre></td></tr></table></figure><ul><li>查看版本，确认是否安装成功</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><ul><li>更换下载源，否则下载插件会很慢</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li>测试换源是否成功</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><ul><li>在安装目录下新建两个文件夹</li></ul><p>&emsp;&emsp;我的路径分别为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\nodejs\node_global</span><br><span class="line">D:\nodejs\node_cache</span><br></pre></td></tr></table></figure><ul><li>指定插件存放和日志及缓存的存放文件夹</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><ul><li>配置环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">系统环境变量：NODE_PATH = D:\nodejs\node_global\node_modules</span><br><span class="line">用户环境变量：path中C:\Users\用户名\AppData\Roaming\npm 改为 D:\nodejs\node_global</span><br></pre></td></tr></table></figure><ul><li>测试插件是否能够安装到相应的文件夹</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure><h1 id="3-PicGo安装配置"><a href="#3-PicGo安装配置" class="headerlink" title="3.PicGo安装配置"></a><font size=3>3.PicGo安装配置</font></h1><h2 id="3-1-下载"><a href="#3-1-下载" class="headerlink" title="3.1 下载"></a><font size=3>3.1 下载</font></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Molunerfinn/PicGo</span><br></pre></td></tr></table></figure><h2 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a><font size=3>3.2 安装</font></h2><ul><li>安装完毕如图所示：</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/003InstallPicGo.png" style="zoom:50%;" /><h2 id="3-3-配置"><a href="#3-3-配置" class="headerlink" title="3.3 配置"></a><font size=3>3.3 配置</font></h2><ul><li>插件设置：搜索gitee并选择第一个进行安装</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/004Install%20the%20Gitee%20plug-in.png" style="zoom: 50%;" /><ul><li>PicGo设置：选择Gitee图床</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/005Select%20the%20Gitee%20chart%20bed.png" style="zoom: 50%;" /><ul><li>图床设置</li></ul><table><!--表格-->    <tr><!--第1行-->        <td align="center"><!--第1列-->            参数        </td>        <td align="center"><!--第2列-->            说明        </td>    </tr>    <tr><!--第2行-->        <td width=150px align="center"><!--第1列-->            owner        </td>        <td align="left"><!--第2列-->            为自己的用户名，就是自己注册的时候的账户名        </td>    </tr>    <tr><!--第3行-->        <td width=150px align="center"><!--第1列-->            repo        </td>        <td align="left"><!--第2列-->            为仓库名称，repo要写自己仓库页面下搜索引擎中的仓库名称，否则可能会出现提示上传，但是从来不会上传成功，也不会提示失败的情况。        </td>    </tr>    <tr><!--第4行-->        <td width=150px align="center"><!--第1列-->            path        </td>        <td align="left"><!--第2列-->            为上传的文件存储的目录，图片文件都会上传到path中去，其中根目录的话就不用填写了，根目录就是和readme文件同一级的目录。        </td>    </tr>    <tr><!--第5行-->        <td width=150px align="center"><!--第1列-->            token        </td>        <td align="left"><!--第2列-->            在Gitee中生成的个人令牌，该token只会在生成的时候显示一次，所以要注意保存。        </td>    </tr></table><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/006Gitee%20chart%20bed%20setup.png" style="zoom:50%;" /><ul><li>设置日志文件</li></ul><p>&emsp;&emsp;选择记录错误和警告</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/007Picgo%20set.png" style="zoom:50%;" /><ul><li>定义链接格式</li></ul><p>&emsp;&emsp;选择默认即可</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/008Picgo%20set.png" style="zoom:50%;" /><ul><li>打开几个设置</li></ul><p>&emsp;&emsp;可以关闭更新，这里其实可以打开上传前重命名，这样就可以自定义上传的名称，后来我还是打开了，这样命名后可以写上图片的大致内容，比较容易找一些。</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/009Picgo%20set.png" style="zoom:50%;" /><h1 id="4-Typora设置"><a href="#4-Typora设置" class="headerlink" title="4.Typora设置"></a><font size=3>4.Typora设置</font></h1><ul><li>下载安装</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.typora.io/#windows</span><br></pre></td></tr></table></figure><ul><li>自动上传插件typora-plugins-win-img下载</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Thobian/typora-plugins-win-img</span><br></pre></td></tr></table></figure><ul><li>安装插件<br>&emsp;&emsp;复制文件<code>window.html、plugins</code>到<code>resources\app</code>文件夹中，对于<code>window.html</code>文件不要进行覆盖，覆盖后可能会出现偏好设置打不开的情况。其实可以不复制该文件，按以下方式操作也可以解决</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--搜索该语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app/window/frame.js&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在后边加上如下语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./plugins/image/upload.js&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>更换插件中的图床接口</li></ul><p>&emsp;&emsp;打开<code>plugins/image/upload.js</code>文件，找到最后一行<code>$.image.init()</code> ，按以下配置(其他配置可以查看插件的github地址中的说明进行配置)进行配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.image.init(&#123;</span><br><span class="line">   target:<span class="string">&#x27;gitee&#x27;</span>,</span><br><span class="line">   gitee: &#123;</span><br><span class="line">       message: <span class="string">&quot;From:https://github.com/Thobian&quot;</span>,      <span class="comment">// 必须参数,提交消息</span></span><br><span class="line">       branch: <span class="string">&quot;master&quot;</span>,                                <span class="comment">// 要提交到的分支（默认为：master）</span></span><br><span class="line">       token: <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,    <span class="comment">// token  </span></span><br><span class="line">       userName: <span class="string">&quot;userName&quot;</span>,                            <span class="comment">// 用户名</span></span><br><span class="line">       repositorie: <span class="string">&quot;repositorie&quot;</span>,                      <span class="comment">// 仓库名</span></span><br><span class="line">       Folder: <span class="string">&quot;image&quot;</span>,                                 <span class="comment">// 可以把上传的图片都放到这个指定的文件夹下</span></span><br><span class="line">       BucketDomain: <span class="string">&quot;https://gitee.com/api/v5/repos/&quot;</span>, <span class="comment">// 这个是不用变的，直接copy就好</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>验证图片上传选项</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/010Typora%20automatically%20uploads%20images.png" style="zoom:50%;" /><ul><li>若成功，则如下图所示</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/011Effects%20after%20uploading.png" style="zoom:50%;" /><p>&emsp;&emsp;可以看到图片已经自动生成了链接</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/012Effects%20after%20uploading.png"><h1 id="5-报错处理"><a href="#5-报错处理" class="headerlink" title="5.报错处理"></a><font size=3>5.报错处理</font></h1><ul><li>验证图片上传选项出现<code>Failed to fetch</code></li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/013Failed%20to%20fetch.png" style="zoom:67%;" /><p>&emsp;&emsp;此时可以查看<code>PicGo</code>的端口是否是默认的<code>36677</code>，若不是，修改为默认即可。</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Software/014PicGoServer.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> PicGo </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Excel】Excel中的实用功能</title>
      <link href="post/9bd6fc35.html"/>
      <url>post/9bd6fc35.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要介绍在Excel中的一些实用功能，后续会持续进行更新。</p><span id="more"></span><h1 id="1-在现有行高基础上增加批量增加行高"><a href="#1-在现有行高基础上增加批量增加行高" class="headerlink" title="1.在现有行高基础上增加批量增加行高"></a><font size=3>1.在现有行高基础上增加批量增加行高</font></h1><p>&emsp;&emsp;在自动适应行高中想要批量增加行高来调整Excel表格，不可能手动一个一个修改，此时可以使用VB来实现功能。打开Excel内置的VB编辑器，然后添加以下代码。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> margin()</span><br><span class="line">    <span class="comment">&#x27;从第7行到137行</span></span><br><span class="line">    <span class="keyword">For</span> r = <span class="number">7</span> <span class="keyword">To</span> <span class="number">137</span></span><br><span class="line">        <span class="comment">&#x27;为每行行高增加6</span></span><br><span class="line">        Rows(r &amp; <span class="string">&quot;:&quot;</span> &amp; r).RowHeight = Rows(r &amp; <span class="string">&quot;:&quot;</span> &amp; r).RowHeight + <span class="number">6</span></span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后点击运行，就可以发现所有的行高都发生了变化。</p><h1 id="2-Excel自动高亮行列"><a href="#2-Excel自动高亮行列" class="headerlink" title="2.Excel自动高亮行列"></a><font size=3>2.Excel自动高亮行列</font></h1><p> &emsp;&emsp;在使用Excel的时候，有时候需要看某一单元格所在行或者列的其他数据，当数据特别多的时候，找同一行的数据就显的很难受，这个时候就可以使用</p><h2 id="2-1VB程序实现"><a href="#2-1VB程序实现" class="headerlink" title="2.1VB程序实现"></a><font size=3>2.1VB程序实现</font></h2><p>&emsp;&emsp;每次单击即可激活高亮相应的行列，直接复制代码进去即可，使用方便，缺点是退出后最后一个高亮的行列会被填充颜色，原来的颜色会被清除，对于没有填充颜色，且不要求保留原来颜色的元格，可以采用如下方法：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27;这样的行是VB注释，不会被编译</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Worksheet_SelectionChange(<span class="keyword">ByVal</span> Target <span class="keyword">As</span> Range)</span><br><span class="line"><span class="keyword">With</span> Target</span><br><span class="line"><span class="comment">&#x27;清除工作表单元格的背景色</span></span><br><span class="line">.Parent.Cells.Interior.ColorIndex = xlNone</span><br><span class="line"><span class="comment">&#x27;设置选中区域所在行的背景色，这里是RGB颜色的十进制代码</span></span><br><span class="line">.EntireRow.Interior.Color = <span class="number">5296274</span></span><br><span class="line"><span class="comment">&#x27;设置选中区域所在列的背景色，这里是RGB颜色的十进制代码</span></span><br><span class="line">.EntireColumn.Interior.Color = <span class="number">5296274</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;效果如下图所示：</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Office/001Excle%20highlights%20the%20cell.png" style="zoom:67%;" /><h2 id="2-2条件规则和公式实现实现"><a href="#2-2条件规则和公式实现实现" class="headerlink" title="2.2条件规则和公式实现实现"></a><font size=3>2.2条件规则和公式实现实现</font></h2><ul><li><p>创建名称<br>公式&rarr;定义名称&rarr;输入名称&rarr;输入起范围（定义的时候可选，之后不可修改）&rarr;在引用位置处输入函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;63 传回储存格的填满色彩</span><br><span class="line">&#x2F;&#x2F;单元格位置都可以，大门时需要注意不能加绝对引用符号</span><br><span class="line">&#x3D;GET.CELL(63,Sheet1!T8)&#x3D;0</span><br></pre></td></tr></table></figure><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Office/002Create%20a%20name.png" style="zoom:67%;" /></li><li><p>创建条件格式<br>开始&rarr;条件格式&rarr;新建规则&rarr;如下图设置，选择使用公式要设置格式的单元格&rarr;输入规则公式&rarr;在格式中选择填充颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注意最后一个参数要与上边的公式标签名称一致</span><br><span class="line">&#x3D;AND((CELL(&quot;col&quot;)&#x3D;COLUMN())+(CELL(&quot;row&quot;)&#x3D;ROW()),getcell)</span><br></pre></td></tr></table></figure><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Office/003Creating%20Conditional%20Formatting.png" style="zoom:67%;" /></li><li><p>2.3设置规则生效的范围</p></li></ul><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Office/004Set%20the%20rule%20scope.png" style="zoom:60%;" /></div><p>&emsp;&emsp;在规则管理器中管理刚才添加的规则应用区域。</p><ul><li>2.4添加自动刷新VB程序<figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Worksheet_SelectionChange(<span class="keyword">ByVal</span> Target <span class="keyword">As</span> Range)</span><br><span class="line">    Application.ScreenUpdating = <span class="literal">True</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>最终效果：</li></ul><div align="center">    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Office/005Implementation%20effect.png" style="zoom: 33%;" />    <img src="https://gitee.com/qidaink/qidaink-images/raw/master/Windows/Office/006Implementation%20effect.png" style="zoom: 33%;" /></div><p>&emsp;&emsp;可以发现原来的单元格颜色还在，但是当整行整列填充颜色的时候可能会出现问题，有得有舍吧，看需求，总之两种方案都不是很完美。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Office </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】Hexo的安装使用</title>
      <link href="post/34ca3fb6.html"/>
      <url>post/34ca3fb6.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;Hexo是一款快速、简洁且高效的博客框架，本文主要讲述如何在ubuntu18.04中安装和使用hexo软件。</p><span id="more"></span><h1 id="1-hexo的安装"><a href="#1-hexo的安装" class="headerlink" title="1.hexo的安装"></a><font size=3>1.hexo的安装</font></h1><p>&emsp;&emsp;hexo软件安装之前需要安装node和git，这些在之前的过程中就已经安装过了，可以查看之前的文档。</p><ul><li>hexo官网</li></ul><p>&emsp;&emsp;hexo中文档地址：<a href="https://hexo.io/zh-cn/" target="_blank">hexo官方中文文档</a></p><p>&emsp;&emsp;安装命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ul><li>查看版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;出现以下信息，说明安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Linux 5.4.0-65-generic linux x64</span><br><span class="line">node: 15.8.0</span><br><span class="line">v8: 8.6.395.17-node.23</span><br><span class="line">uv: 1.40.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.1</span><br><span class="line">modules: 88</span><br><span class="line">nghttp2: 1.42.0</span><br><span class="line">napi: 7</span><br><span class="line">llhttp: 2.1.3</span><br><span class="line">openssl: 1.1.1i</span><br><span class="line">cldr: 38.1</span><br><span class="line">icu: 68.2</span><br><span class="line">tz: 2020d</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure><h1 id="2-hexo的使用"><a href="#2-hexo的使用" class="headerlink" title="2.hexo的使用"></a><font size=3>2.hexo的使用</font></h1><h2 id="2-1hexo的本地使用"><a href="#2-1hexo的本地使用" class="headerlink" title="2.1hexo的本地使用"></a><font size=3>2.1hexo的本地使用</font></h2><ul><li>初始化文件夹</li></ul><p>&emsp;&emsp;hexo 将会在指定文件夹中新建所需要的文件,此处的<code>folder</code>文件夹必须为空，否则会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;初始化完成后，查看文件树</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示1级目录</span></span><br><span class="line">tree -L 1</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;显示结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">├── themes</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;文件说明：</p><table><!--表格开始-->    <tr><!--第1行-->        <td width=100px align="center"><!--第1列-->        文件名称        </td>        <td align="left"><!--第2列-->        用途        </td>    </tr>    <tr><!--第2行-->        <td width=100px align="center"><!--第1列-->        _config.yml        </td>        <td align="left"><!--第2列-->        网站的 配置 信息，可以在此配置大部分的参数。        </td>    </tr>    <tr><!--第3行-->        <td width=100px align="center"><!--第1列-->        package.json        </td>        <td align="left"><!--第2列-->        应用程序的信息。        </td>    </tr>    <tr><!--第4行-->        <td width=100px align="center"><!--第1列-->        scaffolds        </td>        <td align="left"><!--第2列-->        新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。        </td>    </tr>    <tr><!--第5行-->        <td width=100px align="center"><!--第1列-->        source        </td>        <td align="left"><!--第2列-->        资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。        </td>    </tr>    <tr><!--第6行-->        <td width=100px align="center"><!--第1列-->        themes        </td>        <td align="left"><!--第2列-->        主题 文件夹。Hexo 会根据主题来生成静态页面。        </td>    </tr></table><ul><li>生成静态页面</li></ul><p>&emsp;&emsp;首先进入自己初始化好的hexo的文件夹，然后执行下边的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成页面命令</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以简写为以下</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><ul><li>监视文件变动</li></ul><p>&emsp;&emsp;Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --watch</span><br></pre></td></tr></table></figure><ul><li>服务器安装</li></ul><p>&emsp;&emsp;Hexo 3.0 把服务器独立成了个别模块，说是必须先安装 <a href="https://github.com/hexojs/hexo-server">hexo-server</a> 才能使用，但是有的时候发现没有安装，貌似也可以正常使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><ul><li>服务器使用</li></ul><p>&emsp;&emsp;安装完成之后，输入以下命令以启动服务器，生成的静态网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，hexo 会监视文件的变动并且自动更新，无须重启服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动服务器</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 简写</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code> 选项指定其他端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定启动的端口</span></span><br><span class="line">hexo server -p 5555</span><br><span class="line"><span class="meta">#</span><span class="bash"> 简写</span></span><br><span class="line">hexo s -p 5555</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;若想在启动的时候自动修改端口号，可在<code>_congig.yaml</code>文件中添加以下内容，这样在启动本地预览的时候就可以直接修改启动的全端口号。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#------------------------------</span></span><br><span class="line"><span class="comment"># 说    明：Hexo本地启动地址配置</span></span><br><span class="line"><span class="comment">#------------------------------</span></span><br><span class="line"><span class="comment"># Hexo Server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5555</span></span><br><span class="line">  <span class="attr">ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h2 id="2-2hexo部署GitHub"><a href="#2-2hexo部署GitHub" class="headerlink" title="2.2hexo部署GitHub"></a><font size=3>2.2hexo部署GitHub</font></h2><ul><li>创建仓库</li></ul><p>&emsp;&emsp;注意这里的仓库名称必须为<code>user name.github.io</code>，这里还是要选择<code>Public</code>，不然好像不能访问页面，下边的图片我后来改成公共了，下边也可以选添加一个<code>Add a README file          </code>也可以不选，主要是仓库名称一定要对。这个就是以后自己的Gitub主页地址。</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/001Create%20Github%20Pages%20repositorys.png"  /><ul><li>安装<code>hexo-deployer-git</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>修改配置文件<code>_config.yml</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入初始化的文件夹</span></span><br><span class="line">cd ~/02MyBlog/hexofiles</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件</span></span><br><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><ul><li>开始部署</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -m &quot;描述&quot;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;与<code>git</code>的<code>commit</code>一样可以加上<code>-m</code>参数来写每次提交的信息，也可以不加，不过每次提交都是默认的信息了，提交完成后，GitHub仓库如下所示，本地部署完毕之后打开网页可能会出现<code>404</code>找不到网页的标识，可以等待一会再进入页面。</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/HexoBasic/002TestGithubPages.png" style="zoom:80%;" /><ul><li>查看页面</li></ul><p>&emsp;&emsp;我的博客页面：<a href="https://qidaink.github.io/" target="_blank">欢迎来到我的博客</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;qidaink.github.io&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NexT】NexT自定义记录-2</title>
      <link href="post/b14a1b18.html"/>
      <url>post/b14a1b18.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要介绍在<code>NexT</code>下的几种优化显示的方式，本文写的时候使用的是<code>v7.8.0</code>，后续更新可能有些地方不再适用，但是都大同小异。</p><span id="more"></span><h1 id="1-浏览器网页标题"><a href="#1-浏览器网页标题" class="headerlink" title="1.浏览器网页标题"></a><font size=3>1.浏览器网页标题</font></h1><ul><li>新建效果实现文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/source/js/funnytitle.js</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码(我这里没有设置网页标题图标)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器搞笑标题</span></span><br><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">&#x27;╭(°A°`)╮ 页面崩溃啦 ~&#x27;</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">&#x27;(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~&#x27;</span> + OriginTitle;</span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>引用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在<code>&lt;body&gt;&lt;/body&gt;</code>内添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--浏览器搞笑标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/funnytitle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-添加页面卡通人物"><a href="#2-添加页面卡通人物" class="headerlink" title="2.添加页面卡通人物"></a><font size=3>2.添加页面卡通人物</font></h1><h2 id="2-1基础live2d模型"><a href="#2-1基础live2d模型" class="headerlink" title="2.1基础live2d模型"></a><font size=3>2.1基础live2d模型</font></h2><ul><li>安装<code>live2d</code></li></ul><p>&emsp;&emsp;项目地址：<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank">hexo-helper-live2d</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d  </span><br></pre></td></tr></table></figure><ul><li>下载模型</li></ul><p>&emsp;&emsp;模型地址：<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank">live2d-widget-models</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用以下命令下载，我使用的是live2d-widget-model-shizuku</span></span><br><span class="line">npm install packagename</span><br></pre></td></tr></table></figure><ul><li>配置站点配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">enable: true</span><br><span class="line">scriptFrom: local</span><br><span class="line">model: </span><br><span class="line">use: live2d-widget-model-shizuku #模型选择</span><br><span class="line">display: </span><br><span class="line">position: right  #模型位置</span><br><span class="line">width: 150       #模型宽度</span><br><span class="line">height: 300      #模型高度</span><br><span class="line">mobile: </span><br><span class="line">show: false      #是否在手机端显示</span><br></pre></td></tr></table></figure><ul><li>效果如下图</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/005Live2d.png"><h2 id="2-2升级版live2d"><a href="#2-2升级版live2d" class="headerlink" title="2.2升级版live2d"></a><font size=3>2.2升级版live2d</font></h2><ul><li>卸载之前的<code>live2d</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d</span><br></pre></td></tr></table></figure><ul><li>删除之前的模型<code>live2d-widget-model-shizuku</code>及配置</li></ul><p>&emsp;&emsp;删除<code>node_modules</code>下的模型文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r ~/02MyBlog/hexofiles/node_modules/live2d-widget-model-shizuku/</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;编辑站点配置文件，将<code>2.1</code>节中在站点配置文件中添加的数据删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><ul><li>下载功能加强版的代码</li></ul><p>&emsp;&emsp;加强版<code>live2d</code>项目地址：<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank">live2d-widget</a></p><p>&emsp;&emsp;可以<code>folk</code>该项目到自己的仓库中，以便于寻找，<code>folk</code>完毕后就可以从自己的仓库中下载该代码了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入站点根目录</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载文件</span></span><br><span class="line">git clone https://github.com/qidaink/live2d-widget.git themes/next/source/mylive2d</span><br></pre></td></tr></table></figure><ul><li>添加依赖</li></ul><p>&emsp;&emsp;打开相应的文件<code>_layout.swig</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在<code>&lt;body&gt;&lt;body&gt;</code>添加<code>jquery.min.js</code>依赖(我在樱花特效的时候已经添加过了)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;script type=&quot;text/javascript&quot; src=&quot;//libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在<code>&lt;head&gt;&lt;/head&gt;</code>添加<code>font-awesome.min.css</code>图标支持。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网页引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加模型引用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开相应的文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在<code>&lt;body&gt;&lt;/body&gt;</code>内添加以下代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网页引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/username/live2d-widget@latest/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 本地引用（我使用的是这个） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/mylive2d/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改<code>mylive2d</code>文件下的<code>autoloads.js</code></li></ul><p>&emsp;&emsp;打开<code>autoloads.js</code>文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/source/mylive2d/autoload.js</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改开头的路径为以下情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 注意：live2d_path 参数应使用绝对路径</span><br><span class="line">//const live2d_path = &quot;https://cdn.jsdelivr.net/gh/steve    njoezhang/live2d-widget@latest/&quot;;</span><br><span class="line">//const live2d_path = &quot;/live2d-widget/&quot;;</span><br><span class="line">const live2d_path = &quot;/mylive2d/&quot;;</span><br></pre></td></tr></table></figure><h1 id="3-压缩静态页面"><a href="#3-压缩静态页面" class="headerlink" title="3.压缩静态页面"></a><font size=3>3.压缩静态页面</font></h1><ul><li>如何加快访问速度呢？</li></ul><p>&emsp;&emsp;可以从以下入手:</p><p>&emsp;&emsp;(1)将js文件尽可能放到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。<br>&emsp;&emsp;(2)尽量避免去引用访问速度非常低下的cdn或者图片，可改用访问速度更快的cdn，或将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费大量时间。<br>&emsp;&emsp;(3)对页面的静态资源进行压缩，包括css、js和html等文件。</p><ul><li>安装gulp及插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装gulp</span></span><br><span class="line">npm install gulp -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 插件安装</span></span><br><span class="line">npm install gulp-minify-html gulp-minify-css gulp-uglify gulp-imagemin --save</span><br></pre></td></tr></table></figure><ul><li>站点根目录新建文件<code>gulpfile.js</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/gulpfile.js</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Plugins模块获取</span></span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifyhtml = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-html&#x27;</span>);</span><br><span class="line"><span class="comment">// 压缩 public 目录 css文件</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/css/*.css&#x27;</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 html文件</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/*.html&#x27;</span>)</span><br><span class="line">        .pipe(minifyhtml())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js文件，忽略/public/lib/blog-encrypt.js</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//纠错前：return gulp.src(&#x27;./public/**/*.js&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">&#x27;./public/js/*.js&#x27;</span>, <span class="string">&#x27;!./public/lib/blog-encrypt.js&#x27;</span>])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 分别执行css、heml、js的压缩任务</span></span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, gulp.parallel(<span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-js&#x27;</span>));</span><br></pre></td></tr></table></figure><ul><li>压缩</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp</span><br></pre></td></tr></table></figure><h1 id="4-分页显示"><a href="#4-分页显示" class="headerlink" title="4.分页显示"></a><font size=3>4.分页显示</font></h1><ul><li>归档页面显示的条目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开站点配置文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;找到以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br></pre></td></tr></table></figure><ul><li>首页显示条目</li></ul><p>&emsp;&emsp;在站点配置文件的以下代码中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">3</span>      <span class="comment"># 首页每页3篇文章</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">page</span>   <span class="comment"># 原来为-date</span></span><br></pre></td></tr></table></figure><h1 id="5-文章超链接显示为蓝色"><a href="#5-文章超链接显示为蓝色" class="headerlink" title="5.文章超链接显示为蓝色"></a><font size=3>5.文章超链接显示为蓝色</font></h1><p>&emsp;&emsp;在部署完成后会发现文章中的超链接都是没有颜色的，并不能明显区分，所以可以进行以下优化。</p><ul><li>修改<code>post.styl</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开相应文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/source/css/_common/components/post/post.styl</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> a&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#0477ab</span>;</span><br><span class="line">      <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="6-新建一个菜单选项"><a href="#6-新建一个菜单选项" class="headerlink" title="6.新建一个菜单选项"></a><font size=3>6.新建一个菜单选项</font></h1><p>&emsp;&emsp;这里新建了一个留言板菜单，后边会增加相应的功能，目前是熟悉以下在NexT中新增菜单的方法。</p><ul><li>新建一个页面</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n page guestbook</span><br></pre></td></tr></table></figure><ul><li>修改<code>guestbook</code>文件夹中的<code>index.md</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/source/guestbook/index.md</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ds-recent-visitors&quot;</span> <span class="attr">data-num-items</span>=<span class="string">&quot;28&quot;</span> <span class="attr">data-avatar-size</span>=<span class="string">&quot;42&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ds-recent-visitors&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改主题配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在<code>menu</code>中添加以下内容，<code>fas fa-edit</code>为菜单图标，来源于<a href="https://fontawesome.com/icons?d=gallery" target="_blank">Font Awesome</a>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">guestbook:</span> <span class="string">/guestbook</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-edit</span></span><br></pre></td></tr></table></figure><ul><li>修改语言文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/languages/zh-CN.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在<code>menu</code>中添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">guestbook:</span> <span class="string">留言板</span></span><br></pre></td></tr></table></figure><h1 id="7-添加评论系统"><a href="#7-添加评论系统" class="headerlink" title="7.添加评论系统"></a><font size=3>7.添加评论系统</font></h1><p>&emsp;&emsp;Hexo的评论系统有很多，常见的有以下几个：</p><p><code>畅言</code>、<code>来必力（LiveRe）</code>、<code>Disqus</code>、<code>Hypercomments</code>和<code>valine</code>，<code>畅言</code>需要备案，<code>Disqus</code>，<code>Hypercomments</code>和<code>LiveRe</code>都是国外的，加载速度贼慢，而NexT主题中直接含有<code>valine</code>的相关配置选项，所以我便采用了<code>valine</code>和来必力两种，由于不是专业写博客，所以评论不是很重要，这一章就略微简写。</p><p>项目地址：<a href="https://github.com/xCss/Valine" target="_blank">Valine</a></p><p>说明文档：<a href="https://valine.js.org/" target="_blank">Valine说明文档</a></p><h2 id="7-1开启valine"><a href="#7-1开启valine" class="headerlink" title="7.1开启valine"></a><font size=3>7.1开启<code>valine</code></font></h2><ul><li>注册<code>Leancloud</code>账号</li></ul><p>&emsp;&emsp;<code>Leancloud</code>官网：<a href="https://www.leancloud.cn/" target="_blank">leancloud官网，点击访问</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.leancloud.cn/</span><br></pre></td></tr></table></figure><ul><li>创建应用并获取<code>appid</code> 和 <code>appkey</code></li></ul><p>&emsp;&emsp;随便创建一个应用即可，然后记录下图中的两个值。</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/006LeanCloud.png" style="zoom:50%;" /><ul><li>编辑主题配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;找到以下代码,修改相应位置即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">AppId</span> <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">AppKey</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">欢迎评论呀！</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">identicon</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">5</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure><h2 id="7-2来必力评论系统"><a href="#7-2来必力评论系统" class="headerlink" title="7.2来必力评论系统"></a><font size=3>7.2来必力评论系统</font></h2><ul><li>来必力官网</li></ul><p>官网地址：<a href="http://livere.com/" target="_blank">来必力</a></p><p>&emsp;&emsp;进入官网之后正常注册即可，注册完毕后来到控制台后点击代码管理，会得到以下代码，记录下<code>data-uid</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 来必力City版安装代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;lv-container&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;city&quot;</span> <span class="attr">data-uid</span>=<span class="string">&quot;**************************&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   (<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">       <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="keyword">return</span>; &#125;</span></span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line"><span class="javascript">       j.src = <span class="string">&#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       j.async = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line"><span class="javascript">   &#125;)(<span class="built_in">document</span>, <span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- City版安装代码已完成 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置主题配置文件</li></ul><p>&emsp;&emsp;在NexT中，已经集成了该评论系统，只需要打开即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开主题配置文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;找到以下代码，并添加自己的<code>data-uid</code>即可开启该评论系统。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LiveRe comments system</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/     myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span>   <span class="comment"># &lt;your_uid&gt;</span></span><br></pre></td></tr></table></figure><h1 id="8-添加标签云"><a href="#8-添加标签云" class="headerlink" title="8.添加标签云"></a><font size=3>8.添加标签云</font></h1><ul><li>安装插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入站点根目录</span></span><br><span class="line">cd cd ~/02MyBlog/hexofiles/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装插件</span></span><br><span class="line">npm install hexo-tag-cloud@^2.0.* --save </span><br></pre></td></tr></table></figure><ul><li>配置侧边栏显示文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开相应文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_macro/sidebar.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;找到以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if theme.back2top.enable and theme.back2top.sidebar %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back-to-top motion-element&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在后边添加以下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">     &#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/tagcloud.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/tagcanvas.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;widget-title&quot;</span>&gt;</span>我的标签云<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myCanvasContainer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;widget tagcloud&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">id</span>=<span class="string">&quot;resCanvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width=100%&quot;</span>&gt;</span></span><br><span class="line">           &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ul><li>配置主题配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开主题配置文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">    <span class="attr">textFont:</span> <span class="string">Trebuchet</span> <span class="string">MS,</span> <span class="string">Helvetica</span></span><br><span class="line">    <span class="attr">textColor:</span> <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">    <span class="attr">textHeight:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">outlineColor:</span> <span class="string">&#x27;#E2E1D1&#x27;</span></span><br><span class="line">    <span class="attr">maxSpeed:</span> <span class="number">0.1</span></span><br></pre></td></tr></table></figure><h1 id="9-修改文章内链接鼠标悬停效果"><a href="#9-修改文章内链接鼠标悬停效果" class="headerlink" title="9.修改文章内链接鼠标悬停效果"></a><font size=3>9.修改文章内链接鼠标悬停效果</font></h1><p>&emsp;&emsp;打开相应文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim themes/next/source/css/_common/components/post/post.styl</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> a&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NexT】NexT自定义记录-1</title>
      <link href="post/28434aa2.html"/>
      <url>post/28434aa2.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要介绍对自己博客页面的优化，在<code>NexT</code>主题下进行修改，本文写的时候使用的是<code>v7.8.0</code>，后续更新可能有些地方不再适用，但是都大同小异。</p><span id="more"></span><p>&emsp;&emsp;下边有两个配置文件，一个是位于站点根目录下的<code>_config.yml</code>文件，称为站点配置文件，另一个是位于站点目录中主题文件中的<code>_config.yml</code>文件，称之为主题配置文件，在我的ubuntu中分别位于以下位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 站点配置文件位置</span></span><br><span class="line">~/02MyBlog/hexofiles/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件位置</span></span><br><span class="line">~/02MyBlog/hexofiles/themes/next</span><br></pre></td></tr></table></figure><h1 id="1-nexT主题的安装"><a href="#1-nexT主题的安装" class="headerlink" title="1.nexT主题的安装"></a><font size=3>1.nexT主题的安装</font></h1><ul><li><code>NexT</code>官网</li></ul><p>&emsp;&emsp;<code>NexT</code>文档地址：<a href="http://theme-next.iissnan.com/" target="_blank">NexT官方中文文档</a></p><p>&emsp;&emsp;主题下载下载命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入初始化好的hexo文件夹</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载主题源码文件</span></span><br><span class="line">git clone https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;也可以按照官网进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入初始化的文件夹</span></span><br><span class="line">cd &lt;hexo folder&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建主题文件夹</span></span><br><span class="line">mkdir themes/next</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载主题文件</span></span><br><span class="line">curl -s https://api.github.com/repos/theme-next/hexo-theme-next/releases/latest | grep tarball_url | cut -d &#x27;&quot;&#x27; -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure><ul><li>修改站点配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h1 id="2-nexT主题显示优化"><a href="#2-nexT主题显示优化" class="headerlink" title="2.nexT主题显示优化"></a><font size=3>2.nexT主题显示优化</font></h1><h2 id="2-1修改nexT主题样式"><a href="#2-1修改nexT主题样式" class="headerlink" title="2.1修改nexT主题样式"></a><font size=3>2.1修改nexT主题样式</font></h2><p>&emsp;&emsp;<code>Scheme</code> 是 <code>NexT </code>提供的一种特性，借助于<code> Scheme</code>，<code>NexT </code>提供多种不同的外观。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入主题文件夹</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/themes/next</span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择自己想要的主题</span></span><br><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;主题配置部分如下(具体怎样可以自己修改查看，我使用的是第三个)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><h2 id="2-2添加鼠标点击小红心特效"><a href="#2-2添加鼠标点击小红心特效" class="headerlink" title="2.2添加鼠标点击小红心特效"></a><font size=3>2.2添加鼠标点击小红心特效</font></h2><p>&emsp;&emsp;按如下命令进入相应的文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入js文件夹</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/themes/next/source/js/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建特效实现文件</span></span><br><span class="line">vim myclicklove.js</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在<code>myclicklove.js</code>中添加如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">&quot;left:&quot;</span>+d[e].x+<span class="string">&quot;px;top:&quot;</span>+d[e].y+<span class="string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="string">&quot;,&quot;</span>+d[e].scale+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;div&quot;</span>);a.className=<span class="string">&quot;heart&quot;</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX-<span class="number">5</span>,<span class="attr">y</span>:e.clientY-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;style&quot;</span>);a.type=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;进入调用该文件的文件夹并打开相应的引用文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入文件所在文件夹</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/themes/next/layout/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开特效引用文件</span></span><br><span class="line">vim _layout.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在文档末尾的<code>&lt;body&gt;&lt;/body&gt;</code>标签内(至少我目前还没有发现有问题，有问题再修改)添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/myclicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3设置菜单"><a href="#2-3设置菜单" class="headerlink" title="2.3设置菜单"></a><font size=3>2.3设置菜单</font></h2><p>&emsp;&emsp;菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。<code>NexT </code>使用的是 <a href="http://fontawesome.io/">Font Awesome</a> 提供的图标，<code>Font Awesome </code>提供了 <code>600+</code> 的图标，可以满足绝大的多数的场景，同时无须担心在<code> Retina</code> 屏幕下图标模糊的问题。</p><h3 id="2-3-1设定菜单内容"><a href="#2-3-1设定菜单内容" class="headerlink" title="2.3.1设定菜单内容"></a><font size=3>2.3.1设定菜单内容</font></h3><p>&emsp;&emsp;对应的字段是 <code>menu</code>。菜单内容的设置格式是：<code>item name: link</code>。其中 <code>item name</code> 是一个名称，这个名称并不直接显示在页面上，它用于匹配图标以及翻译。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑相应主题配置文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for t</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value </span></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. yoursite</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || fa fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure><p>以下列出几项作为说明</p><table><thead><tr><th>键值</th><th>设定值</th><th>显示文本（简体中文）</th></tr></thead><tbody><tr><td>home</td><td><code>home: /</code></td><td>主页</td></tr><tr><td>archives</td><td><code>archives: /archives</code></td><td>归档页</td></tr><tr><td>categories</td><td><code>categories: /categories</code></td><td>分类页</td></tr><tr><td>tags</td><td><code>tags: /tags</code></td><td>标签页</td></tr><tr><td>about</td><td><code>about: /about</code></td><td>关于页面</td></tr><tr><td>commonweal</td><td><code>commonweal: /404.html</code></td><td>公益 404</td></tr></tbody></table><p>&emsp;&emsp;以简体中文为例，若需要添加一个菜单项，比如 <code>search</code>。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-CN.yml</code>，在 <code>menu</code> 字段下添加一项      </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">   <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">   <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">   <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">   <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">   <span class="attr">about:</span> <span class="string">关于</span>                                           </span><br><span class="line">   <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">   <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">   <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">   <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br></pre></td></tr></table></figure><h2 id="2-4设置头像"><a href="#2-4设置头像" class="headerlink" title="2.4设置头像"></a><font size=3>2.4设置头像</font></h2><p>&emsp;&emsp;<code>URI</code>就是头像的地址，地址可以是以下的两种：</p><table>    <tr>        <td width=200px align="center">            地址        </td>        <td align="center">            值        </td>    </tr>    <tr>        <td width=150px>            完整的互联网 URI        </td>        <td align="left">            http://example.com/avatar.png        </td>    </tr>    <tr>        <td width=200px>            站点内的地址        </td>        <td align="left">            将头像放置主题目录下的 source/uploads/ （新建 uploads 目录若不存在）配置为：avatar: /uploads/avatar.png 或者 放置在 source/images/ 目录下配置为：avatar: /images/avatar.png        </td>    </tr></table><p>&emsp;&emsp;打开主题配置文件进行修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改为以下内容。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="comment">#/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>                                        </span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;用该图片作为头像</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/001Avatar.png" style="zoom:50%;" /><h2 id="2-5Menu增加关于、标签、分类页面"><a href="#2-5Menu增加关于、标签、分类页面" class="headerlink" title="2.5Menu增加关于、标签、分类页面"></a><font size=3>2.5Menu增加关于、标签、分类页面</font></h2><ul><li>新建相关的页面</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;新建完成之后会发现<code> ~/02MyBlog/hexofiles/source/</code>文件夹中多了三个文件夹</p><ul><li>修改相应的文件</li></ul><p>&emsp;&emsp;分别进入刚才新建的三个文件夹，修改<code>index.md</code>文件如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--about中的index.md--&gt;</span><br><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">---</span><br><span class="line">&lt;!--tags中的index.md--&gt;</span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br><span class="line">&lt;!--tags中的index.md--&gt;</span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="2-6设置背景图片和透明度"><a href="#2-6设置背景图片和透明度" class="headerlink" title="2.6设置背景图片和透明度"></a><font size=3>2.6设置背景图片和透明度</font></h2><ul><li>修改主题配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;去掉<code>styles.styl</code>一行前边的<code>#</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_da    ta` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><ul><li>新建并修改<code>styles.styl</code>文件</li></ul><p>&emsp;&emsp;在站点根目录的<code>source</code>目录下新建<code>_data</code>文件夹，并新建<code>styles.styl</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入文件夹</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/source/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建 _data 文件夹</span></span><br><span class="line">mkdir _data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建并修改styles.styl文件</span></span><br><span class="line">vim styles.styl</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后续用以下命令直接修改</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/source/_data/styles.styl</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在<code>styles.styl</code>文件添加如下内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="comment">// 整体背景设置</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    background:url(/images/background.jpg);  // 设定背景图片,images同处于source文件夹下</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;  <span class="comment">// 设定背景图片非重复填充</span></span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;   <span class="comment">// 设置背景图片不随页面滚动</span></span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;   <span class="comment">// 设置背景图片位置</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line"><span class="attribute">background-size</span>: cover// 设置保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在生成静态页面的时候并会有如下警告(有说是因为<code>node</code>和<code>npm</code>版本太高)，但是并不影响背景的正常显示，可以忽略。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(node:10806) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:10806) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:10806) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:10806) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:10806) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:10806) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br></pre></td></tr></table></figure><h2 id="2-6添加搜索功能"><a href="#2-6添加搜索功能" class="headerlink" title="2.6添加搜索功能"></a><font size=3>2.6添加搜索功能</font></h2><ul><li>安装两个插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在站点根目录下分别安装插件</span></span><br><span class="line">npm install hexo-generator-search  --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑相应文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><ul><li>配置站点文件</li></ul><p>&emsp;&emsp;在站点配置文件中添加如下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>修改next主题配置文件<code>_config.yml</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;将<code> enable: false</code>改为<code>enable: true </code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-gener</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                                          </span><br><span class="line">  <span class="comment"># If au true [ID]      ch by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or s</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by </span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="2-7文章目录"><a href="#2-7文章目录" class="headerlink" title="2.7文章目录"></a><font size=3>2.7文章目录</font></h2><p>&emsp;&emsp;我这边自己写文章的时候已经写了编号，所以需要关闭显示的时候的自动编号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改主题配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span>                                         </span><br><span class="line">  <span class="comment"># If tr false [ID]     ll placed on next lines if head</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displaye</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="2-8代码高亮主题"><a href="#2-8代码高亮主题" class="headerlink" title="2.8代码高亮主题"></a><font size=3>2.8代码高亮主题</font></h2><p>&emsp;&emsp;需要先将站点配置文件高亮代码设置打开（见3.3节），再编辑主题配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;选择相应的高亮的主题</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available values: normal | night | night eighties | </span></span><br><span class="line"><span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span></span><br></pre></td></tr></table></figure><h2 id="2-9代码块复制"><a href="#2-9代码块复制" class="headerlink" title="2.9代码块复制"></a><font size=3>2.9代码块复制</font></h2><p>&emsp;&emsp;在NexT7.x的版本中直接开启复制功能即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;将以下设置为<code>true</code>，并选择代码块的风格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copy_button:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Show text copy result.</span></span><br><span class="line">  <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">mac</span> </span><br></pre></td></tr></table></figure><h2 id="2-10动态下雪特效"><a href="#2-10动态下雪特效" class="headerlink" title="2.10动态下雪特效"></a><font size=3>2.10动态下雪特效</font></h2><ul><li>准备工作</li></ul><p>&emsp;&emsp;首先进入特效配置的文件夹中去</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入特效配置文件夹</span></span><br><span class="line"><span class="built_in">cd</span> ~/02MyBlog/hexofiles/themes/next/<span class="built_in">source</span>/js/</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在调用以下特效代码实现文件之前需要先引入<code>jquery.min.js</code>(我没有深究这到底是什么，能用就好，能用就好，哈哈哈)，否则特效不会生效。</p><p>&emsp;&emsp;编辑引用文件<code>_layout.swig</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑_layout.swig</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p>在<code>&lt;body&gt;&lt;/body&gt;</code>标签内添加以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>六边形雪花样式</li></ul><p>&emsp;&emsp;说明：这个特效的代码可以实现雪花飘落，但是下拉的时速度大于雪花飘落速度的时候，雪花就消失了，等一会才会落下来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建六边形雪花实现文件</span></span><br><span class="line">vim snow1.js</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*六边形雪花雪花飘落*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.fn.snow = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> $flake = $(<span class="string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).css(&#123;<span class="string">&#x27;position&#x27;</span>: <span class="string">&#x27;absolute&#x27;</span>,<span class="string">&#x27;z-index&#x27;</span>:<span class="string">&#x27;9999&#x27;</span>, <span class="string">&#x27;top&#x27;</span>: <span class="string">&#x27;-50px&#x27;</span>&#125;).html(<span class="string">&#x27;&amp;#10052;&#x27;</span>),</span><br><span class="line">documentHeight = $(<span class="built_in">document</span>).height(),</span><br><span class="line">documentWidth= $(<span class="built_in">document</span>).width(),</span><br><span class="line">defaults = &#123;</span><br><span class="line">minSize: <span class="number">10</span>,</span><br><span class="line">maxSize: <span class="number">20</span>,</span><br><span class="line">newOn: <span class="number">1000</span>,</span><br><span class="line">flakeColor: <span class="string">&quot;#AFDAEF&quot;</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">&#125;,</span><br><span class="line">options= $.extend(&#123;&#125;, defaults, options);</span><br><span class="line"><span class="keyword">var</span> interval= <span class="built_in">setInterval</span>( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">$flake.clone().appendTo(<span class="string">&#x27;body&#x27;</span>).css(&#123;</span><br><span class="line">left: startPositionLeft,</span><br><span class="line">opacity: startOpacity,</span><br><span class="line"><span class="string">&#x27;font-size&#x27;</span>: sizeFlake,</span><br><span class="line">color: options.flakeColor</span><br><span class="line">&#125;).animate(&#123;</span><br><span class="line">top: endPositionTop,</span><br><span class="line">left: endPositionLeft,</span><br><span class="line">opacity: <span class="number">0.2</span></span><br><span class="line">&#125;,durationFall,<span class="string">&#x27;linear&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="built_in">this</span>).remove()</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.fn.snow(&#123; </span><br><span class="line">    minSize: <span class="number">5</span>, <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">    maxSize: <span class="number">50</span>,<span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">    newOn: <span class="number">300</span>  <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>圆形雪花样式</li></ul><p>&emsp;&emsp;说明：这个特效的代码好像是没有全屏显示，具体的可能是参数设置问题，我后边用的是樱花的一个特效，那个比较好用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建圆形雪花特效文件</span></span><br><span class="line">vim snow2.js</span><br></pre></td></tr></table></figure><p>添加如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*圆形，就那种毛茸茸的感觉*/</span></span><br><span class="line"><span class="comment">/* 控制下雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 可配置属性 */</span></span><br><span class="line">    snow = snow || &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.maxFlake = snow.maxFlake || <span class="number">200</span>;   <span class="comment">/* 最多片数 */</span></span><br><span class="line">    <span class="built_in">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>;  <span class="comment">/* 雪花形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>;   <span class="comment">/* 坠落速度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容写法 */</span></span><br><span class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; <span class="built_in">setTimeout</span>(callback, <span class="number">1000</span> / <span class="number">60</span>); &#125;;</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.oCancelAnimationFrame;</span><br><span class="line"><span class="comment">/* 开始下雪 */</span></span><br><span class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* 创建画布 */</span></span><br><span class="line">    snowCanvas.apply(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">/* 创建雪花形状 */</span></span><br><span class="line">    createFlakes.apply(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">/* 画雪 */</span></span><br><span class="line">    drawSnow.apply(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建画布 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 添加Dom结点 */</span></span><br><span class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    snowcanvas.id = <span class="string">&quot;snowfall&quot;</span>;</span><br><span class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].appendChild(snowcanvas);</span><br><span class="line">    <span class="built_in">this</span>.canvas = snowcanvas;</span><br><span class="line">    <span class="built_in">this</span>.ctx = snowcanvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="comment">/* snowcanvas.height = window.innerHeight */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 雪运动对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flakeMove</span>(<span class="params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasWidth);   <span class="comment">/* x坐标 */</span></span><br><span class="line">    <span class="built_in">this</span>.y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasHeight);  <span class="comment">/* y坐标 */</span></span><br><span class="line">    <span class="built_in">this</span>.size = <span class="built_in">Math</span>.random() * flakeSize + <span class="number">2</span>;          <span class="comment">/* 形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.maxSize = flakeSize;                           <span class="comment">/* 最大形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + fallSpeed;         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.fallSpeed = fallSpeed;                         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed;                             <span class="comment">/* Y方向速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.velX = <span class="number">0</span>;                                      <span class="comment">/* X方向速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.stepSize = <span class="built_in">Math</span>.random() / <span class="number">30</span>;                 <span class="comment">/* 步长 */</span></span><br><span class="line">    <span class="built_in">this</span>.step = <span class="number">0</span>                                       <span class="comment">/* 步数 */</span></span><br><span class="line">&#125;</span><br><span class="line">flakeMove.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">this</span>.x,</span><br><span class="line">        y = <span class="built_in">this</span>.y;</span><br><span class="line">    <span class="comment">/* 左右摆动(余弦) */</span></span><br><span class="line">    <span class="built_in">this</span>.velX *= <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.velY &lt;= <span class="built_in">this</span>.speed) &#123;</span><br><span class="line">        <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.velX += <span class="built_in">Math</span>.cos(<span class="built_in">this</span>.step += <span class="number">.05</span>) * <span class="built_in">this</span>.stepSize;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.y += <span class="built_in">this</span>.velY;</span><br><span class="line">    <span class="built_in">this</span>.x += <span class="built_in">this</span>.velX;</span><br><span class="line">    <span class="comment">/* 飞出边界的处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.x &gt;= canvas.width || <span class="built_in">this</span>.x &lt;= <span class="number">0</span> || <span class="built_in">this</span>.y &gt;= canvas.height || <span class="built_in">this</span>.y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.reset(canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></span><br><span class="line">flakeMove.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * width);</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.size = <span class="built_in">Math</span>.random() * <span class="built_in">this</span>.maxSize + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + <span class="built_in">this</span>.fallSpeed;</span><br><span class="line">    <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed;</span><br><span class="line">    <span class="built_in">this</span>.velX = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></span><br><span class="line">flakeMove.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="number">0</span>, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.size);</span><br><span class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">&quot;rgba(255, 255, 255, 0.9)&quot;</span>);  <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">&quot;rgba(255, 255, 255, 0.5)&quot;</span>); <span class="comment">/* 若要改为其他颜色，请自行查 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">&quot;rgba(255, 255, 255, 0)&quot;</span>);    <span class="comment">/* 找16进制的RGB 颜色代码。 */</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle = snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.size, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 创建雪花-定义形状 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFlakes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="built_in">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="built_in">this</span>.flakes = [],</span><br><span class="line">        canvas = <span class="built_in">this</span>.canvas;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlake; i++) &#123;</span><br><span class="line">        flakes.push(<span class="keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="built_in">this</span>.flakeSize, <span class="built_in">this</span>.fallSpeed))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 画雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="built_in">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="built_in">this</span>.flakes;</span><br><span class="line">    ctx = <span class="built_in">this</span>.ctx, canvas = <span class="built_in">this</span>.canvas, that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">/* 清空雪花 */</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; maxFlake; e++) &#123;</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  一帧一帧的画 */</span></span><br><span class="line">    <span class="built_in">this</span>.loop = requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用及控制方法 */</span></span><br><span class="line"><span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123;<span class="attr">maxFlake</span>:<span class="number">60</span>&#125;);</span><br><span class="line">snow.start();</span><br></pre></td></tr></table></figure><ul><li>引用</li></ul><p>&emsp;&emsp;以上两种样式，选一种用就可以了，然后修改调用特效代码引用文件<code>_layout.swig</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上边引入的调用<code>jquery.min.js</code>文件的下方添加如下代码，<code>src=&quot;/js/snow1.js</code>表示要调用的特效实现文件的位置，我这里用了六边形雪花的特效，这里添加了一个屏幕宽度判断。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 雪花特效实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> windowWidth = $(<span class="built_in">window</span>).width();</span></span><br><span class="line">  if (windowWidth &gt; 480) </span><br><span class="line">  &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">    document.write(&#x27;<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/snow1.js&quot;</span>&gt;</span>&lt;\/script&gt;&#x27;);</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-11樱花特效实现"><a href="#2-11樱花特效实现" class="headerlink" title="2.11樱花特效实现"></a><font size=3>2.11樱花特效实现</font></h2><p>&emsp;&emsp;该特效的实现过程与上边的雪花特效类似，我比较喜欢这一个，所以后来换成了这个。</p><ul><li>新建特效实现文件</li></ul><p>&emsp;&emsp;由于所用的代码源码名称为<code>sakura</code>所以所有的特效文件名称也按这个名字来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入相应的文件夹</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/themes/next/source/js/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建js文件</span></span><br><span class="line">vim sakura.js</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后续修改可以使用以下命令</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/source/js/sakura.js</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加链接中的代码到<code>sakura.js</code>文件中。</p><p><code>sakura</code>特效代码：<a href="https://cdn.jsdelivr.net/gh/1999cyx/cdn@2.0.2/js/sakura.js" target="_blank">sakura.js</a></p><ul><li>引用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开引用文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里注意，我把之前的两种效果都给屏蔽掉了，采用的方式是直接删除，但是通过这一个特效的添加发现其实可以通过变量来配置是否开启相应的特效效果。</p><p>&emsp;&emsp;在刚才的<code>_layout.swig</code>文件中<code>&lt;body&gt;&lt;/body&gt;</code>内部引用以下代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 樱花特效 --&gt;</span></span><br><span class="line">&#123;% if theme.sakura.enable %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;/js/sakura.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ul><li>主题配置文件修改</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开主题配置文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 樱花飘落动特效</span></span><br><span class="line"><span class="attr">sakura:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="2-12字数统计与阅读时长"><a href="#2-12字数统计与阅读时长" class="headerlink" title="2.12字数统计与阅读时长"></a><font size=3>2.12字数统计与阅读时长</font></h2><ul><li>安装<code>hexo-symbols-count-time</code>插件</li></ul><p>&emsp;&emsp;插件地址：<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank">hexo-symbols-count-time</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/theme-next/hexo-symbols-count-time</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在站点根目录中执行以下命令安装该插件.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><ul><li>修改主题配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开主题配置文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改主题配置文件部分如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"> <span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;参数说明:</p><table><!--表格开始-->    <tr><!--第1行-->        <td align="center"><!--第1列-->            参数         </td>        <td align="center"><!--第2列-->            说明        </td>    </tr>    <tr><!--第2行-->        <td align="center"><!--第1列-->            separated_meta         </td>        <td align="left"><!--第2列-->            是否换行显示字数统计和阅读时长         </td>    </tr>    <tr><!--第3行-->        <td align="center"><!--第1列-->          item_text_post         </td>        <td align="left"><!--第2列-->            文章的字数统计、阅读时长用图标还是文本表示         </td>    </tr>    <tr><!--第4行-->        <td align="center"><!--第1列-->           item_text_total         </td>        <td align="left"><!--第2列-->            博客底部统计字数统计、阅读时长使用图标还是 文本表示         </td>    </tr>    <tr><!--第5行-->        <td align="center"><!--第1列-->           awl(Average Word Length)         </td>        <td align="left"><!--第2列-->            设定多少字符统计为一个字（word），中文博客需要设置为 2         </td>    </tr>    <tr><!--第6行-->        <td align="center"><!--第1列-->           wpm(Words Per Minute)         </td>        <td align="left"><!--第2列-->            阅读时长1分钟需要统计多少字（word），官方阅读参考为:Slow ≈ 200;Normal ≈ 275;Fast ≈ 350         </td>    </tr></table><h2 id="2-13添加版权说明"><a href="#2-13添加版权说明" class="headerlink" title="2.13添加版权说明"></a><font size=3>2.13添加版权说明</font></h2><p>&emsp;&emsp;该段的优化，可以实现版权的正常显示，但是复制文章链接的功能只能在刷新后才可以使用，原因是后边添加音乐播放器的时候开启了<code>pjax</code>这就导致了后面鼠标点击后的复制操作不会被加载，目前还没有解决，只能刷新后恢复正常。</p><ul><li>(1)创建一个<code>my-copyright.swig</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入目标文件夹</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/themes/next/layout/_macro/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建mycopyright.swig，名字随意，下边对应就好</span></span><br><span class="line">vim my-copyright.swig</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后续可以用以下命令直接修改该文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_macro/my-copyright.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;文件内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my_post_copyright&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- JS库 sweetalert 可修改路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; page.title &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;copy-path&quot;</span>  <span class="attr">title</span>=<span class="string">&quot;点击复制文章链接&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-clipboard&quot;</span> <span class="attr">data-clipboard-text</span>=<span class="string">&quot;&#123;&#123; page.permalink &#125;&#125;&quot;</span>  <span class="attr">aria-label</span>=<span class="string">&quot;复制成功！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-creative-commons&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;license&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">&#x27;.fa-clipboard&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;.fa-clipboard&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      clipboard.on(<span class="string">&#x27;success&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        swal(&#123;   </span><br><span class="line"><span class="javascript">          title: <span class="string">&quot;&quot;</span>,   </span></span><br><span class="line"><span class="javascript">          text: <span class="string">&#x27;复制成功&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          icon: <span class="string">&quot;success&quot;</span>, </span></span><br><span class="line"><span class="javascript">          showConfirmButton: <span class="literal">true</span></span></span><br><span class="line">          &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>&lt;i class=&quot;far fa-copyright&quot;&gt;&lt;/i&gt;</code>这句话是在许可协议这行的，这是一个<code>Font Awesome </code>的版权的图标。</p><ul><li>(2)新建一个<code>my-post-copyright.styl</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入目标文件夹</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/themes/next/source/css/_common/components/post/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建my-post-copyright.styl，名字随意，下边对应就好</span></span><br><span class="line">vim my-post-copyright.styl</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后续可以用以下命令直接修改该文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/source/css/_common/components/post/my-post-copyright.styl</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;内容如下所示</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my_post_copyright</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">45em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2.8em</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1.0em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> p&#123;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#b5b5b5</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a3d2a3</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.post-url</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  +mobile()&#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(3)引用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开引用文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_macro/post.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在以下代码之间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在以下之后 --&gt;</span></span><br><span class="line">&#123;%- if theme.follow_me %&#125;</span><br><span class="line">        &#123;&#123; partial(&#x27;_partials/post/post-followme.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 在以下之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;post-footer&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加版权信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include &#x27;my-copyright.swig&#x27; %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开引用文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/source/css/_common/components/post/post.styl</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在结尾添加以下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;my-post-copyright&quot;</span></span><br></pre></td></tr></table></figure><ul><li>设置新建文章自动显示版权声明</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开相应文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/scaffolds/post.md</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">copyright: true #新增copyright</span><br><span class="line">---  </span><br></pre></td></tr></table></figure><ul><li>最终效果如下</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/002Copyright.png" style="zoom:67%;" /><h2 id="2-14添加结束标记"><a href="#2-14添加结束标记" class="headerlink" title="2.14添加结束标记"></a><font size=3>2.14添加结束标记</font></h2><ul><li>新建一个结束标记实现文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入目标文件夹</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/themes/next/layout/_macro/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建实现文件</span></span><br><span class="line">vim passage-end-tag.swig</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后续可以用以下命令直接修改该文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_macro/passage-end-tag.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在文件中添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>--------------------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读--------------------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开引用文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_macro/post.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在以下代码之间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在以下之后 --&gt;</span></span><br><span class="line">&#123;%- if theme.follow_me %&#125;</span><br><span class="line">        &#123;&#123; partial(&#x27;_partials/post/post-followme.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 在以下之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;post-footer&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--结束标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">      &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置主题配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开主题配置文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line"><span class="attr">enabled:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><h2 id="2-15侧边栏显示阅读进度"><a href="#2-15侧边栏显示阅读进度" class="headerlink" title="2.15侧边栏显示阅读进度"></a><font size=3>2.15侧边栏显示阅读进度</font></h2><ul><li>打开<code>scrollpercent</code>即可</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开主题配置文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改部分如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我打开之后，好像没有效果，应该是没有显示<code>top</code>按钮，这里把这个按钮在侧边栏开关打开，修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar.</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>效果如下图</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/003Scrollpercent.png" style="zoom:80%;" /><h2 id="2-16修改底部-标签"><a href="#2-16修改底部-标签" class="headerlink" title="2.16修改底部#标签    "></a><font size=3>2.16修改底部<code>#</code>标签    </font></h2><ul><li>打开相应显示文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_macro/post.swig </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;找到如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;post-footer&quot;</span>&gt;</span></span><br><span class="line">  &#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">    &#123;%- if theme.tag_icon %&#125;</span><br><span class="line">      &#123;%- set tag_indicate = &#x27;<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#x27; %&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">      &#123;%- set tag_indicate = &#x27;#&#x27; %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-tags&quot;</span>&gt;</span></span><br><span class="line">      &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/post/post-footer.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">                                                                                                                                        </span><br><span class="line">  &#123;&#123; post_nav(post) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;发现在主题配置文件中打开<code>tag_icon</code>就可以了。</p><ul><li>配置主题配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开主题配置文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><h2 id="2-17去掉底部的由Hexo…强力驱动字样"><a href="#2-17去掉底部的由Hexo…强力驱动字样" class="headerlink" title="2.17去掉底部的由Hexo…强力驱动字样"></a><font size=3>2.17去掉底部的由Hexo…强力驱动字样</font></h2><ul><li>按以下修改相应文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开相应的文件</span></span><br><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_partials/footer.swig </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;找到以下代码，注释掉中间的部分即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if theme.footer.powered %&#125;</span><br><span class="line"><span class="comment">&lt;!--&lt;div class=&quot;powered-by&quot;&gt;</span></span><br><span class="line"><span class="comment">    &#123;%- set next_site = &#x27;https://theme-next.org&#x27; %&#125;</span></span><br><span class="line"><span class="comment">    &#123;%- if theme.scheme !== &#x27;Gemini&#x27; %&#125;</span></span><br><span class="line"><span class="comment">      &#123;%- set next_site = &#x27;https://&#x27; + theme.scheme | lower + &#x27;.theme-next.org&#x27; %&#125;</span></span><br><span class="line"><span class="comment">    &#123;%- endif %&#125;</span></span><br><span class="line"><span class="comment">    &#123;&#123;- __(&#x27;footer.powered&#x27;, next_url(&#x27;https://hexo.io&#x27;, &#x27;Hexo&#x27;, &#123;class: &#x27;theme-link&#x27;&#125;) + &#x27; &amp; &#x27; + next_url(next_site, &#x27;NexT.&#x27; + theme.scheme, &#123;class: &#x27;theme-link&#x27;&#125;)) &#125;&#125;</span></span><br><span class="line"><span class="comment">  &lt;/div&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>其实也可以在主题配置文件中将<code>footer</code>中的<code>powered</code>设置为<code>false</code></p><h2 id="2-18更换网页顶栏默认图标"><a href="#2-18更换网页顶栏默认图标" class="headerlink" title="2.18更换网页顶栏默认图标"></a><font size=3>2.18更换网页顶栏默认图标</font></h2><ul><li>制作图片</li></ul><p>&emsp;&emsp;我使用的是一个在线图标制作免费软件，这个就是<a href="http://www.bitbug.net/" target="_blank">比特虫</a>，网址如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.bitbug.net/</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;目标尺寸32x32就可以，然后填写附加码，再生成保存就可以了文件可以直接保存到以下位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/02MyBlog/hexofiles/themes/next/source/images/</span><br></pre></td></tr></table></figure><ul><li>修改该图标引用文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_partials/head/head.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;找到如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if theme.favicon.medium %&#125;                          </span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;32x32&quot;</span> <span class="attr">href</span>=<span class="string">&quot;    &#123;&#123; url_for(theme.favicon.medium) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line">&#123;%- if theme.favicon.small %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;16x16&quot;</span> <span class="attr">href</span>=<span class="string">&quot;    &#123;&#123; url_for(theme.favicon.small) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到，这里有两种图标大小，由判断条件<code>theme.favicon.medium</code>可知，在主题配置文件中有相应的地方来设置该参数。</p><ul><li>配置主题配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改部分如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="comment"># small: /images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="comment"># medium: /images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon16.ico</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon32.ico</span>                        </span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure><ul><li>效果如下所示</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Hexo/NexT/004Favicon.png"><h2 id="2-19设置RSS订阅"><a href="#2-19设置RSS订阅" class="headerlink" title="2.19设置RSS订阅"></a><font size=3>2.19设置RSS订阅</font></h2><ul><li>安装<code>hexo-generator-feed</code>插件</li></ul><p>&emsp;&emsp;在站点根目录下执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><ul><li> 配置站点配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改部分如下(添加<code>plugins: hexo-generate-feed</code>)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/                      </span></span><br><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure><ul><li>配置主题配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改部分如下(去掉<code>RSS</code>的注释)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon` (Font Awesome)</span></span><br><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twit     ter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegr     am</span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span>  </span><br></pre></td></tr></table></figure><h2 id="2-20页脚增加网站运行时间统计"><a href="#2-20页脚增加网站运行时间统计" class="headerlink" title="2.20页脚增加网站运行时间统计"></a><font size=3>2.20页脚增加网站运行时间统计</font></h2><ul><li>修改<code>footer.swig</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_partials/footer.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在适当的位置添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加运行时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;sitetime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">siteTime</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.setTimeout(<span class="string">&quot;siteTime()&quot;</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> seconds = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> minutes = seconds * <span class="number">60</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> hours = minutes * <span class="number">60</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> days = hours * <span class="number">24</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> years = days * <span class="number">365</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> todayYear = today.getFullYear();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> todayMonth = today.getMonth()+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> todayDate = today.getDate();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> todayHour = today.getHours();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> todayMinute = today.getMinutes();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> todaySecond = today.getSeconds();</span></span><br><span class="line">/* </span><br><span class="line"><span class="javascript"><span class="built_in">Date</span>.UTC() -- 返回date对象距世界标准时间(UTC)<span class="number">1970</span>年<span class="number">1</span>月<span class="number">1</span>日午夜之间的毫秒数(时间戳)</span></span><br><span class="line">year - 作为date对象的年份，为4位年份值</span><br><span class="line">month - 0-11之间的整数，做为date对象的月份</span><br><span class="line">day - 1-31之间的整数，做为date对象的天数</span><br><span class="line">hours - 0(午夜24点)-23之间的整数，做为date对象的小时数</span><br><span class="line">minutes - 0-59之间的整数，做为date对象的分钟数</span><br><span class="line">seconds - 0-59之间的整数，做为date对象的秒数</span><br><span class="line">microseconds - 0-999之间的整数，做为date对象的毫秒数</span><br><span class="line">        */</span><br><span class="line"><span class="javascript"><span class="keyword">var</span> t1 = <span class="built_in">Date</span>.UTC(<span class="number">2020</span>,<span class="number">02</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">00</span>,<span class="number">00</span>); <span class="comment">//北京时间2018-2-13 00:00:00</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> t2 = <span class="built_in">Date</span>.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> diff = t2-t1;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> diffYears = <span class="built_in">Math</span>.floor(diff/years);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> diffDays = <span class="built_in">Math</span>.floor((diff/days)-diffYears*<span class="number">365</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> diffHours = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days)/hours);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> diffMinutes = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours)/minutes);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> diffSeconds = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;sitetime&quot;</span>).innerHTML=<span class="string">&quot; 已安全运行&quot;</span>+<span class="comment">/*diffYears+&quot; 年 &quot;+*/</span>diffDays+<span class="string">&quot; 天 &quot;</span>+diffHours+<span class="string">&quot; 小时 &quot;</span>+diffMinutes+<span class="string">&quot; 分钟 &quot;</span>+diffSeconds+<span class="string">&quot; 秒&quot;</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">siteTime();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-21添加音乐播放器"><a href="#2-21添加音乐播放器" class="headerlink" title="2.21添加音乐播放器"></a><font size=3>2.21添加音乐播放器</font></h2><table><thead><tr><th align="center">名称</th><th>点击链接访问相应网址</th></tr></thead><tbody><tr><td align="center"><code>APlayer</code></td><td><a href="https://github.com/DIYgod/APlayer" target="_blank"><strong>Aplayer</strong></a></td></tr><tr><td align="center"><code>APlayer</code>中文文档</td><td><a href="https://aplayer.js.org/#/zh-Hans/" target="_blank"><strong>APlayer中文文档</strong></a></td></tr><tr><td align="center"><code>hexo-tag-aplayer</code></td><td><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank"><strong>hexo-tag-aplayer</strong></a></td></tr><tr><td align="center"><code>hexo-tag-aplayer</code>中文文档</td><td><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank"><strong>hexo-tag-aplayer中文文档</strong></a></td></tr><tr><td align="center"><code>theme-next-pjax</code></td><td><a href="https://github.com/theme-next/theme-next-pjax" target="_blank"><strong>theme-next-pjax</strong></a></td></tr></tbody></table><ul><li>安装<code>hexo-tag-aplayer</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><ul><li>修改<code>_layout.swig</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- APlayer本体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-id</span>=<span class="string">&quot;7274703654&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-server</span>=<span class="string">&quot;tencent&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-type</span>=<span class="string">&quot;playlist&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-fixed</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-autoplay</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-order</span>=<span class="string">&quot;random&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-volume</span>=<span class="string">&quot;0.55&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-theme</span>=<span class="string">&quot;#cc543a&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-preload</span>=<span class="string">&quot;auto&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--如果将本体放在body里面导致页面加载出现问题，请尝试放到body体后面--&gt;</span> </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里支持不同的音乐平台，<code>id</code>就是自己歌单地址中的那一串数字。</p><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table><ul><li>修改站点配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><code>pjax</code>全局播放插件</li></ul><p>&emsp;&emsp;该插件可以使站点进行跳转的时候不继续播放(这里要注意,主题根目录中的<code>.gitignore</code>文件中忽略了所有的扩展包，如果不想重新下载，就可以修改文件，将其也添加到版本库中)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入主题文件夹根目录</span></span><br><span class="line">cd ~/02MyBlog/hexofiles/themes/next</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载插件源码</span></span><br><span class="line">git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改主题配置文件，打开<code>pjax</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Easily enable fast Ajax navigation on your website.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pjax</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="3-站点设置"><a href="#3-站点设置" class="headerlink" title="3.站点设置"></a><font size=3>3.站点设置</font></h1><p>&emsp;&emsp;站点的一些配置参数如下</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>keywords</code></td><td>网站的关键词。支援多个关键词。</td></tr><tr><td><code>author</code></td><td>名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><h2 id="3-1设置中文显示"><a href="#3-1设置中文显示" class="headerlink" title="3.1设置中文显示"></a><font size=3>3.1设置中文显示</font></h2><p>&emsp;&emsp;目前 NexT 支持的语言如以下表格所示：</p><table><thead><tr><th>语言</th><th>代码</th><th align="left">设定示例</th></tr></thead><tbody><tr><td>English</td><td><code>en</code></td><td align="left"><code>language: en</code></td></tr><tr><td>简体中文</td><td><code>zh-Hans</code></td><td align="left"><code>language: zh-CN</code></td></tr><tr><td>Français</td><td><code>fr-FR</code></td><td align="left"><code>language: fr-FR</code></td></tr><tr><td>Português</td><td><code>pt</code></td><td align="left"><code>language: pt</code> or <code>language: pt-BR</code></td></tr><tr><td>繁體中文</td><td><code>zh-hk</code> 或者 <code>zh-tw</code></td><td align="left"><code>language: zh-hk</code></td></tr><tr><td>Русский язык</td><td><code>ru</code></td><td align="left"><code>language: ru</code></td></tr><tr><td>Deutsch</td><td><code>de</code></td><td align="left"><code>language: de</code></td></tr><tr><td>日本語</td><td><code>ja</code></td><td align="left"><code>language: ja</code></td></tr><tr><td>Indonesian</td><td><code>id</code></td><td align="left"><code>language: id</code></td></tr><tr><td>Korean</td><td><code>ko</code></td><td align="left"><code>language: ko</code></td></tr></tbody></table><p>&emsp;&emsp;编辑 站点配置文件，将 <code>language</code> 设置成你需要的语言。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">一世繁华</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">记录点点滴滴</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">选择远方，便只顾风雨兼程</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">qidaink</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>                                         </span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><h2 id="3-2持久化链接"><a href="#3-2持久化链接" class="headerlink" title="3.2持久化链接"></a><font size=3>3.2持久化链接</font></h2><p>&emsp;&emsp;使用Hexo后，默认的链接是<code>http://url/年/月/日/hello-world</code>这种类型的，这是由年/月/日/标题组成。如果调整过日期会变化，另外标题是中文或存在特殊符号的时候这样的链接可能就有问题。</p><ul><li>安装插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><ul><li>修改站点配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加修改如下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;ht    tp://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line">  <span class="comment">#permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span>                                            </span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing </span></span><br></pre></td></tr></table></figure><h2 id="3-3开启代码高亮"><a href="#3-3开启代码高亮" class="headerlink" title="3.3开启代码高亮"></a><font size=3>3.3开启代码高亮</font></h2><p>&emsp;&emsp;编辑站点配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改部分如下，文字自动检测默认不启动，所以改成<code>true</code>使其起作用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="3-4图片延迟加载"><a href="#3-4图片延迟加载" class="headerlink" title="3.4图片延迟加载"></a><font size=3>3.4图片延迟加载</font></h2><p>&emsp;&emsp;访问到图片的时候才会去请求图片资源，可以提高博客的访问速度。</p><ul><li>安装<code>hexo-lazyload-image</code>插件</li></ul><p>&emsp;&emsp;在站点根目录下执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure><ul><li>配置站点配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/02MyBlog/hexofiles/_config.yml</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;增加内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插件实现图片懒加载，提高博客访问速度</span></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">loadingImg:</span>  <span class="comment"># eg. ./images/loading.png</span></span><br></pre></td></tr></table></figure><p><code>onlypost</code>：是否仅文章中的图片做懒加载, 如果为 false, 则主题中的其他图片, 也会做懒加载, 如头像, logo 等任何图片.</p><p><code>loadingImg</code>：图片未加载时的代替图.</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ubuntu】VMware中Ubuntu使用问题解决</title>
      <link href="post/5df7cbd0.html"/>
      <url>post/5df7cbd0.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要说明如何解决在vmware中使用ubuntu中遇到的一些问题，本文将持续更新……</p><span id="more"></span><h1 id="1-解决网络图标消失问题"><a href="#1-解决网络图标消失问题" class="headerlink" title="1.解决网络图标消失问题"></a><font size=3>1.解决网络图标消失问题</font></h1><p>&emsp;&emsp;可尝试输入以下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service network-manager stop</span><br><span class="line">sudo rm /var/lib/NetworkManager/NetworkManager.state </span><br><span class="line">sudo service network-manager start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> Problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】Git-02-Git基本命令与使用</title>
      <link href="post/27f20136.html"/>
      <url>post/27f20136.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要介绍Git中的基本命令以及<code>beyond compare</code>插件的介绍。</p><span id="more"></span><p>【说明】:</p><ul><li><p>所用环境<code>VMwareWorkstation16.0 + Ubuntu18.04.6 + Win10</code></p></li><li><p>官网命令手册：<a href="https://git-scm.com/docs"><code>Reference</code></a></p></li><li><p>【参考资料】</p><table>    <tr>        <td align="center">名称</td>        <td align="center">网址</td>    </tr>    <tr>        <td align="center">官网命令手册</td>        <td align="left"><a href="https://git-scm.com/docs">Reference</a></td>    </tr>    <tr>        <td align="center">猴子都能懂的Git入门</td>        <td align="left"><a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a></td>    </tr>    <tr>        <td align="center">GitHub中文社区</td>        <td align="left"><a href="https://www.githubs.cn/post/git-tutorial">Git及GitHub教程</a></td>    </tr></table></li></ul><h1 id="一、Git配置命令"><a href="#一、Git配置命令" class="headerlink" title="一、Git配置命令"></a><font size=3>一、<code>Git</code>配置命令</font></h1><h2 id="1-查看版本"><a href="#1-查看版本" class="headerlink" title=" 1.查看版本"></a><font size=3> 1.查看版本</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="2-设置用户信息"><a href="#2-设置用户信息" class="headerlink" title=" 2.设置用户信息"></a><font size=3> 2.设置用户信息</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;John Doe&quot;</span><br><span class="line">git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;安装完 <code>Git</code> 之后，要做的第一件事就是设置你的<strong>用户名</strong>和<strong>邮件地址</strong>。 这一点很重要，因为每一个 <code>Git</code> 提交都会使用这些信息，它们会写入到每一次提交中，<strong>不可更改</strong>。</p><p>&emsp;&emsp;如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论在该系统上做任何事<br>情， <code>Git</code> 都会使用那些信息。 当想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p><h2 id="3-设置文本编辑器"><a href="#3-设置文本编辑器" class="headerlink" title="3.设置文本编辑器"></a><font size=3>3.设置文本编辑器</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor emacs # Vim、Emacs 和 Notepad++ 都是流行的文本编辑器</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>Windows</code> 系统上，如果想要使用别的文本编辑器，那么必须指定<strong>可执行文件</strong>的<strong>完整路径</strong>。</p><h2 id="4-检查配置信息"><a href="#4-检查配置信息" class="headerlink" title="4.检查配置信息"></a><font size=3>4.检查配置信息</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list  # 列出所有 Git 当时能找到的配置</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;此命令运行后可能会看到重复的变量名，因为 <code>Git</code> 会从不同的文件中读取同一个配置（例如：<code>/etc/gitconfig</code> 与<code>~/.gitconfig</code>）。 这种情况下，<code>Git</code> 会使用它找到的每一个变量的最后一个配置。若想检查某一项配置信息，则可以：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config &lt;key&gt; # 获取某一项配置信息</span><br></pre></td></tr></table></figure><h2 id="5-对LF和CRLF的处理"><a href="#5-对LF和CRLF的处理" class="headerlink" title="5.对LF和CRLF的处理"></a><font size=3>5.对<code>LF</code>和<code>CRLF</code>的处理</font></h2><p>&emsp;&emsp;<code>Linux</code>系统和<code>Windows</code>系统下的换行符不一样，<code>Linux</code>是<code>\n</code>，即<code>LF</code>，<code>Windows</code>下面是<code>\r\n</code>，即<code>CRLF</code>，<code>git</code>在维护版本库的时候统一使用的是<code>LF</code>。所以当文档跨平台进行编辑的时候，换行符就会产生差别，在不同平台编辑过得文件在进行<code>commit</code>的时候也会有相应的换行符警告。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LF will be replaced by CRLF in .......</span><br></pre></td></tr></table></figure><p>那么怎么处理呢？这样就可以了（不过这样似乎只是治标不治本，仅仅是忽略了检查，要是文章的话还好，要是代码的话，有可能会因为换行符而出现问题，暂时先这样解决）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><h2 id="6-查看配置及配置所在文件"><a href="#6-查看配置及配置所在文件" class="headerlink" title=" 6.查看配置及配置所在文件"></a><font size=3> 6.查看配置及配置所在文件</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list --show-origin</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该命令可以查询 <code>Git</code> 中该变量的 原始 值，它会告诉我们哪一个配置文件最后设置了该值。</p><h2 id="7-获取帮助"><a href="#7-获取帮助" class="headerlink" title="7.获取帮助"></a><font size=3>7.获取帮助</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;verb&gt;      # verb 为想要查询的命令,如 config</span><br><span class="line">git &lt;verb&gt; --help    # verb 为想要查询的命令,如 config</span><br><span class="line">man git-&lt;verb&gt;       # verb 为想要查询的命令,如 config</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;若不需要全面的手册，只需要可用选项的快速参考，那么可以用<code>-h</code>选项获得更简明的 <code>help</code>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git &lt;verb&gt; -h        # verb 为想要查询的命令,如 config，add</span><br></pre></td></tr></table></figure><h1 id="二、Git——本地仓库"><a href="#二、Git——本地仓库" class="headerlink" title="二、Git——本地仓库"></a><font size=3>二、<code>Git</code>——本地仓库</font></h1><p>&emsp;&emsp;本部分介绍<code>Git</code>在本地仓库中进行版本控制的相关操作。</p><h2 id="1-Git在本地三大工作区域"><a href="#1-Git在本地三大工作区域" class="headerlink" title="1.Git在本地三大工作区域"></a><font size=3>1.<code>Git</code>在本地三大工作区域</font></h2><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110145428667.png" alt="image-20220110145428667" style="zoom:67%;" /><h2 id="2-基本命令"><a href="#2-基本命令" class="headerlink" title="2.基本命令"></a><font size=3>2.基本命令</font></h2><h3 id="2-1初始化文件夹"><a href="#2-1初始化文件夹" class="headerlink" title="2.1初始化文件夹"></a><font size=3>2.1初始化文件夹</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入或者创建想要初始化的文件夹</span></span><br><span class="line">cd ~/3MyGitFiles/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110150103283.png" alt="image-20220110150103283" style="zoom:67%;" /><p>&emsp;&emsp;如上图所示，初始化完成后会出现图中的提示，初始化的过程中<code>Git</code> 会创建一个 <code>.git</code> 目录。 这个目录包含了几乎所有 <code>Git</code> 存储和操作的东西。 如若想备份或复制一个版本库，只需把这个目录拷贝至另一处即可，新初始化的<code>.git</code>目录结构如下。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110150513919.png" alt="image-20220110150513919" style="zoom:67%;" /><h3 id="2-2检查文件状态"><a href="#2-2检查文件状态" class="headerlink" title="2.2检查文件状态"></a><font size=3>2.2检查文件状态</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim a.md # 首先创建一个文件，运行后，按 :wq 保存并退出 </span><br><span class="line">git status  # 查看当前文件夹中文件状态</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110150819365.png" alt="image-20220110150819365" style="zoom:67%;" /><p>&emsp;&emsp;我们先创建一个新的文件，不做任何操作，使用该命令，发现<code>Git</code>已经检测到该文件，当文件还未被提交到暂存区的时候显示为<strong>红色</strong>。</p><p>&emsp;&emsp;<code>git status</code> 命令的输出十分详细，但输出有些繁琐。<code>Git </code>有一个选项可以缩短状态命令的输出，这样可以以简洁的方式查看更改，如下图所示。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status -s       # 使用该命令查看状态</span><br><span class="line">git status --short  # 或者使用该命令</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110151912273.png" alt="image-20220110151912273" style="zoom:67%;" /><table><!--表格开始-->    <tr><!--第1行-->        <td align="center"><!--第1列-->            标记        </td>        <td align="center"><!--第2列-->            说明        </td>    </tr>    <tr><!--第2行-->        <td align="center"><!--第1列-->            ??        </td>        <td align="left"><!--第2列-->            新添加的未跟踪文件(红色)        </td>    </tr>    <tr><!--第3行-->        <td align="center"><!--第1列-->           A        </td>        <td align="left"><!--第2列-->            新添加到暂存区中的文件(绿色)        </td>    </tr>    <tr><!--第4行-->        <td align="center"><!--第1列-->           M        </td>        <td align="left"><!--第2列-->            修改过的文件(红色)        </td>    </tr>    <tr><!--第5行-->        <td align="center"><!--第1列-->           AM        </td>        <td align="left"><!--第2列-->            已添加到暂存区的文件又被修改了(A绿色，M红色)        </td>    </tr>    <tr><!--第5行-->        <td align="center"><!--第1列-->           UU        </td>        <td align="left"><!--第2列-->            由合并分支引起冲突，修改文件后还未添加到暂存区的状态标记(红色)        </td>    </tr></table><h3 id="2-3管理文件"><a href="#2-3管理文件" class="headerlink" title="2.3管理文件"></a><font size=3>2.3管理文件</font></h3><p>&emsp;&emsp;就是把文件添加到暂存区，<code>.</code>表示当前目录下所有文件，也可以只管理某一个文件，后边换成文件名称即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .            # 添加所有文件</span><br><span class="line">git add &lt;file_name&gt;  # 添加指定文件,可以同时指定多个文件</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110152213824.png" alt="image-20220110152213824" style="zoom:67%;" /><p>【注意】文件添加到暂存区的时候，会由红色变为绿色。</p><p>&emsp;&emsp;此时我们修改<code>a.md</code>文件，再查看状态，再提交到暂存区，这个时候文件状态的变化如下图所示：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110152559490.png" alt="image-20220110152559490" style="zoom:67%;" /><p>&emsp;&emsp;在添加到暂存区之前，修改后的文件标记变成了<code>AM</code>的标记，<code>A</code>就表示之前已经提交到暂存区了，<code>M</code>表示提交后，又修改了此文件，当修改后再次提交，文件标记就会重新变成<code>A</code>。</p><p>###<font size=3>2.4生成版本</font></p><p>&emsp;&emsp;在本阶段，将把暂存区域的数据提交到本地的版本库中 ，命令中的描述是提交时写的提交说明，可以会更清楚的看到自己每次做了哪些修改，便于日志的查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;描述&quot;</span><br></pre></td></tr></table></figure><h3 id="2-4查看提交的版本记录"><a href="#2-4查看提交的版本记录" class="headerlink" title="2.4查看提交的版本记录"></a><font size=3>2.4查看提交的版本记录</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110153305417.png" alt="image-20220110153305417" style="zoom:67%;" /><p>&emsp;&emsp;如图中所示，会显示提交的版本号，可以通过此版本号恢复到任一提交状态，<code>HEAD</code>表示当前指向的分支，就是当前提交是提交到了哪一个分支上，还会显示提交的作者信息，就是之前绑定的时候的信息，说明一点，当没有进行提交作者信息绑定的情况下，该命令会报错，需要注意一下。</p><p>&emsp;&emsp;<code>git log</code>命令的其他参数</p><table>    <tr>        <td align="center" width=100px>参数</td>        <td align="center">描述</td>    </tr>    <tr>        <td align="center" width=100px>--oneline</td>        <td align="left">把每一个提交信息压缩为一行</td>    </tr>    <tr>        <td align="center" width=100px>--stat</td>        <td align="left">通过比较每个提交展示插入与删除的数量</td>    </tr>    <tr>        <td align="center" width=100px>-p</td>        <td align="left">看每个提交实际的变化</td>    </tr>    <tr>        <td align="center" width=100px>--graph</td>        <td align="left">绘制一幅表示分支结构提交历史的ASCII图。该选项通常会结合 --oneline 与 --decorate 一起使用，使得能更加容易地看出提交所属的分支</td>    </tr>    <tr>        <td align="center" width=100px>--pretty=format:" <格式字符串> "</td>        <td align="left">可以让我们使用 printf 风格的占位符来展示每条提交。<br>详情可查看：<a href="https://git-scm.com/docs/pretty-formats#_pretty_formats">PRETTY FORMATS</a>        </td>    </tr></table><p>【格式字符串】</p><table style="font-size: 13.5px;">    <tr><td align="center">选项    </td><td align="center"> 说明</td></tr><tr><td align="center">%H    </td><td align="left">提交对象（commit）的完整哈希字串</td></tr><tr><td align="center">%h    </td><td align="left">提交对象的简短哈希字串</td></tr><tr><td align="center">%T    </td><td align="left">树对象（tree）的完整哈希字串</td></tr><tr><td align="center">%t    </td><td align="left">树对象的简短哈希字串</td></tr><tr><td align="center">%P    </td><td align="left">父对象（parent）的完整哈希字串</td></tr><tr><td align="center">%p    </td><td align="left">父对象的简短哈希字串</td></tr><tr><td align="center">%an    </td><td align="left">作者（author）的名字</td></tr><tr><td align="center">%ae    </td><td align="left">作者的电子邮件地址</td></tr><tr><td align="center">%ad    </td><td align="left">作者修订日期（可以用 -date= 选项定制格式）</td></tr><tr><td align="center">%ar    </td><td align="left">作者修订日期，按多久以前的方式显示</td></tr><tr><td align="center">%cn    </td><td align="left">提交者(committer)的名字</td></tr><tr><td align="center">%ce    </td><td align="left">提交者的电子邮件地址</td></tr><tr><td align="center">%cd    </td><td align="left">提交日期( --date = 制定的格式)</td></tr><tr><td align="center">%cr    </td><td align="left">提交日期，按多久以前的方式显示(1 day ago)</td></tr><tr><td align="center">%s    </td><td align="left">提交说明</td></tr><tr><td align="center">%d    </td><td align="left">ref 名称</td></tr><tr><td align="center">%n    </td><td align="left">换行</td></tr></table><p>【说明】在选项前边加上<code>%C(color)</code>则可以分别指定输出内容的颜色，<code>color</code>可选的值有<code>reset（默认的灰色），normal, black, red, green, yellow, blue, magenta, cyan, white</code>。另外说明一点就是<code>color</code>最好就是可以**带上圆括号<code>()</code>**，这样既清晰，也不会出错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline  # 把每一个提交信息压缩为一行</span><br><span class="line">git log --stat     # 通过比较每个提交展示插入与删除的数量</span><br><span class="line">git log -p         # 看每个提交实际的变化</span><br><span class="line">git log --graph --oneline --decorate # 绘制一幅表示分支结构提交历史的ASCII图 </span><br><span class="line">git log --pretty=format:&quot;%Cgreen%an %Cred%h %Cblue%s&quot;      # 以不同颜色显示提交者名字、提交说明和简短的哈希字符串</span><br></pre></td></tr></table></figure><h3 id="2-5定制git-log"><a href="#2-5定制git-log" class="headerlink" title="2.5定制git log"></a><font size=3>2.5定制<code>git log</code></font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 个人定制版 git <span class="built_in">log</span></span></span><br><span class="line">git log --graph --pretty=format:&#x27;%C(magenta)[%an]%C(reset) %C(red)%h%C(reset) : %C(green)%s%C(reset) %C(yellow)%d%C(reset) %C(blue)(%cr)%C(reset) &#x27; --abbrev-commit --date=relative # 相对时间</span><br><span class="line"></span><br><span class="line">git log --graph --pretty=format:&#x27;%C(magenta)[%an]%C(reset) %C(red)%h%C(reset) : %C(green)%s%C(reset) %C(yellow)%d%C(reset) %C(blue)(%cd)%C(reset) &#x27; --abbrev-commit --date=format:&#x27;%Y-%m-%d %H:%M:%S&#x27; # 绝对时间</span><br></pre></td></tr></table></figure><p>【说明】一般来说<code>format</code>后边跟的是双引号<code>&quot;</code>，但是若想使用<code>alias</code>创建自定义命令的话，需要改为**单引号<code>&#39;</code>**，否则会报错。</p><ul><li>自定义方法一：修改<code>~/.gitconfig</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.gitconfig</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;打开后在结尾处添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">mylog = log --graph --pretty=format:&#x27;%C(magenta)[%an]%C(reset) %C(red)%h%C(reset) : %C(green)%s%C(reset) %C(yellow)%d%C(reset) %C(blue)(%cr)%C(reset)&#x27; --abbrev-commit --date=relative</span><br></pre></td></tr></table></figure><ul><li>自定义方法二：命令行输入</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.mylog &quot;log --graph --pretty=format:&#x27;%C(magenta)[%an]%C(reset) %C(red)%h%C(reset) : %C(green)%s%C(reset) %C(yellow)%d%C(reset) %C(blue)(%cr)%C(reset)&#x27; --abbrev-commit --date=relative&quot;</span><br></pre></td></tr></table></figure><ul><li>运行自定义命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mylog</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110174851259.png" alt="image-20220110174851259" style="zoom: 67%;" /><h2 id="3-小故事学操作"><a href="#3-小故事学操作" class="headerlink" title="3.小故事学操作"></a><font size=3>3.小故事学操作</font></h2><p>&emsp;&emsp;首先，介绍一下背景哈，后边可能会沿用这个故事来进行<code>Git</code>的学习，从而在不同场景下练习<code>Git</code>操作。</p><p>&emsp;&emsp;<code>long long ago ...</code>，有一个孩子，叫<code>Hector</code>他学的专业是自动化这一方面的，他有一个朋友，名字是<code>Andrea</code>。这天<code>Hector</code>叫来<code>Andrea</code>说，我们做一个环境检测系统用于参加比赛吧，<code>Andrea</code>马上表现出极大的热情，于是，他们进行了各种调研之后，便开始进行这个项目的实践，项目名称就定为<code>environment</code>。</p><h3 id="3-1开始项目工程"><a href="#3-1开始项目工程" class="headerlink" title="3.1开始项目工程"></a><font size=3>3.1开始项目工程</font></h3><ul><li>1.创建项目文件夹并进行<code>Git</code>初始化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/environment    # 创建项目工程文件夹</span><br><span class="line">cd ~/environment</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>2.创建程序文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/environment</span><br><span class="line">touch program.c</span><br></pre></td></tr></table></figure><ul><li>将所有文件添加到本地版本库以便于版本控制</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status -s  # 查看文件状态</span><br><span class="line">git add .      # 添加所有文件到暂存区</span><br><span class="line">git commit -m &quot;Create related files.&quot; # 提交文件到本地版本库</span><br><span class="line">git mylog      # 查看提交记录，该命令为自己定制，具体可以看2.6节</span><br></pre></td></tr></table></figure><p>【说明】为了作下一节的修改上次提交命令测试，这里删掉了之前的<code>.git</code>文件，重新进行了初始化和提交，所以<code>hash</code>值与上边的图片有所区别，后边都以新提交的为准。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110211411391.png" alt="image-20220110211411391" style="zoom:67%;" /><h3 id="3-2修改上次提交"><a href="#3-2修改上次提交" class="headerlink" title="3.2修改上次提交"></a><font size=3>3.2修改上次提交</font></h3><p>&emsp;&emsp;提交完了，发现忘记创建说明文档了，即<code>readme.md</code>文件没有创建和提交。 那么怎么解决呢？可以重新提交一次，但是这就意味着版本库中有两个提交记录，这样的情况出现的多了，就会导致版本库历史记录很乱，我们既想将该文件提交上去，又不想让提交记录变得繁琐，那么要怎么样解决呢？此时，可以运行带有<code>--amend</code>选项的提交命令来重新提交，这样可以避免让仓库历史纪录变得复杂。</p><ul><li>命令格式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend -m &quot;新的描述&quot; # 如果不加-m参数，系统会让进行输入的</span><br><span class="line">git commit --amend  --no-edit # 不修改描述，只是添加新文件</span><br></pre></td></tr></table></figure><ul><li>实际操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add readme.md</span><br><span class="line">git commit --amend  --no-edit # 重新提交</span><br><span class="line">git mylog     # 查看提交记录，该命令为自己定制，具体可以看2.6节</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110212545086.png" alt="image-20220110212545086" style="zoom:67%;" /><p>&emsp;&emsp;由图可知，提交记录还是只有一条，提交的描述也未发生变化，但是提交时间和提交的<code>hash</code>值却更新了，其实按自己理解，就相当于撤销了上一次提交，将文件全部重新提交了一次。</p><h3 id="3-3回到指定版本"><a href="#3-3回到指定版本" class="headerlink" title="3.3回到指定版本"></a><font size=3>3.3回到指定版本</font></h3><p>&emsp;&emsp;当某一项功能正在开发的时候，发现这一项功能不需要了，如果想要回到之前的功能，而去掉正在开发的东西，一个比较麻烦的方法就是将上一个功能完成后新增加的东西全部删除，但是这样的话工作量极其巨大，那么我们要怎么做呢？<code>Git</code>的版本回滚功能就很好的解决了这个问题。</p><ul><li>命令格式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog               # 查看所有提交记录</span><br><span class="line">git reset --hard &lt;版本号&gt; # 回到指定版本,版本号即为每次提交的hash值</span><br></pre></td></tr></table></figure><p>【说明】：</p><p>&emsp;&emsp;其实这里查看所有提交记录的时候，也可以使用<code>git log(或者定制指令git mylog)</code>指令来查看，那么该指令与<code>git reflog</code>区别在哪里呢？</p><p>&emsp;&emsp;<code>git reflog</code>命令可以查看<strong>所有分支的所有操作</strong>记录信息，<strong>包括</strong>已经被删除的 <code>commit</code> 记录和 <code>reset</code> 的操作。</p><p>&emsp;&emsp;<code>git log</code>命令可以显示<strong>当前分支所有提交过</strong>的版本信息，<strong>不包括</strong>已经被删除的 <code>commit</code> 记录和<code>reset</code>的操作。(注意: 只是当前分支操作的信息)。</p><p>&emsp;&emsp;所以，当我们回滚版本回滚错了的时候，想要恢复回滚之前的版本的话，<code>git reflog</code>就为该操作的实现提供了可能。</p><ul><li>实际操作</li></ul><p>&emsp;&emsp;到目前为止，<code>Hector</code>的环境检测项目已经开发了两个功能：温度检测(<code>Temperature detection</code>)和湿度检测(<code>Humidity detection</code>)两个功能，并且每个功能完成时都进行了单独的提交。</p><table>    <tr>        <td align="center" width=150px>文件名称</td>        <td align="center">文件内容</td>    </tr>    <tr>        <td align="center" width=150px>program.c</td>        <td align="left">            1.Temperature detection<br>            <br>            2.Humidity detection</td>    </tr>    <tr>        <td align="center" width=150px>readme.md</td>        <td align="left">            1.温度检测功能开发完毕<br>            <br>            2.湿度检测功能开发完毕</td>    </tr>    <tr>        <td align="center" width=150px>提交记录</td>        <td align="center"><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110221729303.png" alt="image-20220110221729303" width="60%" heigh="60%"/></td>    </tr></table><p>（1）回到温度检测版本</p><p>&emsp;&emsp;项目在一段时间后要向老师演示功能，但是老师说湿度检测功能不需要了，也不需要演示，同时湿度检测功能还有些小问题，为了完美展示温度检测功能，最好就是删除湿度检测功能，这就需要回滚版本到只开发了温度检测的时候了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git mylog          # 此处使用 mylog，以便于后边作对比</span><br><span class="line">git reset --hard bf5d364</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=150px>文件名称</td>        <td align="center">文件内容</td>    </tr>    <tr>        <td align="center" width=150px>program.c</td>        <td align="left">            1.Temperature detection<br>        </td>    </tr>    <tr>        <td align="center" width=150px>readme.md</td>        <td align="left">            1.温度检测功能开发完毕<br>        </td>    </tr>    <tr>        <td align="center" width=150px>提交记录</td>        <td align="center"><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110223445564.png" alt="image-20220110223445564" width="60%" heigh="60%"/></td>    </tr></table><p>&emsp;&emsp;可以发现，版本回到了温度开发的版本，文件也发生了相应的变化，从提交记录中也可以看出<code>git log</code>与<code>git reflog</code>的区别。</p><p>（2）回到湿度检测开发版本</p><p>&emsp;&emsp;湿度检测也是环境检测的一项功能，虽然说老师并未要求，但是要是能做出来，这样也是极好的。但是两人一想，完了，刚才不是回到温度检测版本，把湿度检测的历史纪录删掉了吗？他们就要重新开发嘛？那不是很浪费时间，那有没有什么方法呢？当然有，依然是使用上边回到指定版本的命令，但是需要知道版本号啊，这怎么办呢？<code>Git</code>为用户提供了另外一个查看版本提交历史纪录的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该命令就可以显示出所有的提交记录，包括已经删除的，所以运行以下命令可得表中数据。</p><table>    <tr>        <td align="center" width=150px>文件名称</td>        <td align="center">文件内容</td>    </tr>    <tr>        <td align="center" width=150px>program.c</td>        <td align="left">            1.Temperature detection<br>            <br>            2.Humidity detection</td>    </tr>    <tr>        <td align="center" width=150px>readme.md</td>        <td align="left">            1.温度检测功能开发完毕<br>            <br>            2.湿度检测功能开发完毕</td>    </tr>    <tr>        <td align="center" width=150px>提交记录</td>        <td align="center"><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220110225140989.png" alt="image-20220110225140989" width="70%" heigh="70%"/></td>    </tr></table><p> 可以发现，又回到了拥有湿度开发的版本。</p><h3 id="3-4分支的应用"><a href="#3-4分支的应用" class="headerlink" title="3.4分支的应用"></a><font size=3>3.4分支的应用</font></h3><ul><li>概念</li></ul><p>&emsp;&emsp;分支的大概原理思路，如下流程图中，<code>V1</code>和<code>V2</code>只是保存了修改信息，而不是复制了原程序，再进行开发，在<code>V2</code>节点，在新功能<code>B</code>开发过程中，<code>V2</code>出现了<code>BUG</code>，这个时候需要保留<code>B</code>的新功能，而又要修复<code>BUG</code>，此时可以新建分支修复<code>BUG</code>，此时在<code>BUG C1</code>中进行修复，新功能<code>B</code>也可以正常开发，当完成之后将他们都<strong>合并</strong>到主分支上去。分支的存在就保证了可以份个除开单独的空间做其他的事情，不同的分支不会互相影响。<br>&emsp;&emsp;所以在使用<code>Git</code>进行版本控制的时候建议创建至少两个分支，主分支用于正式版本程序发布，另外分支用于版本的更新迭代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[主程序]</span><br><span class="line">A1[V1]--版本升级--&gt;A</span><br><span class="line">A2[V2]--版本升级--&gt;A1[V1]</span><br><span class="line">B1[新功能B]--新功能开发--&gt;A2[V2]</span><br><span class="line">C1[BUG C1]--修复BUG--&gt;A2[V2]</span><br></pre></td></tr></table></figure><ul><li>命令格式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch name&gt;   # 创建分支</span><br><span class="line"></span><br><span class="line">git checkout &lt;branch name&gt; # 切换分支</span><br><span class="line"></span><br><span class="line">git checkout -b &lt;branch name&gt; # 创建并切换到创建的分支</span><br><span class="line"></span><br><span class="line">git merge &lt;branch name&gt;       # 合并分支（要先切换回要合并到的分支）</span><br><span class="line"></span><br><span class="line">git branch -d &lt;branch name&gt;   # -d 删除已合并分支</span><br><span class="line"></span><br><span class="line">git branch -D &lt;branch name&gt;   # -D 强制删除分支，不管是否已经合并</span><br><span class="line"></span><br><span class="line">git branch    # 得到当前所有分支的一个列表</span><br><span class="line"></span><br><span class="line">git branch -v # 查看每一个分支的最后一次提交</span><br><span class="line"></span><br><span class="line">git branch --merged    # 查看哪些分支已经合并到当前分支</span><br><span class="line"></span><br><span class="line">git branch --no-merged # 查看所有包含未合并工作的分支</span><br></pre></td></tr></table></figure><p>【注意】</p><p>&emsp;&emsp;1.在进行分支的切换或者其他操作时，一定要保证所有的文件都已经在本地版本库中被管理，也就是说，一定要<strong>提交所有文件之后再进行分支操作</strong>，否则可能会带来意想不到的问题。</p><p>&emsp;&emsp;2.新的分支创建之后所有分支的内容、提交记录等<strong>完全一样</strong>。</p><ul><li>实际操作</li></ul><p>&emsp;&emsp;上文说道，他们已经恢复了湿度检测功能的相关代码，随后也修复了湿度检测功能的小问题，所以接下来要继续开发新动能，光照强度检测功能。但不幸的是，纲要进行新功能开发，湿度检测功能就出现了<code>BUG</code>，需要进行修复，但是新功能的开发也不能停下，修复<code>BUG</code>和新功能开发要同时进行，并且不能互相影响，他们这个时候就需要用到分支的功能了。</p><p>【分支创建】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建分支</span></span><br><span class="line">git branch newfunction    # 用于新功能开发</span><br><span class="line">git branch bug            # 用于修复bug</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前所有分支</span></span><br><span class="line">git branch</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111112256553.png" alt="image-20220111112256553" style="zoom:67%;" /><p>可以发现，已经创建了新的分支，但是目前还是在主分支<code>master</code>。</p><p>【新功能开发部分】</p><p>（1）切换到<code>newfunction</code>分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout newfunction</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111112757931.png" alt="image-20220111112757931" style="zoom:67%;" /><p>（2）开始光照强度检测功能开发</p><p>&emsp;&emsp;切换到<code>newfunction</code>分支后，便可以进行新功能开发了，修改完相应文件后进行提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status -s</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Light intensity detection.&quot;</span><br><span class="line">git mylog</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=150px>文件名称</td>        <td align="center">文件内容</td>    </tr>    <tr>        <td align="center" width=150px>program.c</td>        <td align="left">            1.Temperature detection<br>            <br>            2.Humidity detection<br>            <br>            3.Light intensity detection        </td>    </tr>    <tr>        <td align="center" width=150px>readme.md</td>        <td align="left">            1.温度检测功能开发完毕<br>            <br>            2.湿度检测功能开发完毕<br>            <br>            3.光照强度检测功能开发完毕</td>    </tr>    <tr>        <td align="center" width=150px>提交记录</td>        <td align="center"><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111113216612.png" alt="image-20220111113216612" width="70%" heigh="70%"/></td>    </tr></table><p>【<code>BUG</code>修复部分】</p><p>（1）切换到<code>BUG</code>分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout bug</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111113445755.png" alt="image-20220111113445755" style="zoom:67%;" /><p>可以发现，不同的分支是相互独立，互不影响的。</p><p>（2）开始<code>BUG</code>修复</p><p>&emsp;&emsp;切换到<code>BUG</code>分支后，便可以进行<code>BUG</code>修复了，修改完相应文件后进行提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status -s</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;BUG fix.&quot;</span><br><span class="line">git mylog</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=150px>文件名称</td>        <td align="center">文件内容</td>    </tr>    <tr>        <td align="center" width=150px>program.c</td>        <td align="left">            1.Temperature detection<br>            <br>            2.Humidity detection<br>            &emsp;&emsp;bug1--->Restored<br>            &emsp;&emsp;bug2--->Restored<br>            &emsp;&emsp;bug3--->Restored<br>            &emsp;&emsp;bug4--->Restored<br>        </td>    </tr>    <tr>        <td align="center" width=150px>readme.md</td>        <td align="left">            1.温度检测功能开发完毕<br>            <br>            2.湿度检测功能开发完毕<br>            &emsp;&emsp;bug1--->已修复<br>            &emsp;&emsp;bug2--->已修复<br>            &emsp;&emsp;bug3--->已修复<br>            &emsp;&emsp;bug4--->已修复<br>            </td>    </tr>    <tr>        <td align="center" width=150px>提交记录</td>        <td align="center"><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111114426711.png" alt="image-20220111114426711" width="70%" heigh="70%"/></td>    </tr></table><p>【合并分支部分】</p><p>&emsp;&emsp;当新功能和<code>BUG</code>修复的相关程序都已经完成时，就需要进行分支的合并了。</p><p>（1）切换回<code>master</code>分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>（2）查看<code>master</code>分支相关文件及提交记录</p><table>    <tr>        <td align="center" width=150px>文件名称</td>        <td align="center">文件内容</td>    </tr>    <tr>        <td align="center" width=150px>program.c</td>        <td align="left">            1.Temperature detection<br>            <br>            2.Humidity detection</td>    </tr>    <tr>        <td align="center" width=150px>readme.md</td>        <td align="left">            1.温度检测功能开发完毕<br>            <br>            2.湿度检测功能开发完毕</td>    </tr>    <tr>        <td align="center" width=150px>提交记录</td>        <td align="center"><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111114909730.png" alt="image-20220111114909730" width="70%" heigh="70%"/></td>    </tr></table><p>可以发现，所有文件及提交记录并未发生变化。</p><p>（3）合并<code>BUG</code>分支到<code>master</code></p><p>&emsp;&emsp;要注意将一个分支合并到另一个分支的时候，要提前切换回另一个分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 确保切换回master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并分支</span></span><br><span class="line">git merge bug</span><br></pre></td></tr></table></figure><table>    <tr>        <td align="center" width=150px>文件名称</td>        <td align="center">文件内容</td>    </tr>    <tr>        <td align="center" width=150px>program.c</td>        <td align="left">            1.Temperature detection<br>            <br>            2.Humidity detection<br>            &emsp;&emsp;bug1--->Restored<br>            &emsp;&emsp;bug2--->Restored<br>            &emsp;&emsp;bug3--->Restored<br>            &emsp;&emsp;bug4--->Restored<br>        </td>    </tr>    <tr>        <td align="center" width=150px>readme.md</td>        <td align="left">            1.温度检测功能开发完毕<br>            <br>            2.湿度检测功能开发完毕<br>            &emsp;&emsp;bug1--->已修复<br>            &emsp;&emsp;bug2--->已修复<br>            &emsp;&emsp;bug3--->已修复<br>            &emsp;&emsp;bug4--->已修复<br>            </td>    </tr>    <tr>        <td align="center" width=150px>提交记录</td>        <td align="center"><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111115224354.png" alt="image-20220111115224354" width="70%" heigh="70%"/></td>    </tr></table><p>发现文件与<code>BUG</code>分支的内容保持一致，提交记录也多了<code>BUG</code>分支的提交记录。</p><p>（4）合并<code>newfunction</code>分支到<code>master</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 确保切换回master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并分支</span></span><br><span class="line">git merge newfunction</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;此时，问题出现了，如下图所示。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111115543384.png" alt="image-20220111115543384" style="zoom:67%;" /><p>&emsp;&emsp;从结果可知，文件合并时出现了冲突，那么接下来，就看一看<code>master</code>分支的文件内容及提交记录是怎样的。</p><table>    <tr>        <td align="center" width=150px>文件名称</td>        <td align="center">文件内容</td>    </tr>    <tr>        <td align="center" width=150px>program.c</td>        <td align="left">            1.Temperature detection<br>            <br>            2.Humidity detection<br>            <<<<<<< HEAD <br>            &emsp;&emsp;bug1--->Restored<br>            &emsp;&emsp;bug2--->Restored<br>            &emsp;&emsp;bug3--->Restored<br>            &emsp;&emsp;bug4--->Restored<br>            =======<br>            <br>            3.Light intensity detection<br>            >>>>>>> newfunction<br>        </td>    </tr>    <tr>        <td align="center" width=150px>readme.md</td>        <td align="left">            1.温度检测功能开发完毕<br>            <br>            2.湿度检测功能开发完毕<br>            <<<<<<< HEAD <br>            &emsp;&emsp;bug1--->已修复<br>            &emsp;&emsp;bug2--->已修复<br>            &emsp;&emsp;bug3--->已修复<br>            &emsp;&emsp;bug4--->已修复<br>            =======<br>            <br>            3.光照强度功能开发完毕<br>            >>>>>>> newfunction<br>        </td>    </tr>    <tr>        <td align="center" width=150px>提交记录</td>        <td align="center"><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111120142018.png" alt="image-20220111120142018" width="70%" heigh="70%"/></td>    </tr></table><p>&emsp;&emsp;从文件内容分析，创建了两个分支，这样的话三个分支的内容完全一致，在每个分支进行的操作，修改等互不影响。但是，在<code>git</code>中，这三个分支实际上使用的是<strong>同一个文件</strong>，同一个文件的同一行在不同的分支中代表不同的内容时，我们又要进行合并，那么此时内容会进行合并，都会显示在文件中，但是就会出现冲突以及冲突点的标记，这个时候需要我们手动来确认文件内容。从提交记录分析，合并分支后出现冲突，<code>newfunction</code>分支上的提交记录并未一起合并过来。那么接下来，我们就修改文件，重新提交。</p><table>    <tr>        <td align="center" width=150px>文件名称</td>        <td align="center">文件内容</td>    </tr>    <tr>        <td align="center" width=150px>program.c</td>        <td align="left">            1.Temperature detection<br>            <br>            2.Humidity detection<br>            &emsp;&emsp;bug1--->Restored<br>            &emsp;&emsp;bug2--->Restored<br>            &emsp;&emsp;bug3--->Restored<br>            &emsp;&emsp;bug4--->Restored<br>            <br>            3.Light intensity detection<br>        </td>    </tr>    <tr>        <td align="center" width=150px>readme.md</td>        <td align="left">            1.温度检测功能开发完毕<br>            <br>            2.湿度检测功能开发完毕<br>            &emsp;&emsp;bug1--->已修复<br>            &emsp;&emsp;bug2--->已修复<br>            &emsp;&emsp;bug3--->已修复<br>            &emsp;&emsp;bug4--->已修复<br>            <br>            3.光照强度功能开发完毕<br>        </td>    </tr>    <tr>        <td align="center" width=150px>提交记录</td>        <td align="center"><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111121644396.png" alt="image-20220111121644396" width="70%" heigh="70%"/></td>    </tr></table><p>（5）删除已合并分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d bug</span><br><span class="line">git branch -d newfunction</span><br></pre></td></tr></table></figure><h3 id="3-5git-rebase"><a href="#3-5git-rebase" class="headerlink" title="3.5git rebase"></a><font size=3>3.5<code>git rebase</code></font></h3><h4 id="3-5-1rebase介绍"><a href="#3-5-1rebase介绍" class="headerlink" title="3.5.1rebase介绍"></a><font size=3>3.5.1<code>rebase</code>介绍</font></h4><p>&emsp;&emsp;<code>rebase</code>中文名字叫变基，它主要有两个方面的应用，第一方面是合并提交记录，使提交变得简洁。第二个方面是用于整合分支。具体情况可以继续往下阅读，通过实例，可能会更容易理解些。</p><h4 id="3-5-2应用场景一：合并提交记录"><a href="#3-5-2应用场景一：合并提交记录" class="headerlink" title="3.5.2应用场景一：合并提交记录"></a><font size=3>3.5.2应用场景一：合并提交记录</font></h4><p>&emsp;&emsp;<code>rebase</code>可以让提交历史变得简洁，试想一下，一个功能的开发需要将近一个月的时间才能完成，在这一个月中不可能一次都不提交，这样提交的多了，提交记录就会显得特别的冗杂，这可不是大家希望看到的，这时候就会想，要是提交记录能合并该多好，于是<code>Git</code>中的<code>rebease</code>就为这种想法提供了可能。</p><p>&emsp;&emsp;要注意的就是，最好不要合并已经推送到**远程分支(后边再讲，这里先提一下)**的提交记录，否则会比较麻烦，可能会报以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: cannot &#x27;squash&#x27; without a previous commit</span><br></pre></td></tr></table></figure><ul><li>命令格式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.合并从当前开始的前n个记录（包括当前）</span></span><br><span class="line">git rebase -i HEAD~n  # n 为要合并的提交记录数</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. git调用编辑器，用户输入相应内容</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 若是vim编辑器，则进入命令模式后用 :wq 保存退出</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    若是emacs(Git默认编辑器)，则按照屏幕下方的提示进行保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 其他相关命令</span></span><br><span class="line">git rebase --edit-todo # 异常退出编辑器时，该命令可重新打开编辑器</span><br><span class="line">git rebase --continue</span><br><span class="line">git rebase --abort     # 终止变基(终止合并提交记录)</span><br></pre></td></tr></table></figure><p>编辑器中的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> p, pick &lt;提交&gt; == 使用提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> r, reword &lt;提交&gt; == 使用提交，但编辑提交说明</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> e, edit &lt;提交&gt; == 使用提交，但停止以便在 shell 中修补提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> s, squash &lt;提交&gt; == 使用提交，但挤压到前一个提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> f, fixup [-C | -c] &lt;提交&gt; == 类似于 <span class="string">&quot;squash&quot;</span>，但只保留前一个提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                            的提交说明，除非使用了 -C 参数，此情况下则只</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                            保留本提交说明。使用 -c 和 -C 类似，但会打开</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                            编辑器修改提交说明</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> x, <span class="built_in">exec</span> &lt;命令&gt; == 使用 shell 运行命令（此行剩余部分）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> b, <span class="built_in">break</span> = 在此处停止（使用 <span class="string">&#x27;git rebase --continue&#x27;</span> 继续变基）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> d, drop &lt;提交&gt; = 删除提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> l, label &lt;label&gt; = 为当前 HEAD 打上标记</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> t, reset &lt;label&gt; = 重置 HEAD 到该标记</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [<span class="comment"># &lt;oneline&gt;]</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .       创建一个合并提交，并使用原始的合并提交说明（如果没有指定</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .       原始提交，使用注释部分的 oneline 作为提交说明）。使用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .       -c &lt;提交&gt; 可以编辑提交说明。</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># 可以对这些行重新排序，将从上至下执行。</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># 如果您在这里删除一行，对应的提交将会丢失。</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># 然而，如果您删除全部内容，变基操作将会终止。</span></span></span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure><p>【注意】：</p><p>&emsp;&emsp;1.至少要有三次提交时才可以进行提交记录合并，也就是说，其他的提交记录不能与第一条提交记录合并，否则会报<code>fatal: 无效的上游 &#39;HEAD~2&#39;</code>。</p><p>&emsp;&emsp;2.在进入编辑器后，第一行的<code>pick</code>不要修改，其他的<code>pick</code>要改为<code>s</code>，这样提交记录才能进行合并，若是全部改为<code>s</code>则会报以下问题，出现该问题时，可以先终止，再重新合并。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111154643834.png" alt="image-20220111154643834" style="zoom:67%;" /><ul><li>实际操作</li></ul><p>&emsp;&emsp;<code>Hector</code>和<code>Andrea</code>在完成光照强度检测功能开发后，进入了摄像头采集图像信息的功能开发，该部分工作量较大，他们提交了很多的历史记录，看着非常的复杂，现在，他们想把前期采集图像的提交记录合并，那么怎么操作呢？他们之前提交的相关提交记录如下：</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111160758415.png" alt="image-20220111160758415" style="zoom:67%;" /><p>（1）合并提交记录命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 合并从当前开始的前两个记录（包括当前）</span></span><br><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>（2）修改编辑器中命令</p><p>&emsp;&emsp;按照图中标记的三步进行即可。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111161412252.png" alt="image-20220111161412252" style="zoom:67%;" /><p>（3）修改合并后的提交说明</p><p>&emsp;&emsp;上一步完成后，会再次进入编辑器编辑模式，这一次是修改合并后需要显示的提交说明。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111162007516.png" alt="image-20220111162007516" style="zoom:67%;" /><p>（4）查看提交记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mylog</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111162120258.png" alt="image-20220111162120258" style="zoom:67%;" /><p>&emsp;&emsp;由图可知，合并完提交记录后，三次提交变成了一次，当有很多提交时，可以按照此方法进行合并，以使提交记录简洁明了。</p><h4 id="3-5-3应用场景二：合并分支"><a href="#3-5-3应用场景二：合并分支" class="headerlink" title="3.5.3应用场景二：合并分支"></a><font size=3>3.5.3应用场景二：合并分支</font></h4><ul><li>原理介绍(参考<a href="https://git-scm.com/book/zh/v2/Git-分支-变基">官方文档:<code>3.6 Git 分支 - 变基</code></a>)</li></ul><p>&emsp;&emsp;在 <code>Git</code> 中整合来自不同分支的修改主要有两种方法：<code>merge</code> 以及 <code>rebase</code>，<code>merge</code>我们之前已经使用过了，这里主要介绍<code>rebase</code>。在这里举一个栗子：如下图所示，图中箭头是反方向，原因就是看法不同，箭头朝右表示版本的更迭，箭头朝左表示后一个版本由前一个版本修改提交而来。</p><p>&emsp;&emsp;主分支<code>master</code>上已经有了<code>V0</code>&rarr;<code>V1</code>&rarr;<code>V2</code>&rarr;<code>V3</code>四个版本的提交历史，在<code>V2</code>版本的时候，新建了分支<code>Dev</code>，随后进行代码修改，进行一次提交，形成了<code>V3</code>版本的程序。</p><p>&emsp;&emsp;对于功能开发分支<code>Dev</code>，它是从<code>master</code>分支上的<code>V2</code>版本处新建的分支，并进行了一次提交，形成了<code>V4</code>版本的提交记录。</p><p>&emsp;&emsp;此时这两个分支还未进行任何操作，依然相互独立，互不影响。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111210355418.png" alt="image-20220111210355418" style="zoom:67%;" /><p  align="center">图3.5.3-1 两个分支的提交历史</p><p>（1）通过<code>merge</code>合并分支</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111211716416.png" alt="image-20220111211716416" style="zoom:67%;" /><p  align="center">图3.5.3-2 merge合并分支以整合文件和提交历史</p><p>&emsp;&emsp;整合分支最容易的方法是 <code>merge</code> 命令。 它会把两个分支的最新快照（<code>V3</code>和<code>V4</code>）以及二者最近的共同祖先（<code>V2</code>）进行三方合并，合并的结果是生成一个新的快照（<code>V5</code>）（并提交）。这样做的结果就是通过<code>git log --graph</code>来打印提交记录的时候，会产生分叉，类似于这种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*---*---*---*---*</span><br><span class="line">         \     /</span><br><span class="line">          --*--</span><br></pre></td></tr></table></figure><p>（2）通过<code>rebase</code>合并</p><p>&emsp;&emsp;若是在<code>图3.5.3-1</code>中，不使用<code>merge</code>，而是提取在<code>Dev</code>分支<code>V4</code>版本中引入的补丁和修改，然后在<code>master</code>分支上进行一次应用，也就是说将<code>Dev</code>分支<code>V4</code>中所作的修改直接添加到<code>master</code>分支的<code>V3</code>中。在 <code>Git</code> 中，这种操作就叫做<strong>变基（<code>rebase</code>）</strong>。我们可以使用 <code>rebase</code> 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111213504887.png" alt="image-20220111213504887" style="zoom:67%;" /><p  align="center">图3.5.3-3 rebease将V4的修改变基到V3上</p><p>&emsp;&emsp;执行以下命令，完成变基：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 终端中输入的命令</span></span><br><span class="line">git checkout Dev</span><br><span class="line">git rebase master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 终端中显示的提示(官方文档提供)</span></span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: added staged command</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 终端中显示的提示(自己实践显示)</span></span><br><span class="line">成功变基并更新 refs/heads/Dev。</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;它的原理是首先找到这两个分支（即当前分支 <code>Dev</code>、变基操作的目标基底分支 <code>master</code>） 的最近共同祖先 <code>V2</code>，然后对比当前分支相对于该祖先的历次提交，<strong>提取相应的修改并存为临时文件</strong>， 然后将当前分支（<code>Dev</code>分支）指向目标基底（<code>master</code>） <code>V3</code>，最后以此将之前另存为临时文件的修改依序应用。<strong>【注意】此时在<code>Dev</code>分支中已经包含了<code>master</code>分支中<code>V3</code>的提交历史了，但是<code>master</code>分支依然处于<code>V3</code>处</strong>。</p><p>&emsp;&emsp;回到<code>master</code>分支，进行一次快进合并（通过<code>merge</code>），注意此时也可能会有冲突出现，处理解决后正常提交一次即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge Dev</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111215818312.png" alt="image-20220111215818312" style="zoom:67%;" /><p>&emsp;&emsp;此时，<code>V4&#39;</code>指向的快照就和图3.5.3-2中<code> V5</code> 指向的快照一模一样了。 这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。 在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的， 但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*---*---*---*---*</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，首先在自己的分支里进行开发，当开发完成时需要先将的代码变基到 <code>origin/master</code> 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。</p><p>&emsp;&emsp;请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</p><p>【注意】更多例子请查看官网说明文档：<a href="https://git-scm.com/book/zh/v2/Git-分支-变基">官方文档:<code>3.6 Git 分支 - 变基</code></a></p><ul><li>实际操作</li></ul><p>&emsp;&emsp;上节讲到，<code>Hector</code>和<code>Andrea</code>已经完成了摄像头信息采集功能的提交记录合并，算是已经完成了图像采集功能。接着，他们要进行下一步了，开发新的功能二氧化碳浓度检测，而与此同时还要继续摄像头功能的下一步，完成检测到异常情况后拍摄照片功能。此时呢，他们新建了一个分支进行摄像头功能的下一步开发，新功能就直接在<code>master</code>分支上进行了开发，这样倒是没什么问题，但是通过<code>merge</code>就会使提交记录产生分叉，他们又不希望出现这样的情况，那么该怎么办呢？接下来，他们便尝试了<code>rebase</code>的方法。</p><p>【摄像头功能的继续开发（<code>dev</code>分支）】</p><p>（1）新建分支，并进行功能开发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev   # 新建分支</span><br><span class="line">git checkout dev # 切换分支开始工作</span><br></pre></td></tr></table></figure><p>（2）提交文件并查看提交记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;Camera takes pictures.&quot;</span><br><span class="line">git mylog</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111221722269.png" alt="image-20220111221722269" style="zoom:67%;" /><p>【二氧化碳浓度检测的新功能开发（<code>master</code>分支）】</p><p>（1）开发新功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.切换回master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.修改文件</span></span><br></pre></td></tr></table></figure><p>（2）提交文件并查看提交记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;CO2 concentration detection.&quot;</span><br><span class="line">git mylog</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111222618717.png" alt="image-20220111222618717" style="zoom:67%;" /><p>【通过<code>merge</code>合并】</p><p>&emsp;&emsp;为了做一个对比，这里两种方法都进行尝试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111222849245.png" alt="image-20220111222849245" style="zoom:67%;" /><p>&emsp;&emsp;合并时，<code>Git</code>会打开设置的编辑器，让用户输入合并时的提交说明。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111223035993.png" alt="image-20220111223035993" style="zoom:67%;" /><p>&emsp;&emsp;由图中可知，提交的历史的<code>ASCII图</code> 产生了分叉，为了下一步验证<code>rebase</code>，这里还需要回滚到未合并之前的时候。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 250f573</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111223412509.png" alt="image-20220111223412509" style="zoom:67%;" /><p>【通过<code>rebase</code>合并】</p><p>（1）切换到<code>dev</code>分支并执行变基命令（<code>rebase</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到dev分支</span></span><br><span class="line">git checkout dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 变基</span></span><br><span class="line">git rebase master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看带ASCII图的提交记录</span></span><br><span class="line">git mylog</span><br></pre></td></tr></table></figure><p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111223622816.png" alt="image-20220111223622816"></p><p>&emsp;&emsp;由图可知，<code>master</code>分支上的最新的提交（<code>CO2 concentration detection.</code>）也归入了<code>dev</code>分支。</p><p>（2）切换到<code>master</code>分支并进行一次快速合并（<code>merge</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看带ASCII图的提交记录</span></span><br><span class="line">git mylog</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220111224048902.png" alt="image-20220111224048902" style="zoom:67%;" /><p>&emsp;&emsp;由图中可知，<code>master</code>上的提交不再分叉，就是一条直线的提交了。<strong>【注意】<code>merge</code>的时候还是有可能会产生冲突，解决冲突后重新进行一次提交即可</strong>。</p><h1 id="三、Git——远程仓库"><a href="#三、Git——远程仓库" class="headerlink" title="三、Git——远程仓库"></a><font size=3>三、<code>Git</code>——远程仓库</font></h1><h2 id="1-Github是什么？"><a href="#1-Github是什么？" class="headerlink" title="1.Github是什么？"></a><font size=3>1.<code>Github</code>是什么？</font></h2><p>&emsp;&emsp;<code>GitHub</code>是一个面向开源及私有软件项目的<strong>托管平台</strong>，因为只支持<code>Git</code>作为唯一的版本库格式进行托管，故名<code>GitHub</code>。简单来说，<code>GitHub</code>是一个代码托管云服务网站，帮助开发者存储和管理其项目源代码，且能够追踪、记录并控制用户对其代码的修改。</p><h2 id="2-Github能做什么？"><a href="#2-Github能做什么？" class="headerlink" title="2.Github能做什么？"></a><font size=3>2.<code>Github</code>能做什么？</font></h2><ul><li>托管代码、历史版本管理</li><li>搜索开源项目</li><li>分享的同时会得到社区的回馈</li><li>使用<code>Github Pages</code>服务，可以免费搭建一个博客网站</li><li>学习，能力提升</li><li>提升自己的影响力</li></ul><h2 id="3-Github与Git有什么关系？"><a href="#3-Github与Git有什么关系？" class="headerlink" title="3.Github与Git有什么关系？"></a><font size=3>3.<code>Github</code>与<code>Git</code>有什么关系？</font></h2><p>&emsp;&emsp;简单来说，<code>Git</code>只是一个<strong>命令行工具</strong>，一个<strong>分布式版本控制系统</strong>。正是它在背后管理和跟踪你的代码历史版本，好比一个时光机，让你在代码出错时不至于手忙脚乱，能快速回退之前的历史版本。 类似的工具还有<code>SVN</code>。</p><p>&emsp;&emsp;而<code>GitHub</code>是一个代码托管网站，背后使用<code>Git</code>作为版本管理工具（而非<code>svn</code>）。主要服务是将你的项目代码托管到云服务器上，而非存储在自己本地硬盘上。类似的网站还有<code>gitlab.com，bitbucket.com，coding.com(国内)，gitee.com(国内)</code></p><h2 id="4-为什么要用Github托管代码？"><a href="#4-为什么要用Github托管代码？" class="headerlink" title="4.为什么要用Github托管代码？"></a><font size=3>4.为什么要用<code>Github</code>托管代码？</font></h2><p>&emsp;&emsp;试想一下，当我们需要在两个不同且间隔很远的地方来回奔波，并且还要写代码的时候，代码在本地电脑里边，但是我们总不能到处都带着电脑吧，很简单的一个想法，我们可以用硬盘啊，或者云盘，保存一份代码，只带着硬盘或者从云盘里边下载，这样不就解决了携带电脑的不便问题了吗？没错，<code>GitHub</code>就是一个大型的托管平台，这个平台可以实现团队协作，也可以同步提交记录，无疑是提供了巨大的方便。</p><h2 id="5-Github经常打不开怎么办？"><a href="#5-Github经常打不开怎么办？" class="headerlink" title="5.Github经常打不开怎么办？"></a><font size=3>5.<code>Github</code>经常打不开怎么办？</font></h2><h3 id="5-1手动查询并修改hosts文件"><a href="#5-1手动查询并修改hosts文件" class="headerlink" title="5.1手动查询并修改hosts文件"></a><font size=3>5.1手动查询并修改<code>hosts</code>文件</font></h3><p>【说明】也有可能没啥用，但是网上好多这种方法的说明。</p><ul><li>三个网址</li></ul><table>    <tr>        <td align="center">GitHub网址IP查询</td>        <td align="left"><a href="https://ipaddress.com/website/github.com">GitHub.com</a></td>    </tr>    <tr>        <td align="center">GitHub域名查询</td>        <td align="left"><a href="https://ipaddress.com/website/github.global.ssl.fastly.net">github.global.ssl.Fastly.net</a></td>    </tr>    <tr>        <td align="center">GitHub静态资源IP</td>        <td align="left"><a href="https://ipaddress.com/website/assets-cdn.github.com">assets-cdn.Github.com</a></td>    </tr></table><ul><li><code>host</code>文件</li></ul><table>    <tr>        <td align="center">Linux</td>        <td align="left">/etc/hosts</td>    </tr>    <tr>        <td align="center">Windows</td>        <td align="left">C:\Windows\System32\drivers\etc\hosts</td>    </tr></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在结尾添加以下内容，注意前边地址要以查询到的为准</span><br><span class="line">140.82.112.3 github.com</span><br><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">185.199.108.153 assets-cdn.github.com</span><br><span class="line">185.199.110.153 assets-cdn.github.com</span><br><span class="line">185.199.111.153 assets-cdn.github.com</span><br></pre></td></tr></table></figure><ul><li>使用<code>CMD</code>命令刷新<code>dns</code>缓存</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><h3 id="5-2软件查询并修改hosts文件"><a href="#5-2软件查询并修改hosts文件" class="headerlink" title="5.2软件查询并修改hosts文件"></a><font size=3>5.2软件查询并修改<code>hosts</code>文件</font></h3><p>【说明】此款软件可以查询延迟，操作相对容易，而且自己试了下，用的时候有效。</p><ul><li>软件截图</li></ul><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220112163849973.png" alt="image-20220112163849973" style="zoom:50%;" /><ul><li>软件地址</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.dogfight360.com/blog/475/</span><br></pre></td></tr></table></figure><p>【说明】软件来自：<a href="https://www.dogfight360.com/blog/">羽翼城个人博客</a></p><h2 id="6-怎样使用Github？"><a href="#6-怎样使用Github？" class="headerlink" title="6.怎样使用Github？"></a><font size=3>6.怎样使用<code>Github</code>？</font></h2><h3 id="6-1注册Github账号"><a href="#6-1注册Github账号" class="headerlink" title="6.1注册Github账号"></a><font size=3>6.1注册<code>Github</code>账号</font></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/</span><br></pre></td></tr></table></figure><p>进入网站后，点击<code>sign up</code>即可开始注册</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220112164049972.png" alt="image-20220112164049972" style="zoom: 33%;" /><h3 id="6-2新建仓库"><a href="#6-2新建仓库" class="headerlink" title="6.2新建仓库"></a><font size=3>6.2新建仓库</font></h3><ul><li>【头像左侧】&rarr;【<code>+</code>号】&rarr;【<code>New repository</code>】</li></ul><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220112164554671.png" alt="image-20220112164554671" style="zoom:80%;" /><ul><li>输入仓库相关信息，并创建即可</li></ul><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220112165056498.png" alt="image-20220112165056498" style="zoom:50%;" /><h3 id="6-3相关命令"><a href="#6-3相关命令" class="headerlink" title="6.3相关命令"></a><font size=3>6.3相关命令</font></h3><p>【本地版本库与远程仓库相关命令】</p><ul><li>克隆</li></ul><table>    <tr>        <td align="center">git-clone</td>        <td align="left"><a href="https://git-scm.com/docs/git-clone/en#_name">https://git-scm.com/docs/git-clone/en#_name</a></td>    </tr></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 克隆相关操作</span></span><br><span class="line">git clone &lt;repository_url&gt;  # clone仓库</span><br><span class="line">git clone &lt;repository_url&gt; another-repository-name # clone下来的仓库存储为其他名称</span><br></pre></td></tr></table></figure><ul><li>推送与拉取</li></ul><table>    <tr>        <td align="center">git-remote</td>        <td align="left"><a href="https://git-scm.com/docs/git-remote#_name">https://git-scm.com/docs/git-remote#_name</a></td>    </tr>    <tr>        <td align="center">git-push</td>        <td align="left"><a href="https://git-scm.com/docs/git-push#_name">https://git-scm.com/docs/git-push#_name</a></td>    </tr>    <tr>        <td align="center">git-pull</td>        <td align="left"><a href="https://git-scm.com/docs/git-pull#_name">https://git-scm.com/docs/git-pull#_name</a></td>    </tr></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加本地仓库与远程仓库链接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> name为远程仓库地址设置一个别名，也可以为其他</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> url为仓库地址</span></span><br><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br><span class="line"></span><br><span class="line">git remote                       # 列出每个远程库的简短名字</span><br><span class="line"></span><br><span class="line">git remote -v                    # 直接显示对应的克隆地址</span><br><span class="line"></span><br><span class="line">git remote remove &lt;name&gt;         # 删除本地仓库与远程仓库关联</span><br><span class="line"></span><br><span class="line">git push -u &lt;name&gt; &lt;branch name&gt; # 将本地仓库文件上传到远程仓库分支</span><br><span class="line"></span><br><span class="line">git pull &lt;name&gt; &lt;远程分支名&gt;       # 从远程仓库更新本地仓库版本,远程分支与本地当前分支合并</span><br><span class="line"></span><br><span class="line">git pull &lt;name&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; # 从远程仓库更新本地仓库版本,远程分支与本地当前分支合并</span><br></pre></td></tr></table></figure><h3 id="6-4实际操作"><a href="#6-4实际操作" class="headerlink" title="6.4实际操作"></a><font size=3>6.4实际操作</font></h3><p>&emsp;&emsp;<code>Hector</code>和<code>Andrea</code>已经完成了大部分的功能，但是此时他要课程也多了起来，实验代码却都在实验室的电脑上，他们去实验室的时间少了许多。他们希望回到宿舍依然可以进行代码开发，所以他们想到了<code>GitHub</code>。</p><ul><li>添加本地仓库与远程仓库的联系</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:qidaink/environment.git # 添加本地仓库与远程仓库链接 </span><br><span class="line">git remote -v  # 直接显示对应的克隆地址</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220115085456790.png" alt="image-20220115085456790" style="zoom:67%;" /><ul><li><code>push</code>程序到<code>GitHub</code>上</li></ul><p>&emsp;&emsp;登陆自己的<code>GitHub</code>账号并进入相应的远程仓库地址，会发现<code>master</code>分支上的所有数据以及提交记录（与前边最后一次提交后的记录一致），全部都会显示在自己的远程仓库，要注意没有推送的分支是不会显示在<code>GitHub</code>远程仓库的，如果想要推送其他分支，在推送的时候写相应的分支即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master # 推送master分支</span><br><span class="line">git push -u origin dev    # 推送dev分支</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220115085735892.png" alt="image-20220115085735892" style="zoom:67%;" /><ul><li>克隆仓库</li></ul><p>&emsp;&emsp;回到宿舍后，他们需要<code>clone</code>一份程序到本地，怎么操作呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:qidaink/environment.git test</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220115091311253.png" alt="image-20220115091311253" style="zoom:67%;" /><p>&emsp;&emsp;进入<code>test</code>文件夹，查看各项信息，会发现提交记录与文件都在，唯独缺少了<code>dev</code>分支，实际上该分支已经被下载下来了，我们可直接切换分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git mylog        # 查看提交记录</span><br><span class="line">git branch       # 查看分支</span><br><span class="line">git checkout dev # 直接切换分支</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220115091550777.png" alt="image-20220115091550777" style="zoom:67%;" /><h1 id="四、Git——beyond-compare"><a href="#四、Git——beyond-compare" class="headerlink" title="四、Git——beyond compare"></a><font size=3>四、<code>Git</code>——<code>beyond compare</code></font></h1><p>&emsp;&emsp;在<code>Ubuntu</code>环境下，有时候文件多的话，合并分支时产生的冲突可能也会很多，我们不能保证每一个文件都不漏，所以这款软件——<code>beyond compare</code>，会给我们带来很大的帮助。</p><h2 id="4-1简介"><a href="#4-1简介" class="headerlink" title="4.1简介"></a><font size=3>4.1简介</font></h2><p>&emsp;&emsp;<a href="https://www.scootersoftware.com/">Beyond Compare</a>是一套由Scooter Software推出的文件比较工具。主要用途是对比两个文件夹或者文件，并将差异以颜色标示。比较范围包括目录，文档内容等，可以用于git中合并分支的时候快速解决冲突。</p><h2 id="4-2安装与配置"><a href="#4-2安装与配置" class="headerlink" title="4.2安装与配置"></a><font size=3>4.2安装与配置</font></h2><table>    <tr>        <td align="center">官方安装教程</td>        <td align="left"><a href="https://www.scootersoftware.com/download.php?zz=kb_linux_install">Linux Installation Instructions</a></td>    </tr></table><ul><li>下载安装包</li></ul><p>&emsp;&emsp;下载网址：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.scootersoftware.com/download.php</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;选择<code>Linux</code>中的64位<code>Debian</code>包下载，如果用以下命令下载速度特别慢的话，可以直接浏览器下载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.scootersoftware.com/bcompare-4.4.1.26165_amd64.deb</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><ul><li>安装软件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入deb所在文件夹，执行以下命令</span></span><br><span class="line">cd ~</span><br><span class="line">sudo apt install ./bcompare-4.4.1.26165_amd64.deb</span><br></pre></td></tr></table></figure><ul><li>卸载软件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove bcompare</span><br></pre></td></tr></table></figure><ul><li>安装密钥</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入相应文件夹</span></span><br><span class="line">cd /usr/lib/beyondcompare/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行以下命令</span></span><br><span class="line">sudo sed -i &quot;s/keexjEP3t4Mue23hrnuPtY4TdcsqNiJL-5174TsUdLmJSIXKfG2NGPwBL6vnRPddT7tH29qpkneX63DO9ECSPE9rzY1zhThHERg8lHM9IBFT+rVuiY823aQJuqzxCKIE1bcDqM4wgW01FH6oCBP1G4ub01xmb4BGSUG6ZrjxWHJyNLyIlGvOhoY2HAYzEtzYGwxFZn2JZ66o4RONkXjX0DF9EzsdUef3UAS+JQ+fCYReLawdjEe6tXCv88GKaaPKWxCeaUL9PejICQgRQOLGOZtZQkLgAelrOtehxz5ANOOqCaJgy2mJLQVLM5SJ9Dli909c5ybvEhVmIC0dc9dWH+/N9KmiLVlKMU7RJqnE+WXEEPI1SgglmfmLc1yVH7dqBb9ehOoKG9UE+HAE1YvH1XX2XVGeEqYUY-Tsk7YBTz0WpSpoYyPgx6Iki5KLtQ5G-aKP9eysnkuOAkrvHU8bLbGtZteGwJarev03PhfCioJL4OSqsmQGEvDbHFEbNl1qJtdwEriR+VNZts9vNNLk7UGfeNwIiqpxjk4Mn09nmSd8FhM4ifvcaIbNCRoMPGl6KU12iseSe+w+1kFsLhX+OhQM8WXcWV10cGqBzQE9OqOLUcg9n0krrR3KrohstS9smTwEx9olyLYppvC0p5i7dAx2deWvM1ZxKNs0BvcXGukR+/g&quot; BCompare</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;执行完毕之后，打开软件会有<code>Trial Mode Error！</code>弹窗，点击右下角的<code>Enter Key</code>，输入以下代码，出现<code>Thanks for registering</code>则表示注册成功。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--- BEGIN LICENSE KEY ---</span><br><span class="line">GXN1eh9FbDiX1ACdd7XKMV7hL7x0ClBJLUJ-zFfKofjaj2yxE53xauIfkqZ8FoLpcZ0Ux6McTyNmODDSvSIHLYhg1QkTxjCeSCk6ARz0ABJcnUmd3dZYJNWFyJun14rmGByRnVPL49QH+Rs0kjRGKCB-cb8IT4Gf0Ue9WMQ1A6t31MO9jmjoYUeoUmbeAQSofvuK8GN1rLRv7WXfUJ0uyvYlGLqzq1ZoJAJDyo0Kdr4ThF-IXcv2cxVyWVW1SaMq8GFosDEGThnY7C-SgNXW30jqAOgiRjKKRX9RuNeDMFqgP2cuf0NMvyMrMScnM1ZyiAaJJtzbxqN5hZOMClUTE+++</span><br><span class="line">--- END LICENSE KEY -----</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220115092850422.png" alt="image-20220115092850422" style="zoom: 50%;" /><p>注册成功如下图所示</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220115092935369.png" alt="image-20220115092935369" style="zoom: 50%;" /><h2 id="4-3配置"><a href="#4-3配置" class="headerlink" title="4.3配置"></a><font size=3>4.3配置</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看bcompare软件位置</span></span><br><span class="line">which bcompare</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再进行以下配置<span class="built_in">local</span>代表只在本地生效，全局生效可以改为global</span></span><br><span class="line">git config --local merge.tool bc4</span><br><span class="line">git config --local mergetool.path &quot;/usr/bin/bcompare&quot;</span><br><span class="line">git config --local mergetool.keepBackup false</span><br></pre></td></tr></table></figure><h2 id="4-4使用方法"><a href="#4-4使用方法" class="headerlink" title="4.4使用方法"></a><font size=3>4.4使用方法</font></h2><ul><li>启动软件</li></ul><p>&emsp;&emsp;先使用命令合并分支，若产生冲突，则使用以下命令启动软件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】Git-01-Git的安装与基本配置</title>
      <link href="post/780343d3.html"/>
      <url>post/780343d3.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;Git是 一个开源的分布式版本控制系统，本文主要介绍在<code>ubuntu</code>下<code>Git</code>的安装和一些基本的命令。</p><span id="more"></span><p>【说明】所用环境<code>VMwareWorkstation16.0 + Ubuntu18.04.6 + Win10</code></p><h1 id="1-git的几个网址和术语表"><a href="#1-git的几个网址和术语表" class="headerlink" title="1.git的几个网址和术语表"></a><font size=3>1.<code>git</code>的几个网址和术语表</font></h1><ul><li><code>git</code>官网</li></ul><p>&emsp;&emsp;<code>git</code>官网地址：<a href="https://git-scm.com/" target="_blank"><code>git</code>官网</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git-scm.com/</span><br></pre></td></tr></table></figure><ul><li><code>git</code>文档</li></ul><p>&emsp;&emsp;<code>git</code>官方文档地址：<a href="https://git-scm.com/doc" target="_blank"><code>git</code>官方文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git-scm.com/doc</span><br></pre></td></tr></table></figure><ul><li><code>Pro Git</code></li></ul><p>&emsp;&emsp;<code>Pro Git Book</code>的中文版地址：<a href="https://git-scm.com/book/zh/v2" target="_blank"><code>Pro Git</code>简体中文版</a></p><p>&emsp;&emsp;该书详细介绍了<code>git</code>的起源，历史以及应用配置等，讲解很详细，想要深入研究的话，不失为一本好书。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git-scm.com/book/zh/v2</span><br></pre></td></tr></table></figure><ul><li><code>git</code>各个工作区域及切换的命令</li></ul><p>&emsp;&emsp;<code>git</code>官网提供了一个在各个工作区域切换的一个演示界面(不过有时候可能进不去)，该界面提供了切换不同工作区域的命令及命令说明，可以选择中文版的，网址如下。</p><p><code>Visual Git Cheat Sheet</code>地址：<a href="https://ndpsoftware.com/git-cheatsheet.html" target="_blank"><code>Visual Git Cheat Sheet</code></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ndpsoftware.com/git-cheatsheet.html</span><br></pre></td></tr></table></figure><ul><li><code>git</code>的一个快速使用指南</li></ul><p>&emsp;&emsp;<code>git</code>中文版备忘单地址：<a href="https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/" target="_blank"><code>GitHub Cheat Sheet</code></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/</span><br></pre></td></tr></table></figure><ul><li><code>git</code>术语表（摘录自官网）</li></ul><table><!--表格-->    <tr><!--第1行-->        <td align="center" width=200px><!--第1列-->            术语        </td>        <td align="center"><!--第2列-->            说明        </td>    </tr>    <tr><!--第2行-->        <td align="center"><!--第1列-->           git        </td>        <td align="left"><!--第2列-->            一个开源的分布式版本控制系统        </td>    </tr>    <tr><!--第3行-->        <td align="center"><!--第1列-->           GitHub        </td>        <td align="left"><!--第2列-->           一个托管和协作管理 Git 仓库的平台        </td>    </tr>    <tr><!--第4行-->        <td align="center"><!--第1列-->           commit 提交        </td>        <td align="left"><!--第2列-->           一个 Git 对象，是你整个仓库的快照的哈希值        </td>    </tr>    <tr><!--第5行-->        <td align="center"><!--第1列-->           branch 分支        </td>        <td align="left"><!--第2列-->           一个轻型可移动的 commit 指针        </td>    </tr>     <tr><!--第6行-->        <td align="center"><!--第1列-->           clone        </td>        <td align="left"><!--第2列-->           一个仓库的本地版本，包含所有提交和分支        </td>    </tr>    <tr><!--第7行-->        <td align="center"><!--第1列-->          remote 远端        </td>        <td align="left"><!--第2列-->           一个 GitHub 上的公共仓库，所有小组成员通过它来交换修改        </td>    </tr>    <tr><!--第8行-->        <td align="center"><!--第1列-->          fork        </td>        <td align="left"><!--第2列-->           一个属于另一用户的 GitHub 上的仓库的副本        </td>    </tr>    <tr><!--第9行-->        <td align="center"><!--第1列-->         pull request 拉取请求        </td>        <td align="left"><!--第2列-->           一处用于比较和讨论分支上引入的差异，且具有评审、评论、集成测试等功能的地方        </td>    </tr>    <tr><!--第10行-->        <td align="center"><!--第1列-->         HEAD        </td>        <td align="left"><!--第2列-->           代表当前的工作目录。使用git checkout 可移动 HEAD 指针到不同的分支、标记(tags)或提交        </td>    </tr></table><h1 id="2-git的安装"><a href="#2-git的安装" class="headerlink" title="2.git的安装"></a><font size=3>2.<code>git</code>的安装</font></h1><ul><li><code>Linux</code>下的<code>Git</code>官方安装指南</li></ul><p>&emsp;&emsp;下载地址：<a href="https://git-scm.com/download/linux" target="_blank"><code>Download for Linux and Unix</code></a>。</p><ul><li>最新版本安装命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装最新版本的 git</span></span><br><span class="line">sudo add-apt-repository ppa:git-core/ppa</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><ul><li>一般安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><ul><li>查看<code>git</code>安装版本</li></ul><p>&emsp;&emsp;查看<code>git</code>的版本，安装成功，则会显示相应的版本号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h1 id="3-git的基本配置"><a href="#3-git的基本配置" class="headerlink" title="3.git的基本配置"></a><font size=3>3.<code>git</code>的基本配置</font></h1><h2 id="3-1什么是ssh？"><a href="#3-1什么是ssh？" class="headerlink" title="3.1什么是ssh？"></a><font size=3>3.1什么是<code>ssh</code>？</font></h2><ul><li><code>SSH</code></li></ul><p>&emsp;&emsp;<code>SSH</code>为<code>Secure Shell</code>的缩写，由<code>IETF</code>的网络小组（<code>Network Working Group</code>）所制定，是一种加密的<strong>网络传输协议</strong>，可在不安全的网络中为网络服务提供安全的传输环境,其保证数据安全的原理是<strong>非对称加密</strong>。</p><table>    <tr>        <td align="center" width=120px>对称加密</td>        <td align="left">&emsp;&emsp;使用的是一套秘钥，数据的加密以及解密用的都是同一套秘钥，当所有的客户端以及服务端都需要保存这套秘钥时，泄露的风险很高，而一旦秘钥便泄露便保证不了数据安全。</td>    </tr>    <tr>        <td align="left">非对称加密</td>        <td align="left">&emsp;&emsp;包含两套秘钥——公钥以及私钥，其中公钥用来加密，私钥用来解密，并且通过公钥计算不出私钥，因此私钥谨慎保存在服务端，而公钥可以随便传递，即使泄露也无风险。</td>    </tr></table><p>&emsp;&emsp;<code>SSH</code>在正确使用时可弥补网络中的漏洞；<code>SSH</code>是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议；利用<code>SSH</code>协议可以有效防止远程管理过程中的信息泄露问题。</p><p>&emsp;&emsp;<code>SSH</code>最初是<code>UNIX</code>系统上的一个程序，后来又迅速扩展到其他操作平台。<code>SSH</code>客户端适用于多种平台。几乎所有<code>UNIX</code>平台—包括<a href="https://baike.baidu.com/item/HP-UX"><code>HP-UX</code></a>、<a href="https://baike.baidu.com/item/Linux"><code>Linux</code></a>、<a href="https://baike.baidu.com/item/AIX"><code>AIX</code></a>、<a href="https://baike.baidu.com/item/Solaris/3517"><code>Solaris</code></a>、<a href="https://baike.baidu.com/item/UNIX"><code>Digital UNIX</code></a>、<a href="https://baike.baidu.com/item/Irix"><code>Irix</code></a>，以及其他平台，都可运行<code>SSH</code>。</p><ul><li><code>SSH</code>登录方式</li></ul><table>    <tr>        <td align="center" width=110px>方式</td>        <td align="center">说明</td>    </tr>    <tr>        <td align="left">密码登录</td>        <td align="left">1.服务端收到登录请求后，首先互换公钥;<br>2.客户端用服务端的公钥加密账号密码并发送;<br>3.服务端用自己的秘钥解密后得到账号密码，然后进行验证;<br>4.服务端用客户端的公钥加密验证结果并返回;<br>5.客户端用自己的秘钥解密后得到验证结果.</td>    </tr>    <tr>        <td align="left">公钥登录<br>(证书登录)</td>        <td align="left">1.客户端用户必须手动地将自己的公钥添加到服务器一个名叫authorized_keys的文件里，顾名思义，这个文件保存了所有可以远程登录的机器的公钥;<br>2.客户端发起登录请求，并且发送一个自己公钥的指纹（具有唯一性，但不是公钥）;<br>3.服务端根据指纹检测此公钥是否保存在authorized_keys中;<br>4.若存在，服务端便生成一段随机字符串，然后利用客户端公钥加密并返回;<br>5.客户端收到后用自己的私钥解密，再利用服务端公钥加密后发回;<br>6.服务端收到后用自己的私钥解密，如果为同一字符串，则验证通过.</td>    </tr></table><p>【参考文章】</p><ul><li><a href="https://hyrepo.com/tech/ssh-works/">图解<code>SSH</code>原理及两种登录方式</a></li><li><a href="https://www.youtube.com/watch?v=mF6J-VQHPxA"><code>Intro to SSH and SSH Keys</code></a></li><li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html"><code>SSH</code>原理与运用（一）：远程登录</a></li></ul><p>【注意】：下边配置的便是通过公钥登录实现与<code>Github</code>的无密码登录，另外说明一点就是有的参考资料可能需要科学上网才看查看。</p><h2 id="3-2检查ssh是否可以连接到github"><a href="#3-2检查ssh是否可以连接到github" class="headerlink" title="3.2检查ssh是否可以连接到github"></a><font size=3>3.2检查<code>ssh</code>是否可以连接到<code>github</code></font></h2><ul><li>检查命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><ul><li>连接失败</li></ul><p>&emsp;&emsp;若出现以下提示，则不能连接到<code>github</code>，需要重新配置，按照<code>3.2节</code>配置即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;github.com (20.205.243.166)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &#x27;github.com,20.205.243.166&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220108212328636.png" alt="image-20220108212328636" style="zoom:67%;" /><ul><li>连接成功</li></ul><p>&emsp;&emsp;若连接成功，则会有如下提示，可以跳过<code>3.2</code>节，开始使用<code>git</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi qidaink! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220108213009689.png" alt="image-20220108213009689" style="zoom:67%;" /><h2 id="3-2安装ssh-keys"><a href="#3-2安装ssh-keys" class="headerlink" title="3.2安装ssh keys"></a><font size=3>3.2安装<code>ssh keys</code></font></h2><p>&emsp;&emsp;【注意】：要在<code>~/.ssh</code>目录中进行</p><ul><li>检查相应的文件是否存在</li></ul><p>&emsp;&emsp;主要是检查文件<code>id_rsa（私钥）</code>和<code>id_rsa.pub（公钥）</code>是否存在。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220108220705441.png" alt="image-20220108220705441" style="zoom:67%;" /><p>&emsp;&emsp;发现没有<code>id_rsa（私钥）</code>和<code>id_rsa.pub（公钥）</code>这两个文件，说明没有<code>ssh keys</code></p><ul><li>(若有这两个文件)移除当前的<code>id_rsa（私钥）</code>和<code>id_rsa.pub（公钥）</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~/.ssh/id_rsa*</span><br></pre></td></tr></table></figure><ul><li>重新生成<code>id_rsa</code>和<code>id_rsa.pub</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;user&#x27;s github email address&quot;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>user&#39;s github email address</code>就是自己注册<code>github</code>时的邮箱。执行后会出现以下提示信息，其中有两次是让用户选择文件生成位置及设置密码的，不输入，直接按三次<code>enter</code>按键，表示路径默认，不需要密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/hk/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /home/hk/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/hk/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:cfJKNOMTwZf3j6t7aqbEqosgtQ2z0d0PWe+TckfHsZQ 2038035593@qq.com</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|       ..  .     |</span><br><span class="line">|        ..o .   .|</span><br><span class="line">|        B.o. . E |</span><br><span class="line">|   . . + @ .  o.o|</span><br><span class="line">|  = . . S . . .+o|</span><br><span class="line">| . B   . * . o...|</span><br><span class="line">|. + .   . = = .. |</span><br><span class="line">| . . .   o oooo  |</span><br><span class="line">|    . oo. .++=   |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><ul><li>打开<code>~/.ssh</code>文件夹</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入文件夹</span></span><br><span class="line">cd ~/.ssh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 会发现生成了id_rsa和id_rsa.pub文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑器打开文件，并复制所有内容</span></span><br><span class="line">gedit id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>添加<code>ssh keys</code>到<code>github</code></li></ul><p>【<code>Github</code>】&rarr;【登录账号】&rarr;【头像】&rarr;【<code>Setting</code>】&rarr;【<code>SSH and GPG keys </code>】&rarr;【<code>SSH keys</code>】&rarr;【<code>New SSH key</code>】</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220108221913272.png" alt="image-20220108221913272" style="zoom:30%;" /><p>添加完毕后会收到一封邮件，表示已经添加成功。</p><img src="https://fanhua-picture.oss-cn-hangzhou.aliyuncs.com/Ubuntu/Git/image-20220108222227365.png" alt="image-20220108222227365" style="zoom:50%;" /><ul><li>按<code>3.1节</code>再次检查是否可以正常连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="3-3git用户信息配置"><a href="#3-3git用户信息配置" class="headerlink" title="3.3git用户信息配置"></a><font size=3>3.3<code>git</code>用户信息配置</font></h2><ul><li>对<code>commit</code>操作设置关联的用户名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;[name]&quot;</span><br></pre></td></tr></table></figure><ul><li>对commit操作设置关联的邮箱地址</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><ul><li>启用有帮助的彩色命令行输出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global color.ui auto</span><br></pre></td></tr></table></figure><ul><li>文本编辑器设置</li></ul><p>&emsp;&emsp;用户信息已经设置完毕，就可以配置默认文本编辑器了，当 <code>git</code> 需要输入信息时会调用它。 如果未配置，<code>git</code> 会使用操作系统默认的文本编辑器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 若想使用Emacs编辑器，则可以用该命令，但是一般默认就可以</span></span><br><span class="line">git config --global core.editor emacs</span><br></pre></td></tr></table></figure><ul><li>对<code>LF</code>和<code>CRLF</code>的处理</li></ul><p>&emsp;&emsp;<code>Linux</code>系统和<code>Windows</code>系统下的换行符不一样，<code>Linux</code>是<code>\n</code>，即<code>LF</code>，<code>Windows</code>下面是<code>\r\n</code>，即<code>CRLF</code>，<code>git</code>在维护版本库的时候统一使用的是<code>LF</code>。所以当文档跨平台进行编辑的时候，换行符就会产生差别，在不同平台编辑过得文件在进行<code>commit</code>的时候也会有相应的换行符警告。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LF will be replaced by CRLF in .......</span><br></pre></td></tr></table></figure><p>那么怎么处理呢？这样就可以了（不过这样似乎只是治标不治本，仅仅是忽略了检查，要是文章的话还好，要是代码的话，有可能会因为换行符而出现问题，暂时先这样解决）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><ul><li>查看配置情况</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看配置</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看配置并显示配置文件所在位置</span></span><br><span class="line">git config --list --show-origin</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;会显示以下信息（使用的是第一个命令）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.name=[name]</span><br><span class="line">user.email=[email address]</span><br><span class="line">color.ui=auto</span><br></pre></td></tr></table></figure><ul><li><code>global</code>选项</li></ul><p>&emsp;&emsp;如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论在该系统上做任何事情， Git 都会使用那些信息。 当想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ubuntu】Typora和PicGo-core的应用</title>
      <link href="post/bb4b0e6d.html"/>
      <url>post/bb4b0e6d.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要说明在ubuntu中使用Typora和PicGo软件实现编写Markdown软件的时候将图片转存到Gitee（也可以用其他，我只是觉得这个空间足够，而且访问速度也还好）上并获取链接，这样就可以保证我们写的文章中的图片在不同的平台都可以访问得到，ubuntu版本为ubuntu18.04。</p><span id="more"></span><h1 id="1-Gitee配置"><a href="#1-Gitee配置" class="headerlink" title="1.Gitee配置"></a><font size=3>1.Gitee配置</font></h1><h2 id="1-1注册账户"><a href="#1-1注册账户" class="headerlink" title="1.1注册账户"></a><font size=3>1.1注册账户</font></h2><ul><li>网址如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gitee.com&#x2F;</span><br></pre></td></tr></table></figure><ul><li>正常注册即可</li></ul><h2 id="1-2进行配置"><a href="#1-2进行配置" class="headerlink" title="1.2进行配置"></a><font size=3>1.2进行配置</font></h2><ul><li>新建仓库</li></ul><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Ubuntu/Software/001CreateNewRepository.png"  /><p>&emsp;&emsp;这里要注意一下，在Gitee中仓库名称跟路径名称好像有点区别，只定义仓库名称的时候下边的路径会加上<code>-</code>符号，这里尽量不要自行修改路径，按照填完仓库名称之后的<strong>默认路径</strong>即可，否则有可能会出现文章加载图片失败的情况，在后边配置PicGo的时候需要注意这一点，另外这个仓库要设置成<strong>公开</strong>的，私人仓库是不能被除自己gitee账号之外的其他东西访问的。</p><ul><li>生成令牌</li></ul><p>&emsp;&emsp;（1）在设置中点击私人令牌，然后生成即可</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Ubuntu/Software/002Generate%20a%20private%20token.png" style="zoom:67%;" /><p>&emsp;&emsp;（2）生成结果如下图，另外这个令牌数字只有生成成功的时候出现一次，后边是不能查看的，这里需要保存一下。</p><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Ubuntu/Software/003Save%20private%20tokens.png" style="zoom: 67%;" /><h1 id="2-PicGo-core配置"><a href="#2-PicGo-core配置" class="headerlink" title="2.PicGo-core配置"></a><font size=3>2.PicGo-core配置</font></h1><ul><li>安装PicGo-core</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装PicGo-core</span></span><br><span class="line">npm install picgo -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">picgo -v</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;安装完成之后会有如下提示，但是不用观警告即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated</span><br><span class="line">npm WARN deprecated har-validator@5.1.5: this library is no longer supported</span><br><span class="line">npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142</span><br><span class="line"></span><br><span class="line">added 449 packages in 16s</span><br></pre></td></tr></table></figure><ul><li>安装gitee上传插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo install gitee-uploader</span><br></pre></td></tr></table></figure><ul><li>修改PicGo-core配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.picgo/config.json</span><br></pre></td></tr></table></figure><p>文件修改如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;picBed&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;current&quot;</span>: <span class="string">&quot;gitee&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uploader&quot;</span>: <span class="string">&quot;gitee&quot;</span>,</span><br><span class="line">    <span class="string">&quot;smms&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;gitee&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;qidaink&quot;</span>,</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;imges/00Windows中Typora与Gitee库images&quot;</span>,</span><br><span class="line">      <span class="string">&quot;repo&quot;</span>: <span class="string">&quot;qidaink/blog-images&quot;</span>,</span><br><span class="line">      <span class="string">&quot;token&quot;</span>: <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;picgoPlugins&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;picgo-plugin-gitee&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;picgo-plugin-gitee-uploader&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;picgo-plugin-gitee-uploader&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;lastSync&quot;</span>: <span class="string">&quot;2021-02-09 06:32:34&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><!--表格-->    <tr><!--第1行-->        <td align="center"><!--第1列-->         参数        </td>        <td align="center"><!--第2列-->         说明        </td>    </tr>    <tr><!--第2行-->        <td align="center"><!--第1列-->         owner        </td>        <td align="left"><!--第2列-->         为自己的用户名，就是自己注册的时候的账户名        </td>    </tr>    <tr><!--第3行-->        <td align="center"><!--第1列-->         repo        </td>        <td align="left"><!--第2列-->         为仓库名称，repo要写自己仓库页面下搜索引擎中的仓库名称，否则可能会出现提示上传，但是从来不会上传成功，也不会提示失败的情况。        </td>    </tr>    <tr><!--第4行-->        <td align="center"><!--第1列-->         path        </td>        <td align="left"><!--第2列-->         为上传的文件存储的目录，图片文件都会上传到path中去，其中根目录的话就不用填写了，根目录就是和readme文件同一级的目录。        </td>    </tr>    <tr><!--第5行-->        <td align="center"><!--第1列-->         token        </td>        <td align="left"><!--第2列-->         在Gitee中生成个人令牌，该token只会在生成的时候显示一次，所以要注意保存。        </td>    </tr></table><ul><li>查看picgo和node安装位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看picgo安装位置</span></span><br><span class="line">which picgo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看node安装位置</span></span><br><span class="line">which node</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/hk/.npm/npm-global/bin/picgo</span><br><span class="line">/usr/bin/node</span><br></pre></td></tr></table></figure><h1 id="3-Typora设置"><a href="#3-Typora设置" class="headerlink" title="3.Typora设置"></a><font size=3>3.Typora设置</font></h1><ul><li>偏好设置-图像上传服务</li></ul><p>&emsp;&emsp;上传服务选择：<code>Custom Command</code></p><p>&emsp;&emsp;命令填写格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> node安装位置+ picgo安装位置+upload</span></span><br><span class="line">/usr/bin/node /home/hk/.npm/npm-global/bin/picgo upload</span><br></pre></td></tr></table></figure><img src="https://gitee.com/qidaink/qidaink-images/raw/master/Ubuntu/Software/004Set%20up%20the%20typora%20and%20picgo.png" style="zoom:67%;" /><ul><li>偏好设置-插入图片</li></ul><p>&emsp;&emsp;若想要将不同文章的图片保存到本地，则可以选择复制到指定路径，但是一定要记得，每次写文章的时候修改本地文章图片路径和仓库图片路径，这里建议选择<code>复制图片到./$filename&#125;.assets文件夹</code>，这样在每次新建的文插入图片的同时会自动创建一个文件夹用于存放图片，更方便一些。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> PicGo </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ubuntu】Node和PicGo安装</title>
      <link href="post/dbec4ae9.html"/>
      <url>post/dbec4ae9.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;本文主要介绍在Ubuntu18.04中如何安装node和PicGo图形界面，由于PicGo软件的插件需要node的支持，所以需要先安装node软件，不过到最后又把PicGo的相关文件删除，原因是ubuntu中可以使用PicGo-core来实现图片自动上传，比在windows中方便很多。</p><span id="more"></span><h1 id="1-node安装与配置"><a href="#1-node安装与配置" class="headerlink" title="1.node安装与配置"></a><font size=3>1.node安装与配置</font></h1><h2 id="1-1node软件安装"><a href="#1-1node软件安装" class="headerlink" title="1.1node软件安装"></a><font size=3>1.1node软件安装</font></h2><ul><li>软件网址</li></ul><p>&emsp;&emsp;Node.js官网：<a href="https://github.com/nodesource/distributions" target="_blank">Node.js</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/nodesource/distributions</span><br></pre></td></tr></table></figure><ul><li>官网软件安装命令(这里安装<code>Node.js v15.x</code>版本)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Using Ubuntu</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><ul><li>执行后提示如下信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Run `sudo apt-get install -y nodejs` to install Node.js 15.x and npm</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># You may also need development tools to build native addons:</span></span></span><br><span class="line">     sudo apt-get install gcc g++ make</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># To install the Yarn package manager, run:</span></span></span><br><span class="line">     curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line">     echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list</span><br><span class="line">     sudo apt-get update &amp;&amp; sudo apt-get install yarn</span><br></pre></td></tr></table></figure><ul><li>安装gcc等软件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc g++ make</span><br></pre></td></tr></table></figure><ul><li>安装yarn</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line">     echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list</span><br><span class="line">     sudo apt-get update &amp;&amp; sudo apt-get install yarn</span><br></pre></td></tr></table></figure><ul><li>安装node</li></ul><p>&emsp;&emsp;其实这个时候已经安装完毕了，但是我并不是特别清楚，哪一步直接给装了，所以可以再执行一次，会发现已经安装了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><ul><li>查看版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看node版本</span></span><br><span class="line">node -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看npm版本</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><ul><li>更换下载源，否则下载插件会很慢</li></ul><p>&emsp;&emsp;当然如果有其他的途径的话，也可以不进行更换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 原始下载源：https://registry.npmjs.org/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更换下载源：https://registry.npm.taobao.org</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li>测试换源是否成功</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h2 id="1-2node软件配置"><a href="#1-2node软件配置" class="headerlink" title="1.2node软件配置"></a><font size=3>1.2node软件配置</font></h2><p>&emsp;&emsp;node安装完毕之后，可能会出现全局安装包时 EACCES 权限错误，所以这里可以更改插件安装目录来解决这个问题。</p><p>&emsp;&emsp;npm文档：<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank">EACCES 权限错误问题解决</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally</span><br></pre></td></tr></table></figure><ul><li>创建全局安装及缓存的目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.npm/npm-global</span><br><span class="line">mkdir ~/.npm/npm-cache</span><br></pre></td></tr></table></figure><ul><li>配置 npm 以使用新的目录路径</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &#x27;~/.npm/npm-global&#x27;</span><br><span class="line">npm config set cache &#x27;~/.npm/npm-cache&#x27;</span><br></pre></td></tr></table></figure><ul><li>修改<code>~/.profile</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开文件</span></span><br><span class="line">vim ~/.profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加以下语句到结尾</span></span><br><span class="line">export PATH=~/.npm/npm-global/bin:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出文件编辑并保存</span></span><br><span class="line">:wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新.profile文件</span></span><br><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><h1 id="2-PicGo图形界面安装与配置"><a href="#2-PicGo图形界面安装与配置" class="headerlink" title="2.PicGo图形界面安装与配置"></a><font size=3>2.PicGo图形界面安装与配置</font></h1><p>&emsp;&emsp;该软件在ubuntu中好像只能用这个<code>AppImage</code>文件来安装，至少我还没有发现其他的方法，所以这里我就下载这个文件，并向dash中添加图标，同时添加一个picgo的命令，来终端启动该软件。</p><h2 id="2-1PicGo下载"><a href="#2-1PicGo下载" class="headerlink" title="2.1PicGo下载"></a><font size=3>2.1PicGo下载</font></h2><ul><li>PicGo的相关网址</li></ul><p>&emsp;&emsp;PicGo官网：<a href="https://github.com/Molunerfinn/PicGo" target="_blank">PicGo Github repositories</a></p><p>&emsp;&emsp;PicGo文档官网：<a href="https://picgo.github.io/PicGo-Doc/zh/" target="_blank">PicGo文档</a></p><ul><li><code>AppImage</code>文件下载</li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P ~/01MySoftFiles/PicgoFiles/ https://github.com/Molunerfinn/PicGo/releases/download/v2.3.0-beta.4/PicGo-2.3.0-beta.4.AppImage</span><br></pre></td></tr></table></figure><ul><li>PicGo的SourceCode下载</li></ul><p>&emsp;&emsp;指定的文件夹必须非空，或者也可以进入你想要下载到的文件夹中，不加后边的地址，直接下载也可以。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Molunerfinn/PicGo.git ~/01MySoftFiles/PicgoFiles/PicGoSourceCode</span><br></pre></td></tr></table></figure><ul><li>运行<code>PicGo-2.3.0-beta.4.AppImage</code>软件</li></ul><p>&emsp;&emsp;进入该软件的安装目录下（图形界面进入），进入之后右键&rarr;属性&rarr;权限&rarr;勾选允许作为可执行文件，或者全部按照以下命令在终端中执行也可以。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入下载的目录</span></span><br><span class="line">cd ~/01MySoftFiles/PicgoFiles/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加可执行权限</span></span><br><span class="line">chmod u+x PicGo-2.3.0-beta.4.AppImage</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行程序</span></span><br><span class="line">./PicGo-2.3.0-beta.4.AppImage</span><br></pre></td></tr></table></figure><h2 id="2-2PicGo图标创建"><a href="#2-2PicGo图标创建" class="headerlink" title="2.2PicGo图标创建"></a><font size=3>2.2PicGo图标创建</font></h2><p>&emsp;&emsp;在这里将该软件放到<code>/usr/local</code>目录下，并将图标添加到dash。</p><ul><li>创建软件目录</li></ul><p>&emsp;&emsp;该文件夹用于存放可执行程序和图标。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建相应的文件夹</span></span><br><span class="line">sudo mkdir /usr/local/picgo</span><br></pre></td></tr></table></figure><ul><li>拷贝<code>PicGo-2.3.0-beta.4.AppImage</code>文件及PicGo图标</li></ul><p>&emsp;&emsp;这一步必须要进行第一所在文件夹的读写权限的修改，否则，后续生成文件快捷方式会没有反应，通过终端自定义命令重定义软件的时候会出现报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拷贝可执行文件</span></span><br><span class="line">sudo cp ~/01MySoftFiles/PicgoFiles/PicGo-2.3.0-beta.4.AppImage /usr/local/picgo/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝图标</span></span><br><span class="line">sudo cp ~/01MySoftFiles/PicgoFiles/PicGoSourceCode/public/logo.png /usr/local/picgo/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件夹的权限</span></span><br><span class="line">sudo chmod 777 /usr/local/picgo</span><br></pre></td></tr></table></figure><ul><li>创建<code>.desktop</code>文件并修改</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入软件启动器目录</span></span><br><span class="line">cd /usr/share/applications</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个picgo的软件启动器</span></span><br><span class="line">sudo vim picgo.desktop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加如下内容</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=PicGo</span><br><span class="line">Exec=/usr/local/picgo/PicGo-2.3.0-beta.4.AppImage</span><br><span class="line">Icon=/usr/local/picgo/logo.png</span><br><span class="line">Categories=Application;Development;Java;IDE</span><br><span class="line">Type=Application</span><br><span class="line">Terminal=false</span><br></pre></td></tr></table></figure><h2 id="2-3PicGo终端运行"><a href="#2-3PicGo终端运行" class="headerlink" title="2.3PicGo终端运行"></a><font size=3>2.3PicGo终端运行</font></h2><ul><li>文件拷贝</li></ul><p>&emsp;&emsp;请参考2.2节</p><ul><li>修改相应文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开.bashrc 文件</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件的末尾添加如下的一行：<span class="built_in">alias</span> picgo=<span class="string">&quot;/usr/local/picgo/PicGo-2.3.0-beta.4.AppImage&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑完成后刷新一下.bashrc文件</span></span><br><span class="line">source ~/.bashrc </span><br></pre></td></tr></table></figure><ul><li>启动软件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在终端中直接输入名称即可启动</span></span><br><span class="line">picgo</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意：在ubuntu中其实可以不用该图形界面，使用PicoGo-core就可以了，所以此处的配置，到后边的时候我又删掉了，等于体验了一下<code>AppImage</code>文件如何自定义命令吧。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ubuntu】Typora的安装</title>
      <link href="post/d703d5b.html"/>
      <url>post/d703d5b.html</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>&emsp;&emsp;Typora是一款可以实时预览自己所写Markdown文章内容的一款编辑器，并且可以配合PicGo软件完成图片在图床上地址的生成。本文章主要说明在Ubuntu18.04中安装Typora的两种方式：在线安装和离线安装，安装完成之后就是启动了，本文介绍了两种启动方式的配置，一种是在dash中显示图标，另一种是直接终端运行某条命令来运行软件。</p><span id="more"></span><h1 id="1-Typora在线安装"><a href="#1-Typora在线安装" class="headerlink" title="1.Typora在线安装"></a><font size=3>1.Typora在线安装</font></h1><ul><li>官网安装方式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> or use</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span></span><br><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> add Typora<span class="string">&#x27;s repository</span></span></span><br><span class="line">sudo add-apt-repository &#x27;deb https://typora.io/linux ./&#x27;</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install typora</span></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure><h1 id="2-Typora离线安装"><a href="#2-Typora离线安装" class="headerlink" title="2.Typora离线安装"></a><font size=3>2.Typora离线安装</font></h1><h2 id="2-1软件下载及运行"><a href="#2-1软件下载及运行" class="headerlink" title="2.1软件下载及运行"></a><font size=3>2.1软件下载及运行</font></h2><ul><li>官网下载安装包</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://typora.io/#linux</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;手动下载安装包或者使用以下命令下载，使用wget下载安装包到指定目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P ~/01MySoftFiles/Typora/ https://typora.io/linux/Typora-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;若提示没有wget命令，可使用以下命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install wegt</span><br></pre></td></tr></table></figure><ul><li>解压</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入文件夹</span></span><br><span class="line">cd ~/01MySoftFiles/Typora</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始解压，解压后会产生一个bin文件夹</span></span><br><span class="line">tar -zxvf Typora-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><ul><li>运行软件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入解压缩的文件夹中</span></span><br><span class="line">cd ~/01MySoftFiles/Typora/bin/Typora-linux-x64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行软件</span></span><br><span class="line">./Typora</span><br></pre></td></tr></table></figure><h2 id="2-2软件快捷方式创建"><a href="#2-2软件快捷方式创建" class="headerlink" title="2.2软件快捷方式创建"></a><font size=3>2.2软件快捷方式创建</font></h2><p>&emsp;&emsp;由2.1章节解压缩软件后，进入相应的目录，使用命令即可启动软件，那么这样就很麻烦，每次都要进入相应的文件夹去，或者运行的时候都要带上相应的绝对地址，那么能不能像vim啊，这些软件，在dash上产生一个图标，点击图标之后就可以启动呢？且看下边的操作。</p><ul><li>选择离线软件的安装目录</li></ul><p>&emsp;&emsp;就是你想把软件运行的相关组件都放在哪里，我这边放到了<code>/usr/local/</code>目录(由于是根目录下的文件夹，所以需要加上sudo)下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv ~/01MySoftFiles/Typora/bin/Typora-linux-x64 /usr/local/</span><br></pre></td></tr></table></figure><ul><li>创建快捷启动</li></ul><p>&emsp;&emsp;ubuntu的dash中的软件启动器处于在<code>/usr/share/applications</code>这个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入软件启动器所在文件夹</span></span><br><span class="line">cd /usr/share/applications</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个Typora的软件启动器</span></span><br><span class="line">sudo vim typora.desktop</span><br></pre></td></tr></table></figure><ul><li>修改<code>typora.desktop</code>内容</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Typora</span><br><span class="line">Exec=/usr/local/Typora-linux-x64/Typora</span><br><span class="line">Icon=/usr/local/Typora-linux-x64/resources/app/asserts/icon/icon_256x256@2x.png</span><br><span class="line">Categories=Application;Development;Java;IDE</span><br><span class="line">Type=Application</span><br><span class="line">Terminal=false</span><br></pre></td></tr></table></figure><table><!--表格-->    <tr><!--第1行-->        <td width=200px align="center"><!--第1列-->            程序参数        </td>        <td align="center"><!--第2列-->            说明        </td>    </tr>    <tr><!--第2行-->        <td width=200px align="center"><!--第1列-->            Encoding        </td>        <td align="left"><!--第2列-->            编码格式        </td>    </tr>    <tr><!--第3行-->        <td width=200px align="center"><!--第1列-->            Name        </td>        <td align="left"><!--第2列-->            软件图标名称        </td>    </tr>    <tr><!--第4行-->        <td width=200px align="center"><!--第1列-->            Exec        </td>        <td align="left"><!--第2列-->            软件执行文件的路径        </td>    </tr>    <tr><!--第5行-->        <td width=200px align="center"><!--第1列-->            Icon        </td>        <td align="left"><!--第2列-->            软件图标路径        </td>    </tr>    <tr><!--第6行-->        <td width=200px align="center"><!--第1列-->            Categories        </td>        <td align="left"><!--第2列-->            应用的类型（内容相关）        </td>    </tr>    <tr><!--第7行-->        <td width=200px align="center"><!--第1列-->            Type        </td>        <td align="left"><!--第2列-->            用于指定 desktop 文件的类型（包括 3 种类型：Application、Link、Directory)        </td>    </tr>    <tr><!--第8行-->        <td width=200px align="center"><!--第1列-->            Terminal        </td>        <td align="left"><!--第2列-->            程序是否在终端窗口中运行。        </td>    </tr></table><p>&emsp;&emsp;修改完毕之后，在vim中英文状态下按<code>:wq</code>退出去就可以看到dash中多了一个typora的图标，点击就可以运行该软件了，是不是很神奇，但是目前我只知道以上表格中几个参数的含义，不过有这几个参数，就足够实现快捷方式了。 </p><h2 id="2-3终端运行typora"><a href="#2-3终端运行typora" class="headerlink" title="2.3终端运行typora"></a><font size=3>2.3终端运行typora</font></h2><p>&emsp;&emsp;我们平时在终端中敲一个ubuntu中的命令，就可以执行相应的操作，那么能不能直接在命令行敲<code>typora</code>来启动软件呢，就像命令行输入<code>vim</code>就可以启动vim一样，答案当然是可以的,可以使用<code>alias</code>命令来重定义完整的路径，不过我们需要修改下<code>.bashrc</code>文件(修改后，重新开启新终端下也有效)。</p><ul><li>修改相应文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开.bashrc文件</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件的末尾添加如下的一行：<span class="built_in">alias</span> typora=<span class="string">&quot;/usr/local/Typora-linux-x64/Typora&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑完成后刷新一下.bashrc文件</span></span><br><span class="line">source ~/.bashrc </span><br></pre></td></tr></table></figure><ul><li>启动软件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在终端中直接输入名称即可启动</span></span><br><span class="line">typora</span><br></pre></td></tr></table></figure><ul><li>解决警告</li></ul><p>&emsp;&emsp;正常启动后，我的Ubuntu貌似不太乖，它报警告了，虽然也正常启动了，但是，还是看着不舒服，需要解决一下。警告信息如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Gtk-Message: 19:18:18.606: Failed to load module &quot;unity-gtk-module&quot;</span><br><span class="line">Gtk-Message: 19:18:18.609: Failed to load module &quot;unity-gtk-module&quot;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;按照警告提示，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install unity-gtk3-module</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;输入安装之后，完美解决，这样就完成了一个命令的自定义。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
